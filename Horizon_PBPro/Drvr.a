;
;	File:		Drvr.a
;
;	Contains:	driver asmbly routines
;
;	Written by:	Bryan Hunt/ Eric Kuo
;
;	Copyright:	й 1994 by RasterOps, Inc., all rights reserved.
;
;	Change History (most recent first):
;
;		 <2>	 3/23/94	ek		combined with DrvrHeader.a
;		 <1>	 3/21/94	ek		first checked in
;
	include 'Rom.a'
	
	STRING	PASCAL
	
	import	endDrvr
	import	cOpen,cPrime,cControl,cStatus,cClose
	
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;				driver header
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;	Driver Structure:
;
;	0:	flags
;	2:	x
;	4:	x
;	6:	x
;	8:	offset to open()
;	10:	offset to prime()
;	12:	offset to control()
;	14:	offset to status()
;	16:	offset to close()
;	18:	name string[] (Pascal)
;	.
;	xx: code
;
Drvr	proc	export
	dc.l	endDrvr-Drvr	; Length of sBlock
main
	dc.w	$4C00			; driver responds to Control and Status, NeedsLock
	dc.w	0				; NOT A DA (was "update every x seconds")
	dc.w	0				; NOT A DA (was "detect events")
	dc.w	0				; NOT A DA (was "menu ID number")
	dc.w	open-main		; open routine
	dc.w	prime-main		; prime routine (not needed for this driver)
	dc.w	control-main	; control routine
	dc.w	status-main		; status routine
	dc.w	close-main		; close routine
  IF	MAKING_HORI24	THEN
    dc.b    '.RasterOps 2.0 Horizon Video Driver'
	dc.w	0				; for alignment
  ENDIF
  IF	MAKING_PBP		THEN
    dc.b    '.RasterOps 2.0 PaintBoard Professional Video Driver'
	dc.w	0				; for alignment
  ENDIF
	
;
; driver entry points
;
open
	movem.l a0-a5/d1-d7,-(sp)  	; save nearly all registers	
	jsr		cOpen				; call our c routine
	movem.l (sp)+,a0-a5/d1-d7	; Restore nearly all registers
	rts
prime
	movem.l a0-a5/d1-d7,-(sp)  	; save nearly all registers	
	jsr		cPrime				; call our c routine
	movem.l (sp)+,a0-a5/d1-d7	; Restore nearly all registers
	rts
control
	movem.l a0-a5/d1-d7,-(sp)  	; save nearly all registers	
	jsr		cControl			; call our c routine
	movem.l (sp)+,a0-a5/d1-d7	; Restore nearly all registers
	btst    #1,6(a0)			;; Check ioTrap field of the paramblock if it has the "NoQueue" bit set.
	beq.s   _iodone				;; The bit wasn't set, so it has a queue element allocated for it.  Go do jIODone.
	rts
_iodone
	movea.l	JIODone,a0			; Load address of jIODone routine
	jmp		(a0)				; Use it to exit with
status
	movem.l a0-a5/d1-d7,-(sp)  	; save nearly all registers	
	jsr		cStatus				; call our c routine
	movem.l (sp)+,a0-a5/d1-d7	; Restore nearly all registers
	btst    #1,6(a0)			;; Check ioTrap field of the paramblock if it has the "NoQueue" bit set.
	beq.s   _iodone				;; The bit wasn't set, so it has a queue element allocated for it.  Go do jIODone.
	rts
close
	movem.l a0-a5/d1-d7,-(sp)  	; save nearly all registers	
	jsr		cClose				; call our c routine
	movem.l (sp)+,a0-a5/d1-d7	; Restore nearly all registers
	rts
	endp
	
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;				isr()
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;
; Board Interrupt Handler
;
; On entry:  A1 contains the slot base address
;            D0-D3/A0-A3 have already been preserved
;            (But *not* in AUX, so save them anyway!)
;
;	d0: scratch
;	d3: mmuMode
;
;	a0: scratch
;	a2: base+venus
;
;	venus status register:
;		1. bit 0 is vbl interrupt, bit 1 is external interrupt (daughter card)
;		2. write 0 clears interrupt, write 1 has no effect
;		3. the rest are read only
;
isr		PROC	EXPORT
	bra.s	start
	
	dc.w	$0000			; unused0
	dc.w	$0000			; unused1
	dc.w	$0000			; unused2
	dc.w	$0000			; unused3
	dc.w	$0000			; unused4
	dc.w	$0000			; unused5
	
start:
	movem.l	a0-a5/d1-d7,-(sp)	; Save nearly all registers
	; get venus address in a2
	move.l	a1,d0				; get slot base address in a2
	andi.l	#$FF000000,d0		; 32 bit slot base address in d0
	move.l	d0,a2				; stow slot base address in a2
	adda.l	#RGS14188,a2 		; add offset to a2
	
	; check to see if it is vbl interrupt
	moveq	#1,d0				; 
	dc.w	$a05d				; SwapMMUMode
	move.w	d0,d3				; save previous mmu mode
	move.l	$10(a2),d0			; get status register
	andi.l	#$00000001,d0		; bit 0 is vbl interrupt bit
	beq.s	extInt				; if not vbl, must be external
	
	; vbl interrupt, clear our bit and jump to vbl task manager
vblInt:
	move.l	#00000002,$10(a2)	; clear our bit, dont want to touch external interrupt bit
	move.w	d3,d0				; restore previous mmu mode
	dc.w	$a05d				; SwapMMUMode
	move.l	a1,d0				; stow slot base address in D0
 								; D0 is currently: $Fs0xxxxx, we need: $0000000s
	rol.l 	#8,d0				; D0 is now: $0xxxxxFs
	andi.l	#$f,d0				; D0 is now: $0000000s, the slot number
	movea.l	$d28,a0				; get the address of the VBL task manager
	jsr		(a0)				; go service the interrupt with slot number in D0
	moveq	#1,d0				; signal that the interrupt was serviced
	bra.s	out					;
	
	; external interrupt, clear our bit and jump to vbl task manager
extInt:	
	move.w	d3,d0				; restore previous mmu mode
	dc.w	$a05d				; SwapMMUMode
	moveq	#0,d0				; signal that the interrupt was not serviced
	
out:
	movem.l	(sp)+,a0-a5/d1-d7	; Restore nearly all registers
	rts							; run home to mommy-caller
	ENDPROC
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;				util routines
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;
; GetDcePb
;
GetDcePb	proc	export
	move.l	8(sp),a2
	move.l	a0,(a2)			; save pb pointer
	move.l	4(sp),a2
	move.l	a1,(a2)			; save DCE pointer
	rts
	endp
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
;				AppleGamma8
;еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее
AppleGamma8	proc	export
    DC.B	$00,$05,$09,$0B,$0E,$10,$13,$15,$17,$19,$1B,$1D,$1E,$20,$22,$24
	DC.B	$25,$27,$28,$2A,$2C,$2D,$2F,$30,$31,$33,$34,$36,$37,$38,$3A,$3B
	DC.B	$3C,$3E,$3F,$40,$42,$43,$44,$45,$47,$48,$49,$4A,$4B,$4D,$4E,$4F
	DC.B	$50,$51,$52,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5E,$5F,$60,$61
	DC.B	$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F,$70,$71
	DC.B	$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F,$80,$81
	DC.B	$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8C,$8D,$8E,$8F
	DC.B	$90,$91,$92,$93,$94,$95,$95,$96,$97,$98,$99,$9A,$9B,$9B,$9C,$9D
	DC.B	$9E,$9F,$A0,$A1,$A1,$A2,$A3,$A4,$A5,$A6,$A6,$A7,$A8,$A9,$AA,$AB
	DC.B	$AB,$AC,$AD,$AE,$AF,$B0,$B0,$B1,$B2,$B3,$B4,$B4,$B5,$B6,$B7,$B8
	DC.B	$B8,$B9,$BA,$BB,$BC,$BC,$BD,$BE,$BF,$C0,$C0,$C1,$C2,$C3,$C3,$C4
	DC.B	$C5,$C6,$C7,$C7,$C8,$C9,$CA,$CA,$CB,$CC,$CD,$CD,$CE,$CF,$D0,$D0
	DC.B	$D1,$D2,$D3,$D3,$D4,$D5,$D6,$D6,$D7,$D8,$D9,$D9,$DA,$DB,$DC,$DC
	DC.B	$DD,$DE,$DF,$DF,$E0,$E1,$E1,$E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7,$E8
	DC.B	$E9,$E9,$EA,$EB,$EC,$EC,$ED,$EE,$EE,$EF,$F0,$F1,$F1,$F2,$F3,$F3
	DC.B	$F4,$F5,$F5,$F6,$F7,$F8,$F8,$F9,$FA,$FA,$FB,$FC,$FC,$FD,$FE,$FF
	endp
	end
