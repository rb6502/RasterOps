                               	;
                               	;	File:		DDCRom.a
                               	;
                               	;	Contains:	The declaration ROM source for the DAFB Õ040 PDS Display Card.
                               	;
                               	;	Written by: Mike Puckett, July 2, 1991.
                               	;
                               	;	Copyright:	© 1991 by Apple Computer, Inc., all rights reserved.
                               	;
                               	;	Change History (most recent first):
                               	;
                               	;		 <10>	02/27/92	jwh		Changed 21" clock chip to run at 200mhz/2 instead of 100mhz/1
                               	;		 <9>	12/20/91	jwh		Changed 19" timing, added RasterOps icon
                               	;		 <8>	12/18/91	jmp		Updated the Kong/Vesuvio, GoldFish, SuperVGA, and PAL
                               	;									non-convolved tables so that all depths within each
                               	;									configuration share a common base address.  Also, tweaked the
                               	;									19Ó Display parameters to generate a 60.2 KHz clock rather than
                               	;									a 59.9 KHz clock.
                               	;		 <7>	11/11/91	jmp		Added gamma correction for VGA displays.
                               	;		 <6>	11/06/91	jmp		Added support for 19Ó displays.
                               	;		 <5>	09/18/91	jmp		Changed the partnumber field of the VendorInfo sRsrc to be an
                               	;									acknowledgment field.
                               	;		 <4>	09/17/91	jmp		Fixed a typo in the 16bpp DAFB PAL params.
                               	;		 <3>	09/17/91	jmp		Fixed 16bpp PAL modes.
                               	;		 <2>	09/17/91	jmp		Updated QuickDraw & DAFB params for 16bpp.
                               	;		 <1>	09/17/91	jmp		first checked in
                               					Print	On
00000                          	DeclROM			Main
00000
00000                          	;-------------------------------------------------------------
00000                          	;				sResource Directory
00000                          	;-------------------------------------------------------------
00000                          	;
00000
00000                          	_sRsrcDir		OSLstEntry	sRsrcBoard,_sRsrc_Board									; Board sRsrc.
00000   0100 007C             1	  				DC.L		(sRsrcBoard<<24)++((_sRsrc_Board-*)**$00FFFFFF)
00004
00004                          					OSLstEntry	sRsrc_Vid_DAFB_RGB2Pa,_sRsrc_Vid_DAFB_RGB2Pa			; Vesuvio (1,2,4,8).
00004   8000 0302             1	  				DC.L		(sRsrc_Vid_DAFB_RGB2Pa<<24)++((_sRsrc_Vid_DAFB_RGB2Pa-*)**$00FFFFFF)
00008                          					OSLstEntry	sRsrc_Vid_DAFB_RGB2Pb,_sRsrc_Vid_DAFB_RGB2Pb 			; Vesuvio (1,2,4,8,16).
00008   8100 0332             1	  				DC.L		(sRsrc_Vid_DAFB_RGB2Pb<<24)++((_sRsrc_Vid_DAFB_RGB2Pb-*)**$00FFFFFF)
0000C
0000C                          					OSLstEntry	sRsrc_Vid_DAFB_FP,_sRsrc_Vid_DAFB_FP					; Portrait (1,2,4,8).
0000C   8200 0366             1	  				DC.L		(sRsrc_Vid_DAFB_FP<<24)++((_sRsrc_Vid_DAFB_FP-*)**$00FFFFFF)
00010                          					OSLstEntry	sRsrc_Vid_DAFB_GS,_sRsrc_Vid_DAFB_GS					; Rubik (1,2,4,8,16,32).
00010   8400 0396             1	  				DC.L		(sRsrc_Vid_DAFB_GS<<24)++((_sRsrc_Vid_DAFB_GS-*)**$00FFFFFF)
00014                          					OSLstEntry	sRsrc_Vid_DAFB_2P,_sRsrc_Vid_DAFB_2P  					; Kong (1,2,4,8).
00014   8600 03CE             1	  				DC.L		(sRsrc_Vid_DAFB_2P<<24)++((_sRsrc_Vid_DAFB_2P-*)**$00FFFFFF)
00018
00018                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCSTa,_sRsrc_Vid_DAFB_NTSCSTa			; NTSC safe title (1,2,4,8,16)
00018   8800 03FE             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCSTa<<24)++((_sRsrc_Vid_DAFB_NTSCSTa-*)**$00FFFFFF)
0001C                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCSTb,_sRsrc_Vid_DAFB_NTSCSTb			; NTSC safe title (1,2,4,8,16,
0001C   8900 042E             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCSTb<<24)++((_sRsrc_Vid_DAFB_NTSCSTb-*)**$00FFFFFF)
00020
00020                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCFFa,_sRsrc_Vid_DAFB_NTSCFFa			; NTSC full frame (1,2,4,8,16)
00020   8A00 0492             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCFFa<<24)++((_sRsrc_Vid_DAFB_NTSCFFa-*)**$00FFFFFF)
00024                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCFFb,_sRsrc_Vid_DAFB_NTSCFFb			; NTSC full frame (1,2,4,8,16,
00024   8B00 04C2             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCFFb<<24)++((_sRsrc_Vid_DAFB_NTSCFFb-*)**$00FFFFFF)
00028
00028                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCconvST,_sRsrc_Vid_DAFB_NTSCconvST	; NTSC safe title, convolv
00028   8C00 045A             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCconvST<<24)++((_sRsrc_Vid_DAFB_NTSCconvST-*)**$00FFFFFF)
0002C                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCconvFF,_sRsrc_Vid_DAFB_NTSCconvFF	; NTSC full frame, convolv
0002C   8E00 04F2             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCconvFF<<24)++((_sRsrc_Vid_DAFB_NTSCconvFF-*)**$00FFFFFF)
00030
00030                          					OSLstEntry	sRsrc_Vid_DAFB_RGBFPa,_sRsrc_Vid_DAFB_RGBFPa			; RGB Portrait (1,2,4,8).
00030   9000 051E             1	  				DC.L		(sRsrc_Vid_DAFB_RGBFPa<<24)++((_sRsrc_Vid_DAFB_RGBFPa-*)**$00FFFFFF)
00034                          					OSLstEntry	sRsrc_Vid_DAFB_RGBFPb,_sRsrc_Vid_DAFB_RGBFPb			; RGB Portrait (1,2,4,8,16).
00034   9100 054E             1	  				DC.L		(sRsrc_Vid_DAFB_RGBFPb<<24)++((_sRsrc_Vid_DAFB_RGBFPb-*)**$00FFFFFF)
00038
00038                          					OSLstEntry	sRsrc_Vid_DAFB_HRa,_sRsrc_Vid_DAFB_HRa					; High-Res (1,2,4,8,16).
00038   9200 0582             1	  				DC.L		(sRsrc_Vid_DAFB_HRa<<24)++((_sRsrc_Vid_DAFB_HRa-*)**$00FFFFFF)
0003C                          					OSLstEntry	sRsrc_Vid_DAFB_HRb,_sRsrc_Vid_DAFB_HRb					; High-Res (1,2,4,8,16,32).
0003C   9300 05B6             1	  				DC.L		(sRsrc_Vid_DAFB_HRb<<24)++((_sRsrc_Vid_DAFB_HRb-*)**$00FFFFFF)
00040
00040                          					OSLstEntry	sRsrc_Vid_DAFB_VGAa,_sRsrc_Vid_DAFB_VGAa				; VGA (1,2,4,8,16).
00040   9400 05EE             1	  				DC.L		(sRsrc_Vid_DAFB_VGAa<<24)++((_sRsrc_Vid_DAFB_VGAa-*)**$00FFFFFF)
00044                          					OSLstEntry	sRsrc_Vid_DAFB_VGAb,_sRsrc_Vid_DAFB_VGAb				; VGA (1,2,4,8,16,32).
00044   9500 0622             1	  				DC.L		(sRsrc_Vid_DAFB_VGAb<<24)++((_sRsrc_Vid_DAFB_VGAb-*)**$00FFFFFF)
00048
00048                          					OSLstEntry	sRsrc_Vid_DAFB_SVGAa,_sRsrc_Vid_DAFB_SVGAa				; SuperVGA (1,2,4,8,16).
00048   9600 065A             1	  				DC.L		(sRsrc_Vid_DAFB_SVGAa<<24)++((_sRsrc_Vid_DAFB_SVGAa-*)**$00FFFFFF)
0004C                          					OSLstEntry	sRsrc_Vid_DAFB_SVGAb,_sRsrc_Vid_DAFB_SVGAb				; SuperVGA (1,2,4,8,16,32).
0004C   9700 068E             1	  				DC.L		(sRsrc_Vid_DAFB_SVGAb<<24)++((_sRsrc_Vid_DAFB_SVGAb-*)**$00FFFFFF)
00050
00050                          					OSLstEntry	sRsrc_Vid_DAFB_GFa,_sRsrc_Vid_DAFB_GFa					; Goldfish (1,2,4,8,16).
00050   9800 06C6             1	  				DC.L		(sRsrc_Vid_DAFB_GFa<<24)++((_sRsrc_Vid_DAFB_GFa-*)**$00FFFFFF)
00054                          					OSLstEntry	sRsrc_Vid_DAFB_GFb,_sRsrc_Vid_DAFB_GFb					; Goldfish (1,2,4,8,16,32).
00054   9900 06FA             1	  				DC.L		(sRsrc_Vid_DAFB_GFb<<24)++((_sRsrc_Vid_DAFB_GFb-*)**$00FFFFFF)
00058
00058                          					OSLstEntry	sRsrc_Vid_DAFB_PALSTa,_sRsrc_Vid_DAFB_PALSTa			; PAL safe title (1,2,4,8,16).
00058   9A00 0732             1	  				DC.L		(sRsrc_Vid_DAFB_PALSTa<<24)++((_sRsrc_Vid_DAFB_PALSTa-*)**$00FFFFFF)
0005C                          					OSLstEntry	sRsrc_Vid_DAFB_PALSTb,_sRsrc_Vid_DAFB_PALSTb			; PAL safe title (1,2,4,8,16,32)
0005C   9B00 0762             1	  				DC.L		(sRsrc_Vid_DAFB_PALSTb<<24)++((_sRsrc_Vid_DAFB_PALSTb-*)**$00FFFFFF)
00060
00060                          					OSLstEntry	sRsrc_Vid_DAFB_PALFFa,_sRsrc_Vid_DAFB_PALFFa			; PAL full frame (1,2,4,8,16).
00060   9C00 07C6             1	  				DC.L		(sRsrc_Vid_DAFB_PALFFa<<24)++((_sRsrc_Vid_DAFB_PALFFa-*)**$00FFFFFF)
00064                          					OSLstEntry	sRsrc_Vid_DAFB_PALFFb,_sRsrc_Vid_DAFB_PALFFb			; PAL full frame (1,2,4,8,16,32)
00064   9D00 07F6             1	  				DC.L		(sRsrc_Vid_DAFB_PALFFb<<24)++((_sRsrc_Vid_DAFB_PALFFb-*)**$00FFFFFF)
00068
00068                          					OSLstEntry	sRsrc_Vid_DAFB_PALconvST,_sRsrc_Vid_DAFB_PALconvST		; PAL safe title, convolved
00068   9E00 078E             1	  				DC.L		(sRsrc_Vid_DAFB_PALconvST<<24)++((_sRsrc_Vid_DAFB_PALconvST-*)**$00FFFFFF)
0006C                          					OSLstEntry	sRsrc_Vid_DAFB_PALconvFF,_sRsrc_Vid_DAFB_PALconvFF		; PAL full frame, convolved
0006C   A000 0826             1	  				DC.L		(sRsrc_Vid_DAFB_PALconvFF<<24)++((_sRsrc_Vid_DAFB_PALconvFF-*)**$00FFFFFF)
00070
00070                          					OSLstEntry	sRsrc_Vid_DAFB_19a,_sRsrc_Vid_DAFB_19a					; 19Ó (1,2,4,8).
00070   A200 0852             1	  				DC.L		(sRsrc_Vid_DAFB_19a<<24)++((_sRsrc_Vid_DAFB_19a-*)**$00FFFFFF)
00074                          					OSLstEntry	sRsrc_Vid_DAFB_19b,_sRsrc_Vid_DAFB_19b					; 19Ó (1,2,4,8,16).
00074   A300 0882             1	  				DC.L		(sRsrc_Vid_DAFB_19b<<24)++((_sRsrc_Vid_DAFB_19b-*)**$00FFFFFF)
00078
00078                          					DatLstEntry	EndOfList,0
00078   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0007C
0007C                          	;-------------------------------------------------------------
0007C                          	;				Board Type
0007C                          	;-------------------------------------------------------------
0007C                          	;
0007C
0007C                          					String	C
0007C
0007C                          	_sRsrc_Board	OSLstEntry	sRsrcType,_BoardType
0007C   0100 0024             1	  				DC.L		(sRsrcType<<24)++((_BoardType-*)**$00FFFFFF)
00080                          					OSLstEntry	sRsrcName,_BoardName
00080   0200 0028             1	  				DC.L		(sRsrcName<<24)++((_BoardName-*)**$00FFFFFF)
00084                          	;jwh				OSLstEntry	sRsrcIcon,_VidICON
00084                          					OSLstEntry	sRsrcIcl8,boardicon		;jwh
00084   1000 0956             1	  				DC.L		(sRsrcIcl8<<24)++((boardicon-*)**$00FFFFFF)
00088                          	;jwh				DatLstEntry	boardId,dafbBoardID
00088                          					DatLstEntry	boardId,RasterOps24MxQBoardID		;jwh
00088   2000 0037             1	  				DC.L		(boardId<<24)+RasterOps24MxQBoardID
0008C                          					OSLstEntry	PrimaryInit,_sPInitRec
0008C   2200 4238             1	  				DC.L		(PrimaryInit<<24)++((_sPInitRec-*)**$00FFFFFF)
00090                          					OSLstEntry	VendorInfo,_VendorInfo
00090   2400 0238             1	  				DC.L		(VendorInfo<<24)++((_VendorInfo-*)**$00FFFFFF)
00094                          					OSLstEntry	sRsrcVidNames,_sVidNameDir
00094   4100 0024             1	  				DC.L		(sRsrcVidNames<<24)++((_sVidNameDir-*)**$00FFFFFF)
00098                          					OSLstEntry	sVidParmDir,_sVidParmDir
00098   7E00 1464             1	  				DC.L		(sVidParmDir<<24)++((_sVidParmDir-*)**$00FFFFFF)
0009C                          					DatLstEntry	EndOfList,0
0009C   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
000A0
000A0   0001                   	_BoardType		Dc.w	CatBoard
000A2   0000                   					Dc.w	TypBoard
000A4   0000                   					Dc.w	0
000A6   0000                   					Dc.w	0
000A8
000A8   5261737465724F         	_BoardName		Dc.l	'RasterOps 24MxQ'	;jwh
000B8
000B8   0000 00B8              					Align 	2
000B8
000B8                          	;-------------------------------------------------------------
000B8                          	;				Video Name Directory
000B8                          	;-------------------------------------------------------------
000B8                          	;
000B8
000B8                          					String	C
000B8
000B8                          	_sVidNameDir
000B8                          					OSLstEntry	sRsrc_Vid_DAFB_RGB2Pa,_sName_RGB2P
000B8   8000 0120             1	  				DC.L		(sRsrc_Vid_DAFB_RGB2Pa<<24)++((_sName_RGB2P-*)**$00FFFFFF)
000BC                          					OSLstEntry	sRsrc_Vid_DAFB_RGB2Pb,_sName_RGB2P
000BC   8100 011C             1	  				DC.L		(sRsrc_Vid_DAFB_RGB2Pb<<24)++((_sName_RGB2P-*)**$00FFFFFF)
000C0
000C0                          					OSLstEntry	sRsrc_Vid_DAFB_FP,_sName_FP
000C0   8200 0070             1	  				DC.L		(sRsrc_Vid_DAFB_FP<<24)++((_sName_FP-*)**$00FFFFFF)
000C4                          					OSLstEntry	sRsrc_Vid_DAFB_GS,_sName_GS
000C4   8400 007C             1	  				DC.L		(sRsrc_Vid_DAFB_GS<<24)++((_sName_GS-*)**$00FFFFFF)
000C8                          					OSLstEntry	sRsrc_Vid_DAFB_2P,_sName_2P
000C8   8600 0088             1	  				DC.L		(sRsrc_Vid_DAFB_2P<<24)++((_sName_2P-*)**$00FFFFFF)
000CC
000CC                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCSTa,_sName_NTSCST
000CC   8800 0124             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCSTa<<24)++((_sName_NTSCST-*)**$00FFFFFF)
000D0                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCSTb,_sName_NTSCST
000D0   8900 0120             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCSTb<<24)++((_sName_NTSCST-*)**$00FFFFFF)
000D4                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCFFa,_sName_NTSCFF
000D4   8A00 0130             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCFFa<<24)++((_sName_NTSCFF-*)**$00FFFFFF)
000D8                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCFFb,_sName_NTSCFF
000D8   8B00 012C             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCFFb<<24)++((_sName_NTSCFF-*)**$00FFFFFF)
000DC                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCconvST,_sName_NTSCconvST
000DC   8C00 0160             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCconvST<<24)++((_sName_NTSCconvST-*)**$00FFFFFF)
000E0                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCconvFF,_sName_NTSCconvFF
000E0   8E00 017A             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCconvFF<<24)++((_sName_NTSCconvFF-*)**$00FFFFFF)
000E4
000E4                          					OSLstEntry	sRsrc_Vid_DAFB_RGBFPa,_sName_RGBFP
000E4   9000 00DE             1	  				DC.L		(sRsrc_Vid_DAFB_RGBFPa<<24)++((_sName_RGBFP-*)**$00FFFFFF)
000E8                          					OSLstEntry	sRsrc_Vid_DAFB_RGBFPb,_sName_RGBFP
000E8   9100 00DA             1	  				DC.L		(sRsrc_Vid_DAFB_RGBFPb<<24)++((_sName_RGBFP-*)**$00FFFFFF)
000EC
000EC                          					OSLstEntry	sRsrc_Vid_DAFB_HRa,_sName_HR
000EC   9200 0086             1	  				DC.L		(sRsrc_Vid_DAFB_HRa<<24)++((_sName_HR-*)**$00FFFFFF)
000F0                          					OSLstEntry	sRsrc_Vid_DAFB_HRb,_sName_HR
000F0   9300 0082             1	  				DC.L		(sRsrc_Vid_DAFB_HRb<<24)++((_sName_HR-*)**$00FFFFFF)
000F4
000F4                          					OSLstEntry	sRsrc_Vid_DAFB_VGAa,_sName_VGA
000F4   9400 00A4             1	  				DC.L		(sRsrc_Vid_DAFB_VGAa<<24)++((_sName_VGA-*)**$00FFFFFF)
000F8                          					OSLstEntry	sRsrc_Vid_DAFB_VGAb,_sName_VGA
000F8   9500 00A0             1	  				DC.L		(sRsrc_Vid_DAFB_VGAb<<24)++((_sName_VGA-*)**$00FFFFFF)
000FC                          					OSLstEntry	sRsrc_Vid_DAFB_SVGAa,_sName_SVGA
000FC   9600 00AE             1	  				DC.L		(sRsrc_Vid_DAFB_SVGAa<<24)++((_sName_SVGA-*)**$00FFFFFF)
00100                          					OSLstEntry	sRsrc_Vid_DAFB_SVGAb,_sName_SVGA
00100   9700 00AA             1	  				DC.L		(sRsrc_Vid_DAFB_SVGAb<<24)++((_sName_SVGA-*)**$00FFFFFF)
00104
00104                          					OSLstEntry	sRsrc_Vid_DAFB_GFa,_sName_GF
00104   9800 005E             1	  				DC.L		(sRsrc_Vid_DAFB_GFa<<24)++((_sName_GF-*)**$00FFFFFF)
00108                          					OSLstEntry	sRsrc_Vid_DAFB_GFb,_sName_GF
00108   9900 005A             1	  				DC.L		(sRsrc_Vid_DAFB_GFb<<24)++((_sName_GF-*)**$00FFFFFF)
0010C
0010C                          					OSLstEntry	sRsrc_Vid_DAFB_PALSTa,_sName_PALST
0010C   9A00 010C             1	  				DC.L		(sRsrc_Vid_DAFB_PALSTa<<24)++((_sName_PALST-*)**$00FFFFFF)
00110                          					OSLstEntry	sRsrc_Vid_DAFB_PALSTb,_sName_PALST
00110   9B00 0108             1	  				DC.L		(sRsrc_Vid_DAFB_PALSTb<<24)++((_sName_PALST-*)**$00FFFFFF)
00114                          					OSLstEntry	sRsrc_Vid_DAFB_PALFFa,_sName_PALFF
00114   9C00 0116             1	  				DC.L		(sRsrc_Vid_DAFB_PALFFa<<24)++((_sName_PALFF-*)**$00FFFFFF)
00118                          					OSLstEntry	sRsrc_Vid_DAFB_PALFFb,_sName_PALFF
00118   9D00 0112             1	  				DC.L		(sRsrc_Vid_DAFB_PALFFb<<24)++((_sName_PALFF-*)**$00FFFFFF)
0011C                          					OSLstEntry	sRsrc_Vid_DAFB_PALconvST,_sName_PALconvST
0011C   9E00 015C             1	  				DC.L		(sRsrc_Vid_DAFB_PALconvST<<24)++((_sName_PALconvST-*)**$00FFFFFF)
00120                          					OSLstEntry	sRsrc_Vid_DAFB_PALconvFF,_sName_PALconvFF
00120   A000 0174             1	  				DC.L		(sRsrc_Vid_DAFB_PALconvFF<<24)++((_sName_PALconvFF-*)**$00FFFFFF)
00124
00124                          					OSLstEntry	sRsrc_Vid_DAFB_19a,_sName_19
00124   A200 018C             1	  				DC.L		(sRsrc_Vid_DAFB_19a<<24)++((_sName_19-*)**$00FFFFFF)
00128                          					OSLstEntry	sRsrc_Vid_DAFB_19b,_sName_19
00128   A300 0188             1	  				DC.L		(sRsrc_Vid_DAFB_19b<<24)++((_sName_19-*)**$00FFFFFF)
0012C
0012C                          					DatLstEntry	EndOfList,0
0012C   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00130
00130                          	_sName_FP
00130   0000 0010              					DC.L	EndName_FP-_sName_FP
00134   0080                   					DC.W	128									; localization resID
00136                          	;jwh				DC.B	'Macintosh Portrait Display'		;
00136   36343020582038         					DC.B	'640 X 870'		;
00140   0000 0140              					ALIGN	2
00140                          	EndName_FP
00140
00140                          	_sName_GS
00140   0000 0010              					DC.L	EndName_GS-_sName_GS
00144   0081                   					DC.W	129									; localization resID
00146                          	;jwh				DC.B	'Macintosh RGB Display'				;
00146   35313220582033         					DC.B	'512 X 384'				;
00150   0000 0150              					ALIGN	2
00150                          	EndName_GS
00150
00150                          	_sName_2P
00150   0000 0012              					DC.L	EndName_2P-_sName_2P
00154   0082                   					DC.W	130									; localization resID
00156                          	;jwh				DC.B	'Macintosh Two-Page Display'		;
00156   31313532205820         					DC.B	'1152 X 870'		;
00161   0000 0162              					ALIGN	2
00162                          	EndName_2P
00162
00162                          	_sName_GF
00162   0000 0010              					DC.L	EndName_GF-_sName_GF
00166   0083                   					DC.W	131									; localization resID
00168                          	;jwh				DC.B	'Macintosh 16Ó Color Display'		;
00168   38333220582036         					DC.B	'832 X 624'		;
00172   0000 0172              					ALIGN	2
00172                          	EndName_GF
00172
00172                          	_sName_HR
00172   0000 0026              					DC.L	EndName_HR-_sName_HR
00176   0085                   					DC.W	133									; localization resID
00178                          	;jwh				DC.B	'Macintosh Hi-Res Display'			;
00178   36343020582034         					DC.B	'640 X 480 (67Hz Non-interlaced)'			;
00198   0000 0198              					ALIGN	2
00198                          	EndName_HR
00198
00198                          	_sName_VGA
00198   0000 0012              					DC.L	EndName_VGA-_sName_VGA
0019C   0086                   					DC.W	134									; localization resID
0019E   36343078343830         					DC.B	'640x480 VGA'						;
001AA   0000 01AA              					ALIGN	2
001AA                          	EndName_VGA
001AA
001AA                          	_sName_SVGA
001AA   0000 0018              					DC.L	EndName_SVGA-_sName_SVGA
001AE   0087                   					DC.W	135									; localization resID
001B0   38303078363030         					DC.B	'800x600 SuperVGA'					;
001C1   0000 01C2              					ALIGN	2
001C2                          	EndName_SVGA
001C2
001C2                          	_sName_RGBFP
001C2   0000 0016              					DC.L	EndName_RGBFP-_sName_RGBFP
001C6   0088                   					DC.W	136									; localization resID
001C8                          	;jwh				DC.B	'RGB Portrait Display'				;
001C8   36343020582038         					DC.B	'640 X 870 Color'				;
001D8   0000 01D8              					ALIGN	2
001D8                          	EndName_RGBFP
001D8
001D8                          	_sName_RGB2P
001D8   0000 0018              					DC.L	EndName_RGB2P-_sName_RGB2P
001DC   0089                   					DC.W	137									; localization resID
001DE                          	;jwh				DC.B	'Macintosh 21Ó Color Display'		;
001DE   31313532205820         					DC.B	'1152 X 870 Color'		;
001EF   0000 01F0              					ALIGN	2
001F0                          	EndName_RGB2P
001F0
001F0                          	_sName_NTSCST
001F0   0000 0014              					DC.L	EndName_NTSCST-_sName_NTSCST
001F4   008A                   					DC.W	138									; localization resID
001F6   35313278333834         					DC.B	'512x384 NTSC'						;
00203   0000 0204              					ALIGN	2
00204                          	EndName_NTSCST
00204
00204                          	_sName_NTSCFF
00204   0000 0014              					DC.L	EndName_NTSCFF-_sName_NTSCFF
00208   008B                   					DC.W	139									; localization resID
0020A   36343078343830         					DC.B	'640x480 NTSC'						;
00217   0000 0218              					ALIGN	2
00218                          	EndName_NTSCFF
00218
00218                          	_sName_PALST
00218   0000 0012              					DC.L	EndName_PALST-_sName_PALST
0021C   008C                   					DC.W	140									; localization resID
0021E   36343078343830         					DC.B	'640x480 PAL'						;
0022A   0000 022A              					ALIGN	2
0022A                          	EndName_PALST
0022A
0022A                          	_sName_PALFF
0022A   0000 0012              					DC.L	EndName_PALFF-_sName_PALFF
0022E   008D                   					DC.W	141									; localization resID
00230   37363878353736         					DC.B	'768x576 PAL'						;
0023C   0000 023C              					ALIGN	2
0023C                          	EndName_PALFF
0023C
0023C                          	_sName_NTSCconvST
0023C   0000 001E              					DC.L	EndName_NTSCconvST-_sName_NTSCconvST
00240   008E                   					DC.W	142									; localization resID
00242   35313278333834         					DC.B	'512x384 NTSC Convolved'			;
00259   0000 025A              					ALIGN	2
0025A                          	EndName_NTSCconvST
0025A
0025A                          	_sName_NTSCconvFF
0025A   0000 001E              					DC.L	EndName_NTSCconvFF-_sName_NTSCconvFF
0025E   008F                   					DC.W	143									; localization resID
00260   36343078343830         					DC.B	'640x480 NTSC Convolved'			;
00277   0000 0278              					ALIGN	2
00278                          	EndName_NTSCconvFF
00278
00278                          	_sName_PALconvST
00278   0000 001C              					DC.L	EndName_PALconvST-_sName_PALconvST
0027C   0090                   					DC.W	144									; localization resID
0027E   36343078343830         					DC.B	'640x480 PAL Convolved'				;
00294   0000 0294              					ALIGN	2
00294                          	EndName_PALconvST
00294
00294                          	_sName_PALconvFF
00294   0000 001C              					DC.L	EndName_PALconvFF-_sName_PALconvFF
00298   0091                   					DC.W	145									; localization resID
0029A   37363878353736         					DC.B	'768x576 PAL Convolved'				;
002B0   0000 02B0              					ALIGN	2
002B0                          	EndName_PALconvFF
002B0
002B0                          	_sName_19
002B0   0000 0018              					Dc.l	EndName_19-_sName_19
002B4   0092                   					Dc.w	146									; localization resID
002B6                          	;jwh				Dc.b	'19Ó RGB Display'
002B6   31303234205820         					Dc.b	'1024 X 768 (75Hz)'
002C8   0000 02C8              					Align	2
002C8                          	EndName_19
002C8
002C8                          	;-------------------------------------------------------------
002C8                          	;				Vendor Info
002C8                          	;-------------------------------------------------------------
002C8                          	;
002C8
002C8                          					String	C
002C8
002C8                          	_VendorInfo		OSLstEntry	VendorId,_VendorId
002C8   0100 0014             1	  				DC.L		(VendorId<<24)++((_VendorId-*)**$00FFFFFF)
002CC                          					OSLstEntry	RevLevel,_RevLevel
002CC   0300 0020             1	  				DC.L		(RevLevel<<24)++((_RevLevel-*)**$00FFFFFF)
002D0                          					OSLstEntry	PartNum,_PartNum
002D0   0400 0024             1	  				DC.L		(PartNum<<24)++((_PartNum-*)**$00FFFFFF)
002D4                          					OSLstEntry	Date,_Date
002D4   0500 0028             1	  				DC.L		(Date<<24)++((_Date-*)**$00FFFFFF)
002D8                          					DatLstEntry	EndOfList,0
002D8   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
002DC
002DC   5261737465724F         	_VendorId		Dc.l	'RasterOps, Inc.'
002EC   312E3031000000         	_RevLevel		Dc.l	'1.01'
002F4   32344D78510000         	_PartNum		Dc.l	'24MxQ'
002FC                          	_Date			DateStr
002FC   32372D4665622D        1								Dc.b	'27-Feb-92'
00306
00306   0000 0306              					Align	2
00306
00306                          	;-------------------------------------------------------------
00306                          	;				Functional sResources
00306                          	;-------------------------------------------------------------
00306
00306                          	_sRsrc_Vid_DAFB_RGB2Pa
00306                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00306   0100 0628             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0030A                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0030A   0200 062C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0030E                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0030E   0400 0ACC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00312                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00312   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00316                          					DatLstEntry	sRsrcHWDevID,1
00316   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0031A
0031A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0031A   0A00 0AC8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0031E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_2Pa
0031E   0B00 0AC8             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_2Pa-*)**$00FFFFFF)
00322
00322                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_RGB2P
00322   4000 0B30             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_RGB2P-*)**$00FFFFFF)
00326
00326                          					OSLstEntry	FirstVidMode,_OBM_DAFB_2P
00326   8000 2C1C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_2P-*)**$00FFFFFF)
0032A                          					OSLstEntry	SecondVidMode,_TBM_DAFB_2P
0032A   8100 2FCA             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_2P-*)**$00FFFFFF)
0032E                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_2P
0032E   8200 3378             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_2P-*)**$00FFFFFF)
00332                          					OSLstEntry	FourthVidMode,_EBM_DAFB_2P
00332   8300 3726             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_2P-*)**$00FFFFFF)
00336
00336                          					DatLstEntry	EndOfList,0
00336   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0033A
0033A                          	;----------------------------------
0033A
0033A                          	_sRsrc_Vid_DAFB_RGB2Pb
0033A                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0033A   0100 05F4             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0033E                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0033E   0200 05F8             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00342                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00342   0400 0A98             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00346                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00346   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0034A                          					DatLstEntry	sRsrcHWDevID,1
0034A   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0034E
0034E                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0034E   0A00 0A94             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00352                          					OSLstEntry	MinorLength,_MinorLength_DAFB_2Pb
00352   0B00 0A98             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_2Pb-*)**$00FFFFFF)
00356
00356                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_RGB2P
00356   4000 0AFC             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_RGB2P-*)**$00FFFFFF)
0035A
0035A                          					OSLstEntry	FirstVidMode,_OBM_DAFB_2P
0035A   8000 2BE8             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_2P-*)**$00FFFFFF)
0035E                          					OSLstEntry	SecondVidMode,_TBM_DAFB_2P
0035E   8100 2F96             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_2P-*)**$00FFFFFF)
00362                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_2P
00362   8200 3344             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_2P-*)**$00FFFFFF)
00366                          					OSLstEntry	FourthVidMode,_EBM_DAFB_2P
00366   8300 36F2             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_2P-*)**$00FFFFFF)
0036A                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_2P
0036A   8400 3AA0             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_2P-*)**$00FFFFFF)
0036E
0036E                          					DatLstEntry	EndOfList,0
0036E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00372
00372                          	;----------------------------------
00372
00372                          	_sRsrc_Vid_DAFB_FP
00372                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00372   0100 05BC             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00376                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00376   0200 05C0             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0037A                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0037A   0400 0A60             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0037E                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0037E   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00382                          					DatLstEntry	sRsrcHWDevID,1
00382   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00386
00386                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00386   0A00 0A5C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0038A                          					OSLstEntry	MinorLength,_MinorLength_DAFB_FPa
0038A   0B00 0A64             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_FPa-*)**$00FFFFFF)
0038E
0038E                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_FP
0038E   4000 0AD0             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_FP-*)**$00FFFFFF)
00392
00392                          					OSLstEntry	FirstVidMode,_OBM_DAFB_FP
00392   8000 2BC0             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_FP-*)**$00FFFFFF)
00396                          					OSLstEntry	SecondVidMode,_TBM_DAFB_FP
00396   8100 2F6E             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_FP-*)**$00FFFFFF)
0039A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_FP
0039A   8200 331C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_FP-*)**$00FFFFFF)
0039E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_FP
0039E   8300 36CA             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_FP-*)**$00FFFFFF)
003A2
003A2                          					DatLstEntry	EndOfList,0
003A2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
003A6
003A6                          	;----------------------------------
003A6
003A6                          	_sRsrc_Vid_DAFB_GS
003A6                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
003A6   0100 0588             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
003AA                          					OSLstEntry	sRsrcName,_VideoNameDAFB
003AA   0200 058C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
003AE                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
003AE   0400 0A2C             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
003B2                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
003B2   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
003B6                          					DatLstEntry	sRsrcHWDevID,1
003B6   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
003BA
003BA                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
003BA   0A00 0A28             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
003BE                          					OSLstEntry	MinorLength,_MinorLength_DAFB_GS
003BE   0B00 0A38             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_GS-*)**$00FFFFFF)
003C2
003C2                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_GS
003C2   4000 0AAC             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_GS-*)**$00FFFFFF)
003C6
003C6                          					OSLstEntry	FirstVidMode,_OBM_DAFB_GS
003C6   8000 2B9C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_GS-*)**$00FFFFFF)
003CA                          					OSLstEntry	SecondVidMode,_TBM_DAFB_GS
003CA   8100 2F4A             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_GS-*)**$00FFFFFF)
003CE                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_GS
003CE   8200 32F8             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_GS-*)**$00FFFFFF)
003D2                          					OSLstEntry	FourthVidMode,_EBM_DAFB_GS
003D2   8300 36A6             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_GS-*)**$00FFFFFF)
003D6                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_GS
003D6   8400 3A54             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_GS-*)**$00FFFFFF)
003DA                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_GS
003DA   8500 3CEA             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_GS-*)**$00FFFFFF)
003DE
003DE                          					DatLstEntry	EndOfList,0
003DE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
003E2
003E2                          	;----------------------------------
003E2
003E2                          	_sRsrc_Vid_DAFB_2P
003E2                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
003E2   0100 054C             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
003E6                          					OSLstEntry	sRsrcName,_VideoNameDAFB
003E6   0200 0550             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
003EA                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
003EA   0400 09F0             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
003EE                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
003EE   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
003F2                          					DatLstEntry	sRsrcHWDevID,1
003F2   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
003F6
003F6                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
003F6   0A00 09EC             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
003FA                          					OSLstEntry	MinorLength,_MinorLength_DAFB_2Pa
003FA   0B00 09EC             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_2Pa-*)**$00FFFFFF)
003FE
003FE                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_2P
003FE   4000 0A60             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_2P-*)**$00FFFFFF)
00402
00402                          					OSLstEntry	FirstVidMode,_OBM_DAFB_2P
00402   8000 2B40             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_2P-*)**$00FFFFFF)
00406                          					OSLstEntry	SecondVidMode,_TBM_DAFB_2P
00406   8100 2EEE             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_2P-*)**$00FFFFFF)
0040A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_2P
0040A   8200 329C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_2P-*)**$00FFFFFF)
0040E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_2P
0040E   8300 364A             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_2P-*)**$00FFFFFF)
00412
00412                          					DatLstEntry	EndOfList,0
00412   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00416
00416                          	;----------------------------------
00416
00416                          	_sRsrc_Vid_DAFB_NTSCSTa
00416                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00416   0100 0518             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0041A                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0041A   0200 051C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0041E                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0041E   0400 09BC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00422                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00422   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00426                          					DatLstEntry	sRsrcHWDevID,1
00426   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0042A
0042A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0042A   0A00 09B8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0042E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_NTSCSTa
0042E   0B00 09CC             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_NTSCSTa-*)**$00FFFFFF)
00432
00432                          					OSLstEntry	FirstVidMode,_OBM_DAFB_NTSCST
00432   8000 2B40             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_NTSCST-*)**$00FFFFFF)
00436                          					OSLstEntry	SecondVidMode,_TBM_DAFB_NTSCST
00436   8100 2EEE             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_NTSCST-*)**$00FFFFFF)
0043A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_NTSCST
0043A   8200 329C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_NTSCST-*)**$00FFFFFF)
0043E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_NTSCST
0043E   8300 364A             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_NTSCST-*)**$00FFFFFF)
00442                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_NTSCST
00442   8400 39F8             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_NTSCST-*)**$00FFFFFF)
00446
00446                          					DatLstEntry	EndOfList,0
00446   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0044A
0044A                          	;----------------------------------
0044A
0044A                          	_sRsrc_Vid_DAFB_NTSCSTb
0044A                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0044A   0100 04E4             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0044E                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0044E   0200 04E8             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00452                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00452   0400 0988             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00456                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00456   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0045A                          					DatLstEntry	sRsrcHWDevID,1
0045A   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0045E
0045E                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0045E   0A00 0984             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00462                          					OSLstEntry	MinorLength,_MinorLength_DAFB_NTSCSTb
00462   0B00 099C             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_NTSCSTb-*)**$00FFFFFF)
00466
00466                          					OSLstEntry	FirstVidMode,_OBM_DAFB_NTSCST
00466   8000 2B0C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_NTSCST-*)**$00FFFFFF)
0046A                          					OSLstEntry	SecondVidMode,_TBM_DAFB_NTSCST
0046A   8100 2EBA             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_NTSCST-*)**$00FFFFFF)
0046E                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_NTSCST
0046E   8200 3268             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_NTSCST-*)**$00FFFFFF)
00472                          					OSLstEntry	FourthVidMode,_EBM_DAFB_NTSCST
00472   8300 3616             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_NTSCST-*)**$00FFFFFF)
00476                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_NTSCST
00476   8400 39C4             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_NTSCST-*)**$00FFFFFF)
0047A                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_NTSCST
0047A   8500 3C5A             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_NTSCST-*)**$00FFFFFF)
0047E
0047E                          					DatLstEntry	EndOfList,0
0047E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00482
00482                          	;----------------------------------
00482
00482                          	_sRsrc_Vid_DAFB_NTSCconvST
00482                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00482   0100 04AC             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00486                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00486   0200 04B0             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0048A                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0048A   0400 0950             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0048E                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0048E   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00492                          					DatLstEntry	sRsrcHWDevID,1
00492   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00496
00496                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00496   0A00 094C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0049A                          					OSLstEntry	MinorLength,_MinorLength_DAFB_NTSCconvST
0049A   0B00 0970             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_NTSCconvST-*)**$00FFFFFF)
0049E
0049E                          					OSLstEntry	FirstVidMode,_OBM_DAFB_NTSCSTconv
0049E   8000 2AF4             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_NTSCSTconv-*)**$00FFFFFF)
004A2                          					OSLstEntry	SecondVidMode,_TBM_DAFB_NTSCSTconv
004A2   8100 2EA2             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_NTSCSTconv-*)**$00FFFFFF)
004A6                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_NTSCSTconv
004A6   8200 3250             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_NTSCSTconv-*)**$00FFFFFF)
004AA                          					OSLstEntry	FourthVidMode,_EBM_DAFB_NTSCSTconv
004AA   8300 35FE             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_NTSCSTconv-*)**$00FFFFFF)
004AE
004AE                          					DatLstEntry	EndOfList,0
004AE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
004B2
004B2                          	;----------------------------------
004B2
004B2                          	_sRsrc_Vid_DAFB_NTSCFFa
004B2                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
004B2   0100 047C             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
004B6                          					OSLstEntry	sRsrcName,_VideoNameDAFB
004B6   0200 0480             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
004BA                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
004BA   0400 0920             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
004BE                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
004BE   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
004C2                          					DatLstEntry	sRsrcHWDevID,1
004C2   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
004C6
004C6                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
004C6   0A00 091C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
004CA                          					OSLstEntry	MinorLength,_MinorLength_DAFB_NTSCFFa
004CA   0B00 0938             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_NTSCFFa-*)**$00FFFFFF)
004CE
004CE                          					OSLstEntry	FirstVidMode,_OBM_DAFB_NTSCFF
004CE   8000 2AB4             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_NTSCFF-*)**$00FFFFFF)
004D2                          					OSLstEntry	SecondVidMode,_TBM_DAFB_NTSCFF
004D2   8100 2E62             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_NTSCFF-*)**$00FFFFFF)
004D6                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_NTSCFF
004D6   8200 3210             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_NTSCFF-*)**$00FFFFFF)
004DA                          					OSLstEntry	FourthVidMode,_EBM_DAFB_NTSCFF
004DA   8300 35BE             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_NTSCFF-*)**$00FFFFFF)
004DE                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_NTSCFF
004DE   8400 396C             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_NTSCFF-*)**$00FFFFFF)
004E2
004E2                          					DatLstEntry	EndOfList,0
004E2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
004E6
004E6                          	;----------------------------------
004E6
004E6                          	_sRsrc_Vid_DAFB_NTSCFFb
004E6                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
004E6   0100 0448             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
004EA                          					OSLstEntry	sRsrcName,_VideoNameDAFB
004EA   0200 044C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
004EE                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
004EE   0400 08EC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
004F2                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
004F2   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
004F6                          					DatLstEntry	sRsrcHWDevID,1
004F6   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
004FA
004FA                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
004FA   0A00 08E8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
004FE                          					OSLstEntry	MinorLength,_MinorLength_DAFB_NTSCFFb
004FE   0B00 0908             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_NTSCFFb-*)**$00FFFFFF)
00502
00502                          					OSLstEntry	FirstVidMode,_OBM_DAFB_NTSCFF
00502   8000 2A80             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_NTSCFF-*)**$00FFFFFF)
00506                          					OSLstEntry	SecondVidMode,_TBM_DAFB_NTSCFF
00506   8100 2E2E             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_NTSCFF-*)**$00FFFFFF)
0050A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_NTSCFF
0050A   8200 31DC             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_NTSCFF-*)**$00FFFFFF)
0050E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_NTSCFF
0050E   8300 358A             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_NTSCFF-*)**$00FFFFFF)
00512                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_NTSCFF
00512   8400 3938             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_NTSCFF-*)**$00FFFFFF)
00516                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_NTSCFF
00516   8500 3BCE             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_NTSCFF-*)**$00FFFFFF)
0051A
0051A                          					DatLstEntry	EndOfList,0
0051A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0051E
0051E                          	;----------------------------------
0051E
0051E                          	_sRsrc_Vid_DAFB_NTSCconvFF
0051E                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0051E   0100 0410             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00522                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00522   0200 0414             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00526                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00526   0400 08B4             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0052A                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0052A   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0052E                          					DatLstEntry	sRsrcHWDevID,1
0052E   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00532
00532                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00532   0A00 08B0             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00536                          					OSLstEntry	MinorLength,_MinorLength_DAFB_NTSCconvFF
00536   0B00 08D8             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_NTSCconvFF-*)**$00FFFFFF)
0053A
0053A                          					OSLstEntry	FirstVidMode,_OBM_DAFB_NTSCFFconv
0053A   8000 2A68             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_NTSCFFconv-*)**$00FFFFFF)
0053E                          					OSLstEntry	SecondVidMode,_TBM_DAFB_NTSCFFconv
0053E   8100 2E16             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_NTSCFFconv-*)**$00FFFFFF)
00542                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_NTSCFFconv
00542   8200 31C4             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_NTSCFFconv-*)**$00FFFFFF)
00546                          					OSLstEntry	FourthVidMode,_EBM_DAFB_NTSCFFconv
00546   8300 3572             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_NTSCFFconv-*)**$00FFFFFF)
0054A
0054A                          					DatLstEntry	EndOfList,0
0054A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0054E
0054E                          	;----------------------------------
0054E
0054E                          	_sRsrc_Vid_DAFB_RGBFPa
0054E                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0054E   0100 03E0             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00552                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00552   0200 03E4             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00556                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00556   0400 0884             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0055A                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0055A   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0055E                          					DatLstEntry	sRsrcHWDevID,1
0055E   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00562
00562                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00562   0A00 0880             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00566                          					OSLstEntry	MinorLength,_MinorLength_DAFB_FPa
00566   0B00 0888             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_FPa-*)**$00FFFFFF)
0056A
0056A                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_RGBFP
0056A   4000 08E8             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_RGBFP-*)**$00FFFFFF)
0056E
0056E                          					OSLstEntry	FirstVidMode,_OBM_DAFB_FP
0056E   8000 29E4             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_FP-*)**$00FFFFFF)
00572                          					OSLstEntry	SecondVidMode,_TBM_DAFB_FP
00572   8100 2D92             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_FP-*)**$00FFFFFF)
00576                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_FP
00576   8200 3140             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_FP-*)**$00FFFFFF)
0057A                          					OSLstEntry	FourthVidMode,_EBM_DAFB_FP
0057A   8300 34EE             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_FP-*)**$00FFFFFF)
0057E
0057E                          					DatLstEntry	EndOfList,0
0057E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00582
00582                          	;----------------------------------
00582
00582                          	_sRsrc_Vid_DAFB_RGBFPb
00582                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00582   0100 03AC             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00586                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00586   0200 03B0             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0058A                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0058A   0400 0850             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0058E                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0058E   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00592                          					DatLstEntry	sRsrcHWDevID,1
00592   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00596
00596                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00596   0A00 084C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0059A                          					OSLstEntry	MinorLength,_MinorLength_DAFB_FPb
0059A   0B00 0858             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_FPb-*)**$00FFFFFF)
0059E
0059E                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_RGBFP
0059E   4000 08B4             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_RGBFP-*)**$00FFFFFF)
005A2
005A2                          					OSLstEntry	FirstVidMode,_OBM_DAFB_FP
005A2   8000 29B0             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_FP-*)**$00FFFFFF)
005A6                          					OSLstEntry	SecondVidMode,_TBM_DAFB_FP
005A6   8100 2D5E             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_FP-*)**$00FFFFFF)
005AA                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_FP
005AA   8200 310C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_FP-*)**$00FFFFFF)
005AE                          					OSLstEntry	FourthVidMode,_EBM_DAFB_FP
005AE   8300 34BA             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_FP-*)**$00FFFFFF)
005B2                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_FP
005B2   8400 3868             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_FP-*)**$00FFFFFF)
005B6
005B6                          					DatLstEntry	EndOfList,0
005B6   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
005BA
005BA                          	;----------------------------------
005BA
005BA                          	_sRsrc_Vid_DAFB_HRa
005BA                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
005BA   0100 0374             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
005BE                          					OSLstEntry	sRsrcName,_VideoNameDAFB
005BE   0200 0378             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
005C2                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
005C2   0400 0818             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
005C6                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
005C6   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
005CA                          					DatLstEntry	sRsrcHWDevID,1
005CA   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
005CE
005CE                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
005CE   0A00 0814             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
005D2                          					OSLstEntry	MinorLength,_MinorLength_DAFB_HRa
005D2   0B00 0840             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_HRa-*)**$00FFFFFF)
005D6
005D6                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_HR
005D6   4000 0890             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_HR-*)**$00FFFFFF)
005DA
005DA                          					OSLstEntry	FirstVidMode,_OBM_DAFB_HR
005DA   8000 29D8             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_HR-*)**$00FFFFFF)
005DE                          					OSLstEntry	SecondVidMode,_TBM_DAFB_HR
005DE   8100 2D86             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_HR-*)**$00FFFFFF)
005E2                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_HR
005E2   8200 3134             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_HR-*)**$00FFFFFF)
005E6                          					OSLstEntry	FourthVidMode,_EBM_DAFB_HR
005E6   8300 34E2             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_HR-*)**$00FFFFFF)
005EA                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_HR
005EA   8400 3870             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_HR-*)**$00FFFFFF)
005EE
005EE                          					DatLstEntry	EndOfList,0
005EE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
005F2
005F2                          	;----------------------------------
005F2
005F2                          	_sRsrc_Vid_DAFB_HRb
005F2                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
005F2   0100 033C             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
005F6                          					OSLstEntry	sRsrcName,_VideoNameDAFB
005F6   0200 0340             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
005FA                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
005FA   0400 07E0             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
005FE                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
005FE   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00602                          					DatLstEntry	sRsrcHWDevID,1
00602   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00606
00606                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00606   0A00 07DC             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0060A                          					OSLstEntry	MinorLength,_MinorLength_DAFB_HRb
0060A   0B00 080C             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_HRb-*)**$00FFFFFF)
0060E
0060E                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_HR
0060E   4000 0858             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_HR-*)**$00FFFFFF)
00612
00612                          					OSLstEntry	FirstVidMode,_OBM_DAFB_HR
00612   8000 29A0             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_HR-*)**$00FFFFFF)
00616                          					OSLstEntry	SecondVidMode,_TBM_DAFB_HR
00616   8100 2D4E             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_HR-*)**$00FFFFFF)
0061A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_HR
0061A   8200 30FC             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_HR-*)**$00FFFFFF)
0061E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_HR
0061E   8300 34AA             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_HR-*)**$00FFFFFF)
00622                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_HR
00622   8400 3838             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_HR-*)**$00FFFFFF)
00626                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_HR
00626   8500 3ACE             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_HR-*)**$00FFFFFF)
0062A
0062A                          					DatLstEntry	EndOfList,0
0062A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0062E
0062E                          	;----------------------------------
0062E
0062E                          	_sRsrc_Vid_DAFB_VGAa
0062E                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0062E   0100 0300             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00632                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00632   0200 0304             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00636                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00636   0400 07A4             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0063A                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0063A   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0063E                          					DatLstEntry	sRsrcHWDevID,1
0063E   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00642
00642                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00642   0A00 07A0             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00646                          					OSLstEntry	MinorLength,_MinorLength_DAFB_VGAa
00646   0B00 07D4             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_VGAa-*)**$00FFFFFF)
0064A
0064A                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_VGA
0064A   4000 081C             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_VGA-*)**$00FFFFFF)
0064E
0064E                          					OSLstEntry	FirstVidMode,_OBM_DAFB_VGA
0064E   8000 2974             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_VGA-*)**$00FFFFFF)
00652                          					OSLstEntry	SecondVidMode,_TBM_DAFB_VGA
00652   8100 2D22             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_VGA-*)**$00FFFFFF)
00656                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_VGA
00656   8200 30D0             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_VGA-*)**$00FFFFFF)
0065A                          					OSLstEntry	FourthVidMode,_EBM_DAFB_VGA
0065A   8300 347E             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_VGA-*)**$00FFFFFF)
0065E                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_VGA
0065E   8400 380C             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_VGA-*)**$00FFFFFF)
00662
00662                          					DatLstEntry	EndOfList,0
00662   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00666
00666                          	;----------------------------------
00666
00666                          	_sRsrc_Vid_DAFB_VGAb
00666                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00666   0100 02C8             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0066A                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0066A   0200 02CC             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0066E                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0066E   0400 076C             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00672                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00672   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00676                          					DatLstEntry	sRsrcHWDevID,1
00676   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0067A
0067A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0067A   0A00 0768             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0067E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_VGAb
0067E   0B00 07A0             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_VGAb-*)**$00FFFFFF)
00682
00682                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_VGA
00682   4000 07E4             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_VGA-*)**$00FFFFFF)
00686
00686                          					OSLstEntry	FirstVidMode,_OBM_DAFB_VGA
00686   8000 293C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_VGA-*)**$00FFFFFF)
0068A                          					OSLstEntry	SecondVidMode,_TBM_DAFB_VGA
0068A   8100 2CEA             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_VGA-*)**$00FFFFFF)
0068E                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_VGA
0068E   8200 3098             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_VGA-*)**$00FFFFFF)
00692                          					OSLstEntry	FourthVidMode,_EBM_DAFB_VGA
00692   8300 3446             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_VGA-*)**$00FFFFFF)
00696                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_VGA
00696   8400 37D4             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_VGA-*)**$00FFFFFF)
0069A                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_VGA
0069A   8500 3A6A             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_VGA-*)**$00FFFFFF)
0069E
0069E                          					DatLstEntry	EndOfList,0
0069E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
006A2
006A2                          	;----------------------------------
006A2
006A2                          	_sRsrc_Vid_DAFB_SVGAa
006A2                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
006A2   0100 028C             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
006A6                          					OSLstEntry	sRsrcName,_VideoNameDAFB
006A6   0200 0290             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
006AA                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
006AA   0400 0730             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
006AE                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
006AE   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
006B2                          					DatLstEntry	sRsrcHWDevID,1
006B2   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
006B6
006B6                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
006B6   0A00 072C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
006BA                          					OSLstEntry	MinorLength,_MinorLength_DAFB_SVGAa
006BA   0B00 0768             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_SVGAa-*)**$00FFFFFF)
006BE
006BE                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_VGA
006BE   4000 07A8             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_VGA-*)**$00FFFFFF)
006C2
006C2                          					OSLstEntry	FirstVidMode,_OBM_DAFB_SVGA
006C2   8000 2910             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_SVGA-*)**$00FFFFFF)
006C6                          					OSLstEntry	SecondVidMode,_TBM_DAFB_SVGA
006C6   8100 2CBE             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_SVGA-*)**$00FFFFFF)
006CA                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_SVGA
006CA   8200 306C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_SVGA-*)**$00FFFFFF)
006CE                          					OSLstEntry	FourthVidMode,_EBM_DAFB_SVGA
006CE   8300 341A             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_SVGA-*)**$00FFFFFF)
006D2                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_SVGA
006D2   8400 37A8             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_SVGA-*)**$00FFFFFF)
006D6
006D6                          					DatLstEntry	EndOfList,0
006D6   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
006DA
006DA                          	;----------------------------------
006DA
006DA                          	_sRsrc_Vid_DAFB_SVGAb
006DA                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
006DA   0100 0254             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
006DE                          					OSLstEntry	sRsrcName,_VideoNameDAFB
006DE   0200 0258             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
006E2                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
006E2   0400 06F8             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
006E6                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
006E6   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
006EA                          					DatLstEntry	sRsrcHWDevID,1
006EA   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
006EE
006EE                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
006EE   0A00 06F4             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
006F2                          					OSLstEntry	MinorLength,_MinorLength_DAFB_SVGAb
006F2   0B00 0734             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_SVGAb-*)**$00FFFFFF)
006F6
006F6                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_VGA
006F6   4000 0770             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_VGA-*)**$00FFFFFF)
006FA
006FA                          					OSLstEntry	FirstVidMode,_OBM_DAFB_SVGA
006FA   8000 28D8             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_SVGA-*)**$00FFFFFF)
006FE                          					OSLstEntry	SecondVidMode,_TBM_DAFB_SVGA
006FE   8100 2C86             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_SVGA-*)**$00FFFFFF)
00702                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_SVGA
00702   8200 3034             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_SVGA-*)**$00FFFFFF)
00706                          					OSLstEntry	FourthVidMode,_EBM_DAFB_SVGA
00706   8300 33E2             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_SVGA-*)**$00FFFFFF)
0070A                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_SVGA
0070A   8400 3770             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_SVGA-*)**$00FFFFFF)
0070E                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_SVGA
0070E   8500 3A06             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_SVGA-*)**$00FFFFFF)
00712
00712                          					DatLstEntry	EndOfList,0
00712   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00716
00716                          	;----------------------------------
00716
00716                          	_sRsrc_Vid_DAFB_GFa
00716                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00716   0100 0218             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0071A                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0071A   0200 021C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0071E                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0071E   0400 06BC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00722                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00722   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00726                          					DatLstEntry	sRsrcHWDevID,1
00726   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0072A
0072A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0072A   0A00 06B8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0072E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_GFa
0072E   0B00 06FC             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_GFa-*)**$00FFFFFF)
00732
00732                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_GF
00732   4000 0720             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_GF-*)**$00FFFFFF)
00736
00736                          					OSLstEntry	FirstVidMode,_OBM_DAFB_GF
00736   8000 28AC             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_GF-*)**$00FFFFFF)
0073A                          					OSLstEntry	SecondVidMode,_TBM_DAFB_GF
0073A   8100 2C5A             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_GF-*)**$00FFFFFF)
0073E                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_GF
0073E   8200 3008             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_GF-*)**$00FFFFFF)
00742                          					OSLstEntry	FourthVidMode,_EBM_DAFB_GF
00742   8300 33B6             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_GF-*)**$00FFFFFF)
00746                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_GF
00746   8400 3744             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_GF-*)**$00FFFFFF)
0074A
0074A                          					DatLstEntry	EndOfList,0
0074A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0074E
0074E                          	;----------------------------------
0074E
0074E                          	_sRsrc_Vid_DAFB_GFb
0074E                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0074E   0100 01E0             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00752                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00752   0200 01E4             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00756                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00756   0400 0684             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0075A                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0075A   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0075E                          					DatLstEntry	sRsrcHWDevID,1
0075E   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
00762
00762                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
00762   0A00 0680             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00766                          					OSLstEntry	MinorLength,_MinorLength_DAFB_GFb
00766   0B00 06C8             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_GFb-*)**$00FFFFFF)
0076A
0076A                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_GF
0076A   4000 06E8             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_GF-*)**$00FFFFFF)
0076E
0076E                          					OSLstEntry	FirstVidMode,_OBM_DAFB_GF
0076E   8000 2874             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_GF-*)**$00FFFFFF)
00772                          					OSLstEntry	SecondVidMode,_TBM_DAFB_GF
00772   8100 2C22             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_GF-*)**$00FFFFFF)
00776                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_GF
00776   8200 2FD0             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_GF-*)**$00FFFFFF)
0077A                          					OSLstEntry	FourthVidMode,_EBM_DAFB_GF
0077A   8300 337E             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_GF-*)**$00FFFFFF)
0077E                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_GF
0077E   8400 370C             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_GF-*)**$00FFFFFF)
00782                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_GF
00782   8500 39A2             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_GF-*)**$00FFFFFF)
00786
00786                          					DatLstEntry	EndOfList,0
00786   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0078A
0078A                          	;----------------------------------
0078A
0078A                          	_sRsrc_Vid_DAFB_PALSTa
0078A                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0078A   0100 01A4             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0078E                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0078E   0200 01A8             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00792                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00792   0400 0648             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00796                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00796   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0079A                          					DatLstEntry	sRsrcHWDevID,1
0079A   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0079E
0079E                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0079E   0A00 0644             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
007A2                          					OSLstEntry	MinorLength,_MinorLength_DAFB_PALSTa
007A2   0B00 0690             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_PALSTa-*)**$00FFFFFF)
007A6
007A6                          					OSLstEntry	FirstVidMode,_OBM_DAFB_PALST
007A6   8000 284C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_PALST-*)**$00FFFFFF)
007AA                          					OSLstEntry	SecondVidMode,_TBM_DAFB_PALST
007AA   8100 2BFA             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_PALST-*)**$00FFFFFF)
007AE                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_PALST
007AE   8200 2FA8             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_PALST-*)**$00FFFFFF)
007B2                          					OSLstEntry	FourthVidMode,_EBM_DAFB_PALST
007B2   8300 3356             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_PALST-*)**$00FFFFFF)
007B6                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_PALST
007B6   8400 36E4             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_PALST-*)**$00FFFFFF)
007BA
007BA                          					DatLstEntry	EndOfList,0
007BA   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
007BE
007BE                          	;----------------------------------
007BE
007BE                          	_sRsrc_Vid_DAFB_PALSTb
007BE                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
007BE   0100 0170             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
007C2                          					OSLstEntry	sRsrcName,_VideoNameDAFB
007C2   0200 0174             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
007C6                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
007C6   0400 0614             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
007CA                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
007CA   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
007CE                          					DatLstEntry	sRsrcHWDevID,1
007CE   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
007D2
007D2                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
007D2   0A00 0610             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
007D6                          					OSLstEntry	MinorLength,_MinorLength_DAFB_PALSTb
007D6   0B00 0660             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_PALSTb-*)**$00FFFFFF)
007DA
007DA                          					OSLstEntry	FirstVidMode,_OBM_DAFB_PALST
007DA   8000 2818             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_PALST-*)**$00FFFFFF)
007DE                          					OSLstEntry	SecondVidMode,_TBM_DAFB_PALST
007DE   8100 2BC6             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_PALST-*)**$00FFFFFF)
007E2                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_PALST
007E2   8200 2F74             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_PALST-*)**$00FFFFFF)
007E6                          					OSLstEntry	FourthVidMode,_EBM_DAFB_PALST
007E6   8300 3322             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_PALST-*)**$00FFFFFF)
007EA                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_PALST
007EA   8400 36B0             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_PALST-*)**$00FFFFFF)
007EE                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_PALST
007EE   8500 3946             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_PALST-*)**$00FFFFFF)
007F2
007F2                          					DatLstEntry	EndOfList,0
007F2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
007F6
007F6                          	;----------------------------------
007F6
007F6                          	_sRsrc_Vid_DAFB_PALconvST
007F6                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
007F6   0100 0138             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
007FA                          					OSLstEntry	sRsrcName,_VideoNameDAFB
007FA   0200 013C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
007FE                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
007FE   0400 05DC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00802                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00802   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00806                          					DatLstEntry	sRsrcHWDevID,1
00806   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0080A
0080A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0080A   0A00 05D8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0080E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_PALconvST
0080E   0B00 0634             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_PALconvST-*)**$00FFFFFF)
00812
00812                          					OSLstEntry	FirstVidMode,_OBM_DAFB_PALSTconv
00812   8000 27F0             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_PALSTconv-*)**$00FFFFFF)
00816                          					OSLstEntry	SecondVidMode,_TBM_DAFB_PALSTconv
00816   8100 2B9E             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_PALSTconv-*)**$00FFFFFF)
0081A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_PALSTconv
0081A   8200 2F4C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_PALSTconv-*)**$00FFFFFF)
0081E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_PALSTconv
0081E   8300 32FA             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_PALSTconv-*)**$00FFFFFF)
00822
00822                          					DatLstEntry	EndOfList,0
00822   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00826
00826
00826                          	;----------------------------------
00826
00826                          	_sRsrc_Vid_DAFB_PALFFa
00826                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00826   0100 0108             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0082A                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0082A   0200 010C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0082E                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0082E   0400 05AC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00832                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00832   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00836                          					DatLstEntry	sRsrcHWDevID,1
00836   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0083A
0083A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0083A   0A00 05A8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0083E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_PALFFa
0083E   0B00 05FC             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_PALFFa-*)**$00FFFFFF)
00842
00842                          					OSLstEntry	FirstVidMode,_OBM_DAFB_PALFF
00842   8000 27D0             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_PALFF-*)**$00FFFFFF)
00846                          					OSLstEntry	SecondVidMode,_TBM_DAFB_PALFF
00846   8100 2B7E             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_PALFF-*)**$00FFFFFF)
0084A                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_PALFF
0084A   8200 2F2C             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_PALFF-*)**$00FFFFFF)
0084E                          					OSLstEntry	FourthVidMode,_EBM_DAFB_PALFF
0084E   8300 32DA             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_PALFF-*)**$00FFFFFF)
00852                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_PALFF
00852   8400 3658             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_PALFF-*)**$00FFFFFF)
00856
00856                          					DatLstEntry	EndOfList,0
00856   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0085A
0085A                          	;----------------------------------
0085A
0085A                          	_sRsrc_Vid_DAFB_PALFFb
0085A                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
0085A   0100 00D4             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
0085E                          					OSLstEntry	sRsrcName,_VideoNameDAFB
0085E   0200 00D8             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
00862                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
00862   0400 0578             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00866                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00866   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0086A                          					DatLstEntry	sRsrcHWDevID,1
0086A   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0086E
0086E                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0086E   0A00 0574             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
00872                          					OSLstEntry	MinorLength,_MinorLength_DAFB_PALFFb
00872   0B00 05CC             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_PALFFb-*)**$00FFFFFF)
00876
00876                          					OSLstEntry	FirstVidMode,_OBM_DAFB_PALFF
00876   8000 279C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_PALFF-*)**$00FFFFFF)
0087A                          					OSLstEntry	SecondVidMode,_TBM_DAFB_PALFF
0087A   8100 2B4A             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_PALFF-*)**$00FFFFFF)
0087E                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_PALFF
0087E   8200 2EF8             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_PALFF-*)**$00FFFFFF)
00882                          					OSLstEntry	FourthVidMode,_EBM_DAFB_PALFF
00882   8300 32A6             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_PALFF-*)**$00FFFFFF)
00886                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_PALFF
00886   8400 3624             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_PALFF-*)**$00FFFFFF)
0088A                          					OSLstEntry	SixthVidMode,_D32BM_DAFB_PALFF
0088A   8500 38BA             1	  				DC.L		(SixthVidMode<<24)++((_D32BM_DAFB_PALFF-*)**$00FFFFFF)
0088E
0088E                          					DatLstEntry	EndOfList,0
0088E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00892
00892                          	;----------------------------------
00892
00892                          	_sRsrc_Vid_DAFB_PALconvFF
00892                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
00892   0100 009C             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
00896                          					OSLstEntry	sRsrcName,_VideoNameDAFB
00896   0200 00A0             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
0089A                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
0089A   0400 0540             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
0089E                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart))
0089E   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
008A2                          					DatLstEntry	sRsrcHWDevID,1
008A2   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
008A6
008A6                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
008A6   0A00 053C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
008AA                          					OSLstEntry	MinorLength,_MinorLength_DAFB_PALconvFF
008AA   0B00 059C             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_PALconvFF-*)**$00FFFFFF)
008AE
008AE                          					OSLstEntry	FirstVidMode,_OBM_DAFB_PALFFconv
008AE   8000 2774             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_PALFFconv-*)**$00FFFFFF)
008B2                          					OSLstEntry	SecondVidMode,_TBM_DAFB_PALFFconv
008B2   8100 2B22             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_PALFFconv-*)**$00FFFFFF)
008B6                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_PALFFconv
008B6   8200 2ED0             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_PALFFconv-*)**$00FFFFFF)
008BA                          					OSLstEntry	FourthVidMode,_EBM_DAFB_PALFFconv
008BA   8300 327E             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_PALFFconv-*)**$00FFFFFF)
008BE
008BE                          					DatLstEntry	EndOfList,0
008BE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
008C2
008C2                          	;----------------------------------
008C2
008C2                          	_sRsrc_Vid_DAFB_19a
008C2                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
008C2   0100 006C             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
008C6                          					OSLstEntry	sRsrcName,_VideoNameDAFB
008C6   0200 0070             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
008CA                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
008CA   0400 0510             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
008CE                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart)) ; 32-bit base address for fra
008CE   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
008D2                          					DatLstEntry	sRsrcHWDevID,1
008D2   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
008D6
008D6                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
008D6   0A00 050C             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
008DA                          					OSLstEntry	MinorLength,_MinorLength_DAFB_19a
008DA   0B00 0570             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_19a-*)**$00FFFFFF)
008DE
008DE                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_19
008DE   4000 0574             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_19-*)**$00FFFFFF)
008E2
008E2                          					OSLstEntry	FirstVidMode,_OBM_DAFB_19
008E2   8000 2750             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_19-*)**$00FFFFFF)
008E6                          					OSLstEntry	SecondVidMode,_TBM_DAFB_19
008E6   8100 2AFE             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_19-*)**$00FFFFFF)
008EA                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_19
008EA   8200 2EAC             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_19-*)**$00FFFFFF)
008EE                          					OSLstEntry	FourthVidMode,_EBM_DAFB_19
008EE   8300 325A             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_19-*)**$00FFFFFF)
008F2
008F2                          					DatLstEntry	EndOfList,0
008F2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
008F6
008F6                          	;----------------------------------
008F6
008F6                          	_sRsrc_Vid_DAFB_19b
008F6                          					OSLstEntry	sRsrcType,_VideoTypeDAFB
008F6   0100 0038             1	  				DC.L		(sRsrcType<<24)++((_VideoTypeDAFB-*)**$00FFFFFF)
008FA                          					OSLstEntry	sRsrcName,_VideoNameDAFB
008FA   0200 003C             1	  				DC.L		(sRsrcName<<24)++((_VideoNameDAFB-*)**$00FFFFFF)
008FE                          					OSLstEntry	sRsrcDrvrDir,_VidDrvrDirDAFB
008FE   0400 04DC             1	  				DC.L		(sRsrcDrvrDir<<24)++((_VidDrvrDirDAFB-*)**$00FFFFFF)
00902                          					DatLstEntry	sRsrcFlags,(0|(1<<f32BitMode)|(1<<fOpenAtStart)) ; 32-bit base address for fra
00902   0700 0006             1	  				DC.L		(sRsrcFlags<<24)+(0|(1<<f32BitMode)|(1<<fOpenAtStart))
00906                          					DatLstEntry	sRsrcHWDevID,1
00906   0800 0001             1	  				DC.L		(sRsrcHWDevID<<24)+1
0090A
0090A                          					OSLstEntry	MinorBaseOS,_MinorBaseDAFB
0090A   0A00 04D8             1	  				DC.L		(MinorBaseOS<<24)++((_MinorBaseDAFB-*)**$00FFFFFF)
0090E                          					OSLstEntry	MinorLength,_MinorLength_DAFB_19b
0090E   0B00 0540             1	  				DC.L		(MinorLength<<24)++((_MinorLength_DAFB_19b-*)**$00FFFFFF)
00912
00912                          					OSLstEntry	sGammaDir,_GammaDir_DAFB_19
00912   4000 0540             1	  				DC.L		(sGammaDir<<24)++((_GammaDir_DAFB_19-*)**$00FFFFFF)
00916
00916                          					OSLstEntry	FirstVidMode,_OBM_DAFB_19
00916   8000 271C             1	  				DC.L		(FirstVidMode<<24)++((_OBM_DAFB_19-*)**$00FFFFFF)
0091A                          					OSLstEntry	SecondVidMode,_TBM_DAFB_19
0091A   8100 2ACA             1	  				DC.L		(SecondVidMode<<24)++((_TBM_DAFB_19-*)**$00FFFFFF)
0091E                          					OSLstEntry	ThirdVidMode,_FBM_DAFB_19
0091E   8200 2E78             1	  				DC.L		(ThirdVidMode<<24)++((_FBM_DAFB_19-*)**$00FFFFFF)
00922                          					OSLstEntry	FourthVidMode,_EBM_DAFB_19
00922   8300 3226             1	  				DC.L		(FourthVidMode<<24)++((_EBM_DAFB_19-*)**$00FFFFFF)
00926                          					OSLstEntry	FifthVidMode,_D16BM_DAFB_19
00926   8400 3594             1	  				DC.L		(FifthVidMode<<24)++((_D16BM_DAFB_19-*)**$00FFFFFF)
0092A
0092A                          					DatLstEntry	EndOfList,0
0092A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
0092E
0092E                          	;-------------------------------------------------------------
0092E                          	;				Resource Types
0092E                          	;-------------------------------------------------------------
0092E                          	;
0092E
0092E                          	_VideoTypeDAFB
0092E   0003                   					Dc.w	CatDisplay
00930   0001                   					Dc.w	TypVideo
00932   0001                   					Dc.w	DrSwApple
00934   001F                   					Dc.w	DrHwRasterOps24MxQ
00936
00936                          	;-------------------------------------------------------------
00936                          	;				Resource Names
00936                          	;-------------------------------------------------------------
00936                          	;
00936
00936                          					String	C
00936
00936                          	_VideoNameDAFB
00936   446973706C6179         					Dc.l	'Display_Video_Apple_RasterOps24MxQ'
0095A
0095A                          	;-------------------------------------------------------------
0095A                          	;				Resource Icons
0095A                          	;-------------------------------------------------------------
0095A
0095A                          	_VidICON
0095A   0000 0000 0013         					Dc.l	$00000000,$00130000,$00360000,$003F8000
0096A   007F 0000 00FF         					Dc.l	$007F0000,$00FF0000,$01FF8000,$01FF8000
0097A   03CE C000 03BD         					Dc.l	$03CEC000,$03BDC000,$03EF6000,$07CE6000
0098A   07CE 6000 07EF         					Dc.l	$07CE6000,$07EF6000,$07EF6000,$07FFFC1E
0099A   1FFD 82E1 23F8         					Dc.l	$1FFD82E1,$23F8530F,$40720C3E,$814600F0
009AA   8100 0F00 8380         					Dc.l	$81000F00,$83807800,$4CFFC000,$207FF800
009BA   1E1F FE00 0183         					Dc.l	$1E1FFE00,$0183E200,$00F01C00,$00FFE000
009CA   007E 0000 00BC         					Dc.l	$007E0000,$00BC0000,$1EC2F000,$3FFFF800
009DA
009DA                          	;_____________________________________________________________________________________________
009DA                          	; Board sResource Icon */
009DA                          	boardicon
009DA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
009EA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
009FA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00A0A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00A1A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d
00A2A   6D 6D 6D 6D 6D         	    DC.B $6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00A3A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$6d
00A4A   6D 6D 6D 6D 6D         	    DC.B $6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff
00A5A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d
00A6A   6D 6D FF FF FF         	    DC.B $6d,$6d,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00A7A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d
00A8A   6D FF FF FF FF         	    DC.B $6d,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00A9A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d
00AAA   6D FF FF FF FF         	    DC.B $6d,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00ABA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d
00ACA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00ADA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d
00AEA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00AFA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d
00B0A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00B1A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff
00B2A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00B3A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff
00B4A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00B5A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff
00B6A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00B7A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff
00B8A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff
00B9A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff
00BAA   FF FF FF FF 6D         	    DC.B $ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00BBA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff
00BCA   FF FF FF 6D 6D         	    DC.B $ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00BDA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff
00BEA   FF 6D 6D 6D 6D         	    DC.B $ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00BFA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d
00C0A   6D 6D 6D 6D 6D         	    DC.B $6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00C1A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d
00C2A   6D 6D 6D 6D 6D         	    DC.B $6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00C3A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff
00C4A   6D 6D 6D 6D 6D         	    DC.B $6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00C5A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00C6A   6D 6D 6D 6D 6D         	    DC.B $6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00C7A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00C8A   FF 6D 6D 6D 6D         	    DC.B $ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00C9A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00CAA   FF 6D 6D 6D 6D         	    DC.B $ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00CBA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00CCA   FF FF 6D 6D 6D         	    DC.B $ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00CDA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00CEA   FF FF 6D 6D 6D         	    DC.B $ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00CFA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00D0A   FF FF FF 6D 6D         	    DC.B $ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00D1A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff
00D2A   FF FF FF 6D 6D         	    DC.B $ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00D3A   FF FF FF FF 6D         	    DC.B $ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff
00D4A   FF FF FF FF 6D         	    DC.B $ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00D5A   FF FF FF FF 6D         	    DC.B $ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff
00D6A   FF FF FF FF 6D         	    DC.B $ff,$ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff,$ff
00D7A   FF FF 6D 6D 6D         	    DC.B $ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff,$ff
00D8A   FF FF FF 6D 6D         	    DC.B $ff,$ff,$ff,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$6d,$ff,$ff,$ff,$ff
00D9A   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00DAA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00DBA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00DCA   FF FF FF FF FF         	    DC.B $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00DDA
00DDA                          	;-------------------------------------------------------------
00DDA                          	;				Driver Directory
00DDA                          	;-------------------------------------------------------------
00DDA                          	;
00DDA
00DDA                          	_VidDrvrDirDAFB
00DDA                          					OSLstEntry	sMacOS68020,_sMacOSDAFB
00DDA   0200 3DCA             1	  				DC.L		(sMacOS68020<<24)++((_sMacOSDAFB-*)**$00FFFFFF)
00DDE                          					DatLstEntry	EndOfList,0
00DDE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00DE2
00DE2                          	;-------------------------------------------------------------
00DE2                          	;				Minor/Major Bases/Lengths
00DE2                          	;-------------------------------------------------------------
00DE2                          	;
00DE2
00DE2   0000 0000              	_MinorBaseDAFB					Dc.l	defMinorBase
00DE6
00DE6   000F 4B00              	_MinorLength_DAFB_2Pa			Dc.l	MinorLength_DAFB_2Pa
00DEA   001E 9600              	_MinorLength_DAFB_2Pb			Dc.l	MinorLength_DAFB_2Pb
00DEE   000D 9800              	_MinorLength_DAFB_FPa			Dc.l	MinorLength_DAFB_FPa
00DF2   001B 3000              	_MinorLength_DAFB_FPb			Dc.l	MinorLength_DAFB_FPb
00DF6   000C 0000              	_MinorLength_DAFB_GS			Dc.l	MinorLength_DAFB_GS
00DFA   0006 0000              	_MinorLength_DAFB_NTSCSTa		Dc.l	MinorLength_DAFB_NTSCSTa
00DFE   0018 0000              	_MinorLength_DAFB_NTSCSTb		Dc.l	MinorLength_DAFB_NTSCSTb
00E02   0007 8000              	_MinorLength_DAFB_NTSCFFa		Dc.l	MinorLength_DAFB_NTSCFFa
00E06   001E 0000              	_MinorLength_DAFB_NTSCFFb		Dc.l	MinorLength_DAFB_NTSCFFb
00E0A   0006 0000              	_MinorLength_DAFB_NTSCconvST	Dc.l	MinorLength_DAFB_NTSCconvST
00E0E   0007 8000              	_MinorLength_DAFB_NTSCconvFF	Dc.l	MinorLength_DAFB_NTSCconvFF
00E12   0007 8000              	_MinorLength_DAFB_HRa			Dc.l	MinorLength_DAFB_HRa
00E16   001E 0000              	_MinorLength_DAFB_HRb			Dc.l	MinorLength_DAFB_HRb
00E1A   0007 8000              	_MinorLength_DAFB_VGAa			Dc.l	MinorLength_DAFB_VGAa
00E1E   001E 0000              	_MinorLength_DAFB_VGAb			Dc.l	MinorLength_DAFB_VGAb
00E22   0007 9E00              	_MinorLength_DAFB_SVGAa			Dc.l	MinorLength_DAFB_SVGAa
00E26   001E 7800              	_MinorLength_DAFB_SVGAb			Dc.l	MinorLength_DAFB_SVGAb
00E2A   0007 EC00              	_MinorLength_DAFB_GFa			Dc.l	MinorLength_DAFB_GFa
00E2E   001F B000              	_MinorLength_DAFB_GFb			Dc.l	MinorLength_DAFB_GFb
00E32   0006 1800              	_MinorLength_DAFB_PALSTa		Dc.l	MinorLength_DAFB_PALSTa
00E36   0018 6000              	_MinorLength_DAFB_PALSTb		Dc.l	MinorLength_DAFB_PALSTb
00E3A   0007 5000              	_MinorLength_DAFB_PALFFa		Dc.l	MinorLength_DAFB_PALFFa
00E3E   001D 4000              	_MinorLength_DAFB_PALFFb		Dc.l	MinorLength_DAFB_PALFFb
00E42   0007 8000              	_MinorLength_DAFB_PALconvST		Dc.l	MinorLength_DAFB_PALconvST
00E46   0009 0000              	_MinorLength_DAFB_PALconvFF		Dc.l	MinorLength_DAFB_PALconvFF
00E4A   000C 0000              	_MinorLength_DAFB_19a			Dc.l	MinorLength_DAFB_19a
00E4E   0018 0000              	_MinorLength_DAFB_19b			Dc.l	MinorLength_DAFB_19b
00E52
00E52                          	;-------------------------------------------------------------
00E52                          	;				Gamma Directory
00E52                          	;-------------------------------------------------------------
00E52                          	;
00E52                          					String	C
00E52
00E52   0000 07D0              	ColorGammaID	Equ		2000
00E52   0000 07D1              	HiResGammaID	Equ		2001
00E52   0000 07D2              	GrayGammaID		Equ		2002
00E52   0000 07D3              	RubikGammaID	Equ		2003
00E52
00E52                          	_GammaDir_DAFB_RGB2P
00E52                          	_GammaDir_DAFB_RGBFP
00E52                          	_GammaDir_DAFB_GF
00E52                          	_GammaDir_DAFB_19
00E52                          					OSLstEntry	128,HiResGamma
00E52   8000 0348             1	  				DC.L		(128<<24)++((HiResGamma-*)**$00FFFFFF)
00E56                          					OSLstEntry	129,ColorGamma
00E56   8100 0020             1	  				DC.L		(129<<24)++((ColorGamma-*)**$00FFFFFF)
00E5A                          					DatLstEntry	EndOfList,0
00E5A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00E5E
00E5E                          	_GammaDir_DAFB_2P
00E5E                          	_GammaDir_DAFB_FP
00E5E                          					OSLstEntry	128,GrayGamma
00E5E   8000 045C             1	  				DC.L		(128<<24)++((GrayGamma-*)**$00FFFFFF)
00E62                          					DatLstEntry	EndOfList,0
00E62   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00E66
00E66                          	_GammaDir_DAFB_VGA
00E66                          	_GammaDir_DAFB_HR
00E66                          					OSLstEntry	128,HiResGamma
00E66   8000 0334             1	  				DC.L		(128<<24)++((HiResGamma-*)**$00FFFFFF)
00E6A                          					DatLstEntry	EndOfList,0
00E6A   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00E6E
00E6E                          	_GammaDir_DAFB_GS
00E6E                          					OSLstEntry	128,RubikGamma
00E6E   8000 056E             1	  				DC.L		(128<<24)++((RubikGamma-*)**$00FFFFFF)
00E72                          					DatLstEntry	EndOfList,0
00E72   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
00E76
00E76                          	ColorGamma
00E76   0000 0324              			DC.L	EndColorGamma-ColorGamma
00E7A
00E7A   07D0                   			DC.W	ColorGammaID								; gamma res ID
00E7C   506167652D5768         			DC.B	'Page-White Gamma'
00E8D
00E8D   0000 0E8E              			ALIGN	2
00E8E
00E8E   0000                   			DC.W	$0000										; gVersion
00E90   0000                   			DC.W	$0000										; gType
00E92   0000                   			DC.W	$0000										; gFormulaSize
00E94   0003                   			DC.W	$0003										; gChanCnt
00E96   0100                   			DC.W	$0100										; gDataCnt
00E98   0008                   			DC.W	$0008										; gChanWidth
00E9A
00E9A   0003 0609 0C10         			DC.L	$00030609,$0C101012,$13151616,$181B1C1E		; red channel
00EAA   1F22 2326 282B         			DC.L	$1F222326,$282B2C2F,$3234373A,$3C3F4041
00EBA   4243 4445 4647         			DC.L	$42434445,$46474749,$4A4B4C4D,$4E4F5051
00ECA   5253 5454 5656         			DC.L	$52535454,$56565758,$595A5B5C,$5D5E5F60
00EDA   6162 6364 6566         			DC.L	$61626364,$65666768,$696A6B6C,$6D6E6F70
00EEA   7172 7273 7475         			DC.L	$71727273,$74757677,$78797A7A,$7B7C7D7E
00EFA   7F81 8283 8384         			DC.L	$7F818283,$83848586,$8788898A,$8A8B8C8D
00F0A   8E8F 9091 9293         			DC.L	$8E8F9091,$92939394,$95969798,$98999A9B
00F1A   9C9D 9E9F A0A1         			DC.L	$9C9D9E9F,$A0A1A1A2,$A3A4A4A5,$A6A7A8A8
00F2A   A9AA ABAC ADAD         			DC.L	$A9AAABAC,$ADADAEAF,$B0B1B2B2,$B3B4B5B5
00F3A   B6B7 B8B8 B9BA         			DC.L	$B6B7B8B8,$B9BABBBC,$BCBDBEBF,$C0C0C1C2
00F4A   C3C3 C4C5 C6C6         			DC.L	$C3C3C4C5,$C6C6C7C8,$C9C9CACB,$CCCDCDCE
00F5A   CFD0 D1D1 D2D3         			DC.L	$CFD0D1D1,$D2D3D4D4,$D5D6D7D7,$D8D9DADA
00F6A   DBDC DDDE DEDF         			DC.L	$DBDCDDDE,$DEDFE0E1,$E1E2E3E4,$E4E5E6E7
00F7A   E7E8 E9EA EAEB         			DC.L	$E7E8E9EA,$EAEBECED,$EEEEEFF0,$F1F1F2F3
00F8A   F4F4 F5F6 F7F8         			DC.L	$F4F4F5F6,$F7F8F8F9,$FAFBFBFC,$FDFEFFFF
00F9A
00F9A   0003 0609 0C10         			DC.L	$00030609,$0C101018,$20202223,$24252728		; green channel
00FAA   292C 2D2E 3032         			DC.L	$292C2D2E,$30323437,$383A3D3F,$40414242
00FBA   4344 4445 4647         			DC.L	$43444445,$46474849,$4A4A4B4C,$4D4E4F50
00FCA   5152 5354 5556         			DC.L	$51525354,$55565758,$595B5C5D,$5E5F6061
00FDA   6263 6465 6566         			DC.L	$62636465,$65666768,$696A6B6C,$6D6E6F70
00FEA   7171 7273 7474         			DC.L	$71717273,$74747576,$77787979,$7A7B7C7D
00FFA   7E7F 8081 8283         			DC.L	$7E7F8081,$82838484,$85868788,$88898A8B
0100A   8C8D 8E8E 8F90         			DC.L	$8C8D8E8E,$8F909192,$93939495,$96969798
0101A   999A 9A9B 9C9D         			DC.L	$999A9A9B,$9C9D9E9E,$9FA0A1A2,$A2A3A4A5
0102A   A5A6 A7A8 A8A9         			DC.L	$A5A6A7A8,$A8A9AAAB,$ABACADAE,$AFAFB0B1
0103A   B2B2 B3B4 B5B5         			DC.L	$B2B2B3B4,$B5B5B6B7,$B7B8B9BA,$BABBBCBD
0104A   BDBE BFC0 C1C1         			DC.L	$BDBEBFC0,$C1C1C2C3,$C3C4C5C6,$C6C7C8C9
0105A   C9CA CBCC CCCD         			DC.L	$C9CACBCC,$CCCDCECF,$CFD0D1D2,$D2D3D4D4
0106A   D5D6 D6D7 D8D9         			DC.L	$D5D6D6D7,$D8D9D9DA,$DBDCDCDD,$DEDEDFE0
0107A   E1E1 E2E3 E4E4         			DC.L	$E1E1E2E3,$E4E4E5E6,$E6E7E8E9,$E9EAEBEC
0108A   ECED EEEF EFF0         			DC.L	$ECEDEEEF,$EFF0F1F2,$F2F3F4F4,$F5F6F7F7
0109A
0109A   0002 0508 0A0D         			DC.L	$00020508,$0A0D1010,$10202022,$23232425		; blue channel
010AA   2527 2829 2A2C         			DC.L	$25272829,$2A2C2D2E,$2F303233,$34363738
010BA   3A3C 3D3F 4041         			DC.L	$3A3C3D3F,$40414142,$42434444,$45454647
010CA   4748 494A 4A4B         			DC.L	$4748494A,$4A4B4C4D,$4D4E4F4F,$51515253
010DA   5455 5656 5758         			DC.L	$54555656,$5758595A,$5B5C5D5E,$5F606061
010EA   6262 6364 6465         			DC.L	$62626364,$64656666,$67686969,$6A6B6C6C
010FA   6D6E 6F6F 7071         			DC.L	$6D6E6F6F,$70717272,$73747475,$76777778
0110A   7979 7A7B 7C7C         			DC.L	$79797A7B,$7C7C7D7E,$7F808182,$82838484
0111A   8586 8687 8888         			DC.L	$85868687,$8888898A,$8A8B8C8D,$8D8E8F90
0112A   9091 9192 9393         			DC.L	$90919192,$93939495,$95969797,$9899999A
0113A   9B9B 9C9D 9D9E         			DC.L	$9B9B9C9D,$9D9E9FA0,$A0A1A1A2,$A3A3A4A4
0114A   A5A6 A6A7 A7A8         			DC.L	$A5A6A6A7,$A7A8A9A9,$AAABABAC,$ADADAEAF
0115A   AFB0 B0B1 B2B2         			DC.L	$AFB0B0B1,$B2B2B3B3,$B4B5B5B6,$B6B7B8B8
0116A   B9BA BABB BBBC         			DC.L	$B9BABABB,$BBBCBDBD,$BEBFBFC0,$C0C1C2C2
0117A   C3C3 C4C5 C5C6         			DC.L	$C3C3C4C5,$C5C6C6C7,$C8C8C9C9,$CACBCBCC
0118A   CCCD CECE CFD0         			DC.L	$CCCDCECE,$CFD0D0D1,$D1D2D3D3,$D4D4D5D6
0119A                          	EndColorGamma
0119A
0119A                          	HiResGamma
0119A   0000 0120              			DC.L	EndHiResGamma-HiResGamma
0119E
0119E   07D1                   			DC.W	HiResGammaID								; gamma res ID
011A0   4D616320537464         			DC.B	'Mac Std Gamma'
011AE
011AE   0000 11AE              			ALIGN	2
011AE
011AE   0000                   			DC.W	$0000										; gVersion
011B0   0000                   			DC.W	$0000										; gType
011B2   0000                   			DC.W	$0000										; gFormulaSize
011B4   0001                   			DC.W	$0001										; gChanCnt
011B6   0100                   			DC.W	$0100										; gDataCnt
011B8   0008                   			DC.W	$0008										; gChanWidth
011BA
011BA   0005 090B 0E10         			DC.L	$0005090B,$0E101315,$17191B1D,$1E202224
011CA   2527 282A 2C2D         			DC.L	$2527282A,$2C2D2F30,$31333436,$37383A3B
011DA   3C3E 3F40 4243         			DC.L	$3C3E3F40,$42434445,$4748494A,$4B4D4E4F
011EA   5051 5254 5556         			DC.L	$50515254,$55565758,$595A5B5C,$5E5F6061
011FA   6263 6465 6667         			DC.L	$62636465,$66676869,$6A6B6C6D,$6E6F7071
0120A   7273 7475 7677         			DC.L	$72737475,$76777879,$7A7B7C7D,$7E7F8081
0121A   8182 8384 8586         			DC.L	$81828384,$85868788,$898A8B8C,$8C8D8E8F
0122A   9091 9293 9495         			DC.L	$90919293,$94959596,$9798999A,$9B9B9C9D
0123A   9E9F A0A1 A1A2         			DC.L	$9E9FA0A1,$A1A2A3A4,$A5A6A6A7,$A8A9AAAB
0124A   ABAC ADAE AFB0         			DC.L	$ABACADAE,$AFB0B0B1,$B2B3B4B4,$B5B6B7B8
0125A   B8B9 BABB BCBC         			DC.L	$B8B9BABB,$BCBCBDBE,$BFC0C0C1,$C2C3C3C4
0126A   C5C6 C7C7 C8C9         			DC.L	$C5C6C7C7,$C8C9CACA,$CBCCCDCD,$CECFD0D0
0127A   D1D2 D3D3 D4D5         			DC.L	$D1D2D3D3,$D4D5D6D6,$D7D8D9D9,$DADBDCDC
0128A   DDDE DFDF E0E1         			DC.L	$DDDEDFDF,$E0E1E1E2,$E3E4E4E5,$E6E7E7E8
0129A   E9E9 EAEB ECEC         			DC.L	$E9E9EAEB,$ECECEDEE,$EEEFF0F1,$F1F2F3F3
012AA   F4F5 F5F6 F7F8         			DC.L	$F4F5F5F6,$F7F8F8F9,$FAFAFBFC,$FCFDFEFF
012BA                          	EndHiResGamma
012BA
012BA                          	GrayGamma
012BA   0000 0122              			DC.L	EndGrayGamma-GrayGamma
012BE
012BE   07D2                   			DC.W	GrayGammaID									; gamma res ID
012C0   4D616320477261         			DC.B	'Mac Gray Gamma'							;
012CF
012CF   0000 12D0              			ALIGN	2
012D0
012D0   0000                   			DC.W	$0000										; gVersion
012D2   0000                   			DC.W	$0000										; gType
012D4   0000                   			DC.W	$0000										; gFormulaSize
012D6   0001                   			DC.W	$0001										; gChanCnt
012D8   0100                   			DC.W	$0100										; gDataCnt
012DA   0008                   			DC.W	$0008										; gChanWidth
012DC
012DC   000A 141D 2326         			DC.L	$000A141D,$23262B2E,$30323437,$393B3C3E
012EC   4041 4244 4547         			DC.L	$40414244,$4547484A,$4B4D4E4F,$50515254
012FC   5556 5758 5A5B         			DC.L	$55565758,$5A5B5C5D,$5E5F6061,$63646566
0130C   6768 696A 6B6C         			DC.L	$6768696A,$6B6C6D6E,$6F707171,$72737475
0131C   7677 7879 7A7B         			DC.L	$76777879,$7A7B7C7D,$7E7F8080,$81828384
0132C   8485 8687 8889         			DC.L	$84858687,$88898A8A,$8B8C8D8E,$8F909091
0133C   9292 9394 9596         			DC.L	$92929394,$95969797,$98999A9A,$9B9C9D9E
0134C   9E9F A0A1 A1A2         			DC.L	$9E9FA0A1,$A1A2A3A3,$A4A5A6A7,$A7A8A9AA
0135C   AAAB ACAD ADAE         			DC.L	$AAABACAD,$ADAEAFAF,$B0B1B2B2,$B3B4B4B5
0136C   B6B6 B7B7 B8B9         			DC.L	$B6B6B7B7,$B8B9B9BA,$BBBCBCBD,$BEBEBFC0
0137C   C0C1 C2C2 C3C4         			DC.L	$C0C1C2C2,$C3C4C5C5,$C6C6C7C8,$C8C9CACB
0138C   CCCD CDCE CFCF         			DC.L	$CCCDCDCE,$CFCFD0D0,$D1D2D2D3,$D3D4D5D6
0139C   D6D7 D7D8 D9D9         			DC.L	$D6D7D7D8,$D9D9DADA,$DBDCDDDD,$DEDFDFE0
013AC   E0E1 E2E3 E3E4         			DC.L	$E0E1E2E3,$E3E4E5E5,$E6E6E7E7,$E8E8E9EA
013BC   EAEB EBEC EDED         			DC.L	$EAEBEBEC,$EDEDEEEF,$F0F0F1F2,$F2F3F4F4
013CC   F5F5 F6F7 F7F8         			DC.L	$F5F5F6F7,$F7F8F9FA,$FAFBFCFC,$FDFEFEFF
013DC                          	EndGrayGamma
013DC
013DC                          	RubikGamma
013DC
013DC   0000 0120              			DC.L	EndRubikGamma-RubikGamma
013E0
013E0   07D3                   			DC.W	RubikGammaID								; gamma res ID
013E2   4D616320524742         			DC.B	'Mac RGB Gamma'
013F0
013F0   0000 13F0              			ALIGN	2
013F0
013F0   0000                   			DC.W	$0000										; gVersion
013F2   0000                   			DC.W	$0000										; gType
013F4   0000                   			DC.W	$0000										; gFormulaSize
013F6   0001                   			DC.W	$0001										; gChanCnt
013F8   0100                   			DC.W	$0100										; gDataCnt
013FA   0008                   			DC.W	$0008										; gChanWidth
013FC
013FC   0507 0809 0B0C         			DC.L	$05070809,$0B0C0D0F,$10111214,$15161819
0140C   1A1C 1D1E 2021         			DC.L	$1A1C1D1E,$20212223,$24262829,$2A2C2D2F
0141C   3031 3334 3637         			DC.L	$30313334,$36373839,$3A3C3D3E,$40414243
0142C   4445 4648 494B         			DC.L	$44454648,$494B4C4D,$4E4F5051,$52535455
0143C   5758 595A 5B5C         			DC.L	$5758595A,$5B5C5D5E,$5F606163,$63656567
0144C   6769 6A6B 6C6D         			DC.L	$67696A6B,$6C6D6E6F,$70717273,$74757677
0145C   7879 7A7A 7B7C         			DC.L	$78797A7A,$7B7C7D7E,$7F818283,$83848586
0146C   8788 898A 8B8C         			DC.L	$8788898A,$8B8C8D8E,$8E909091,$92939394
0147C   9596 9798 999A         			DC.L	$95969798,$999A9B9C,$9D9E9FA0,$A0A1A2A3
0148C   A4A4 A5A6 A7A8         			DC.L	$A4A4A5A6,$A7A8A9AA,$AAACADAD,$AEAEB0B1
0149C   B2B3 B3B4 B5B6         			DC.L	$B2B3B3B4,$B5B6B7B8,$B9B9BABB,$BCBDBEBF
014AC   BFC0 C1C2 C2C3         			DC.L	$BFC0C1C2,$C2C3C4C5,$C6C7C8C9,$CACBCCCD
014BC   CDCE CECF D0D1         			DC.L	$CDCECECF,$D0D1D2D3,$D3D4D5D6,$D6D7D8D8
014CC   D9DA DBDC DDDE         			DC.L	$D9DADBDC,$DDDEDEDF,$E0E1E1E2,$E3E4E4E5
014DC   E6E7 E7E8 E9EA         			DC.L	$E6E7E7E8,$E9EAEBEC,$EDEEEEEF,$EFF0F1F2
014EC   F3F3 F4F5 F6F7         			DC.L	$F3F3F4F5,$F6F7F8F8,$F9F9FAFB,$FCFDFEFF
014FC
014FC                          	EndRubikGamma
014FC
014FC                          	;-------------------------------------------------------------
014FC                          	;				Video Parameters Directory
014FC                          	;-------------------------------------------------------------
014FC                          	;
014FC                          	;	This directory holds references to data blocks containing the hardware
014FC                          	;	setup parameters for the various modes and configurations of the
014FC                          	;	hardware.  Currently, only the DAFB version of the code uses this
014FC                          	;	directory; the others internalize this information in the driver and
014FC                          	;	PrimaryInit code.
014FC                          	;
014FC                          	;	Here's the organization of the data - there's a block for each type of
014FC                          	;	display.  The 'a' (reduced functionality) and 'b' (full functionality)
014FC                          	;	entries may point at the same block of parameters, since the 'b' set
014FC                          	;	is a superset of the 'a' group for these current configurations.  Each
014FC                          	;	block has a bunch of parameters which are device specific, the format
014FC                          	;	of which is known only to the consumers.  For DAFB, this includes
014FC                          	;	DAFB setup info, Swatch info, ACDC info, National clock chip info, and
014FC                          	;	screen clearing information (skip factor, longs/row, number of rows).
014FC                          	;	There is one set of this information for each of the supported screen depths.
014FC                          	;
014FC                          	;	For more detailed information about what all the data in this section
014FC                          	;	actually means, the following ERSÕs should be consulted:
014FC                          	;
014FC                          	;		1) AC842, 9/12/88 -- the ACDC ERS, Apple Computer, Inc.
014FC                          	;		2) AC842A, Risc Products Gropu, Apple Computer, Inc.
014FC                          	;		3) DP8531/32/33 Programmable Clock Generator, 4/27/89 -- National ERS,
014FC                          	;			National Semiconductor.
014FC                          	;		4) DAFB, Eclipse Direct Access Frame Buffer Controller Specification -- DAFB ERS,
014FC                          	;			Apple Computer, Inc.
014FC                          	;-------------------------------------------------------------
014FC
014FC                          	_sVidParmDir
014FC                          					OSLstEntry	sRsrc_Vid_DAFB_RGB2Pa,_sVidParms_DAFB_2PRGB	  				; RGB 2-Page (Vesuvio)
014FC   8000 05C6             1	  				DC.L		(sRsrc_Vid_DAFB_RGB2Pa<<24)++((_sVidParms_DAFB_2PRGB-*)**$00FFFFFF)
01500                          					OSLstEntry	sRsrc_Vid_DAFB_RGB2Pb,_sVidParms_DAFB_2PRGB 	 			;
01500   8100 05C2             1	  				DC.L		(sRsrc_Vid_DAFB_RGB2Pb<<24)++((_sVidParms_DAFB_2PRGB-*)**$00FFFFFF)
01504
01504                          					OSLstEntry	sRsrc_Vid_DAFB_FP,_sVidParms_DAFB_FP						; Portrait
01504   8200 0070             1	  				DC.L		(sRsrc_Vid_DAFB_FP<<24)++((_sVidParms_DAFB_FP-*)**$00FFFFFF)
01508                          					OSLstEntry	sRsrc_Vid_DAFB_GS,_sVidParms_DAFB_GS						; Rubik
01508   8400 02F2             1	  				DC.L		(sRsrc_Vid_DAFB_GS<<24)++((_sVidParms_DAFB_GS-*)**$00FFFFFF)
0150C                          					OSLstEntry	sRsrc_Vid_DAFB_2P,_sVidParms_DAFB_2P	  					; 2-Page
0150C   8600 0494             1	  				DC.L		(sRsrc_Vid_DAFB_2P<<24)++((_sVidParms_DAFB_2P-*)**$00FFFFFF)
01510
01510                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCSTa,_sVidParms_DAFB_NTSCST				; NTSC safe title
01510   8800 0DAE             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCSTa<<24)++((_sVidParms_DAFB_NTSCST-*)**$00FFFFFF)
01514                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCSTb,_sVidParms_DAFB_NTSCST				;
01514   8900 0DAA             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCSTb<<24)++((_sVidParms_DAFB_NTSCST-*)**$00FFFFFF)
01518                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCFFa,_sVidParms_DAFB_NTSCFF				; NTSC full frame
01518   8A00 0F4C             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCFFa<<24)++((_sVidParms_DAFB_NTSCFF-*)**$00FFFFFF)
0151C                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCFFb,_sVidParms_DAFB_NTSCFF				;
0151C   8B00 0F48             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCFFb<<24)++((_sVidParms_DAFB_NTSCFF-*)**$00FFFFFF)
01520                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCconvST,_sVidParms_DAFB_NTSCconvST		; NTSC safe title, convol
01520   8C00 10EA             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCconvST<<24)++((_sVidParms_DAFB_NTSCconvST-*)**$00FFFFFF)
01524                          					OSLstEntry	sRsrc_Vid_DAFB_NTSCconvFF,_sVidParms_DAFB_NTSCconvFF		; NTSC full frame, convol
01524   8E00 1208             1	  				DC.L		(sRsrc_Vid_DAFB_NTSCconvFF<<24)++((_sVidParms_DAFB_NTSCconvFF-*)**$00FFFFFF)
01528
01528                          					OSLstEntry	sRsrc_Vid_DAFB_RGBFPa,_sVidParms_DAFB_FPRGB					; RGB Portrait
01528   9000 016E             1	  				DC.L		(sRsrc_Vid_DAFB_RGBFPa<<24)++((_sVidParms_DAFB_FPRGB-*)**$00FFFFFF)
0152C                          					OSLstEntry	sRsrc_Vid_DAFB_RGBFPb,_sVidParms_DAFB_FPRGB					;
0152C   9100 016A             1	  				DC.L		(sRsrc_Vid_DAFB_RGBFPb<<24)++((_sVidParms_DAFB_FPRGB-*)**$00FFFFFF)
01530
01530                          					OSLstEntry	sRsrc_Vid_DAFB_HRa,_sVidParms_DAFB_HR						; High-Res (Mono & RGB)
01530   9200 089C             1	  				DC.L		(sRsrc_Vid_DAFB_HRa<<24)++((_sVidParms_DAFB_HR-*)**$00FFFFFF)
01534                          					OSLstEntry	sRsrc_Vid_DAFB_HRb,_sVidParms_DAFB_HR						;
01534   9300 0898             1	  				DC.L		(sRsrc_Vid_DAFB_HRb<<24)++((_sVidParms_DAFB_HR-*)**$00FFFFFF)
01538
01538                          					OSLstEntry	sRsrc_Vid_DAFB_VGAa,_sVidParms_DAFB_VGA						; VGA
01538   9400 0A3A             1	  				DC.L		(sRsrc_Vid_DAFB_VGAa<<24)++((_sVidParms_DAFB_VGA-*)**$00FFFFFF)
0153C                          					OSLstEntry	sRsrc_Vid_DAFB_VGAb,_sVidParms_DAFB_VGA						;
0153C   9500 0A36             1	  				DC.L		(sRsrc_Vid_DAFB_VGAb<<24)++((_sVidParms_DAFB_VGA-*)**$00FFFFFF)
01540                          					OSLstEntry	sRsrc_Vid_DAFB_SVGAa,_sVidParms_DAFB_SVGA					; SuperVGA
01540   9600 0BD8             1	  				DC.L		(sRsrc_Vid_DAFB_SVGAa<<24)++((_sVidParms_DAFB_SVGA-*)**$00FFFFFF)
01544                          					OSLstEntry	sRsrc_Vid_DAFB_SVGAb,_sVidParms_DAFB_SVGA					;
01544   9700 0BD4             1	  				DC.L		(sRsrc_Vid_DAFB_SVGAb<<24)++((_sVidParms_DAFB_SVGA-*)**$00FFFFFF)
01548
01548                          					OSLstEntry	sRsrc_Vid_DAFB_GFa,_sVidParms_DAFB_GF						; Goldfish
01548   9800 06DE             1	  				DC.L		(sRsrc_Vid_DAFB_GFa<<24)++((_sVidParms_DAFB_GF-*)**$00FFFFFF)
0154C                          					OSLstEntry	sRsrc_Vid_DAFB_GFb,_sVidParms_DAFB_GF						;
0154C   9900 06DA             1	  				DC.L		(sRsrc_Vid_DAFB_GFb<<24)++((_sVidParms_DAFB_GF-*)**$00FFFFFF)
01550
01550                          					OSLstEntry	sRsrc_Vid_DAFB_PALSTa,_sVidParms_DAFB_PALST 				; PAL safe title
01550   9A00 12FE             1	  				DC.L		(sRsrc_Vid_DAFB_PALSTa<<24)++((_sVidParms_DAFB_PALST-*)**$00FFFFFF)
01554                          					OSLstEntry	sRsrc_Vid_DAFB_PALSTb,_sVidParms_DAFB_PALST 				;
01554   9B00 12FA             1	  				DC.L		(sRsrc_Vid_DAFB_PALSTb<<24)++((_sVidParms_DAFB_PALST-*)**$00FFFFFF)
01558                          					OSLstEntry	sRsrc_Vid_DAFB_PALFFa,_sVidParms_DAFB_PALFF 				; PAL full frame
01558   9C00 149C             1	  				DC.L		(sRsrc_Vid_DAFB_PALFFa<<24)++((_sVidParms_DAFB_PALFF-*)**$00FFFFFF)
0155C                          					OSLstEntry	sRsrc_Vid_DAFB_PALFFb,_sVidParms_DAFB_PALFF 				;
0155C   9D00 1498             1	  				DC.L		(sRsrc_Vid_DAFB_PALFFb<<24)++((_sVidParms_DAFB_PALFF-*)**$00FFFFFF)
01560                          					OSLstEntry	sRsrc_Vid_DAFB_PALconvST,_sVidParms_DAFB_PALconvST			; PAL safe title, convolve
01560   9E00 163A             1	  				DC.L		(sRsrc_Vid_DAFB_PALconvST<<24)++((_sVidParms_DAFB_PALconvST-*)**$00FFFFFF)
01564                          					OSLstEntry	sRsrc_Vid_DAFB_PALconvFF,_sVidParms_DAFB_PALconvFF			; PAL full frame, convolve
01564   A000 1758             1	  				DC.L		(sRsrc_Vid_DAFB_PALconvFF<<24)++((_sVidParms_DAFB_PALconvFF-*)**$00FFFFFF)
01568
01568                          					OSLstEntry	sRsrc_Vid_DAFB_19a,_sVidParms_DAFB_19						; 19Ó Display
01568   A200 1876             1	  				DC.L		(sRsrc_Vid_DAFB_19a<<24)++((_sVidParms_DAFB_19-*)**$00FFFFFF)
0156C                          					OSLstEntry	sRsrc_Vid_DAFB_19b,_sVidParms_DAFB_19						;
0156C   A300 1872             1	  				DC.L		(sRsrc_Vid_DAFB_19b<<24)++((_sVidParms_DAFB_19-*)**$00FFFFFF)
01570
01570                          					DatLstEntry	EndOfList,0
01570   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
01574
01574                          	;
01574                          	; Full Page Display parameters
01574                          	;
01574                          	_sVidParms_DAFB_FP
01574   0000 0122              					DC.L		_EndsVidParms_DAFB_FP-_sVidParms_DAFB_FP		; block size
01578
01578                          	; Clock chip parms
01578                          	;
01578                          	ClkStart
01578   0E 07 00 00 06         					DC.B		$0E,$07,$00,$00,$06,$01,$00,$00					; Clock chip parms
01580   00 01 05 06 04         					DC.B		$00,$01,$05,$06,$04,$01,$00,$00					;
01588                          	ClkEnd
01588
01588                          	; Misc params
01588                          	;
01588                          	MiscStart
01588   83 83                  					Dc.b		FourthVidMode,FourthVidMode						; MaxMode a == b
0158A   0000 1000              					Dc.l		DAFBStdOffset									; FrameBase
0158E                          	MiscEnd
0158E
0158E                          	; One bit mode parameters
0158E                          	;
0158E                          	DepthStart
0158E   0008 0000 0080         					DC.W		$0008,$0000,$0080,$060E,$0010					; DAFB parms
01598   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
015A6   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
015B6   0058 0724 072A         					DC.W		$0058,$0724,$072A,$001A							;
015BE   00A0                   					DC.W		$00A0											; ACDC parms
015C0                          	DepthEnd
015C0                          	ScreenStart
015C0   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
015C2   0009                   					DC.W		((defmBounds_RFP*1)/64)-1						; ActiveWidth
015C4   0000                   					DC.W		0												; BorderHeight
015C6   FFFF                   					DC.W		0-1												; BorderWidth
015C8   0000                   					DC.W		0												; BorderSide
015CA   01B0                   					DC.W		(DAFB_512_RB-((defmBounds_RFP*1)/8))			; SkipFactor
015CC   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
015D0                          	ScreenEnd
015D0
015D0                          	; Two bit mode parameters
015D0                          	;
015D0   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0606,$0010					; DAFB parms
015DA   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
015E8   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
015F8   0058 0724 072A         					DC.W		$0058,$0724,$072A,$0032							;
01600   00A8                   					DC.W		$00A8											; ACDC parms
01602
01602   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
01604   0013                   					DC.W		((defmBounds_RFP*2)/64)-1						; ActiveWidth
01606   0000                   					DC.W		0												; BorderHeight
01608   FFFF                   					DC.W		0-1												; BorderWidth
0160A   0000                   					DC.W		0												; BorderSide
0160C   0160                   					DC.W		(DAFB_512_RB-((defmBounds_RFP*2)/8))			; SkipFactor
0160E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01612
01612                          	; Four bit mode parameters
01612                          	;
01612   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0602,$0010					; DAFB parms
0161C   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
0162A   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
0163A   0058 0724 072A         					DC.W		$0058,$0724,$072A,$003E							;
01642   00B0                   					DC.W		$00B0											; ACDC parms
01644
01644   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
01646   0027                   					DC.W		((defmBounds_RFP*4)/64)-1						; ActiveWidth
01648   0000                   					DC.W		0												; BorderHeight
0164A   FFFF                   					DC.W		0-1												; BorderWidth
0164C   0000                   					DC.W		0												; BorderSide
0164E   00C0                   					DC.W		(DAFB_512_RB-((defmBounds_RFP*4)/8))			; SkipFactor
01650   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01654
01654                          	; Eight bit mode parameters
01654                          	;
01654   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0600,$0010					; DAFB parms
0165E   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
0166C   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
0167C   0058 0724 072A         					DC.W		$0058,$0724,$072A,$0044							;
01684   00B8                   					DC.W		$00B8											; ACDC parms
01686
01686   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
01688   004F                   					DC.W		((defmBounds_RFP*8)/64)-1						; ActiveWidth
0168A   0000                   					DC.W		0												; BorderHeight
0168C   FFFF                   					DC.W		0-1												; BorderWidth
0168E   0000                   					DC.W		0												; BorderSide
01690   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RFP*8)/8))			; SkipFactor
01692   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01696
01696                          	_EndsVidParms_DAFB_FP
01696
01696                          	;
01696                          	; Vid Param Entry Table Size Equates
01696                          	;
01696   0000 0010              	ClockSize		EQU			ClkEnd-ClkStart									; Size of Clock params.
01696   0000 0006              	MiscSize		EQU			MiscEnd-MiscStart								; Size of Misc params.
01696   0000 0032              	DepthSize		EQU			DepthEnd-DepthStart								; Size of Depth params.
01696   0000 0010              	ScreenSize		EQU			ScreenEnd-ScreenStart							; Size of Screen params.
01696
01696   0000 0010              	MiscOffset		Equ			MiscStart-ClkStart								; Offset to Misc param.
01696   0000 0012              	MiscBaseAddr	Equ			MiscOffset+2									; Offset to defmBaseOffset.
01696   0000 0048              	SCParamsOffset	Equ			ScreenStart-ClkStart							; Offset to 1bpp Screen params.
01696
01696                          	;
01696                          	; RGB Portrait Display parameters
01696                          	;
01696                          	_sVidParms_DAFB_FPRGB
01696   0000 0164              					DC.L		_EndsVidParms_DAFB_FPRGB-_sVidParms_DAFB_FPRGB	; block size
0169A
0169A                          	; Clock chip parms
0169A                          	;
0169A   0E 07 00 00 06         					DC.B		$0E,$07,$00,$00,$06,$01,$00,$00					; Clock chip parms
016A2   00 01 05 06 04         					DC.B		$00,$01,$05,$06,$04,$01,$00,$00					;
016AA
016AA                          	; Misc params
016AA                          	;
016AA   83 84                  					Dc.b		FourthVidMode,FifthVidMode						; MaxMode a,b
016AC   0000 1000              					Dc.l		DAFBStdOffset									; FrameBase
016B0
016B0
016B0                          	; One bit mode parameters
016B0                          	;
016B0   0008 0000 0080         					DC.W		$0008,$0000,$0080,$060E,$0010					; DAFB parms
016BA   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
016C8   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
016D8   0058 0724 072A         					DC.W		$0058,$0724,$072A,$001A							;
016E0   00A0                   					DC.W		$00A0											; ACDC parms
016E2
016E2   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
016E4   0009                   					DC.W		((defmBounds_RFP*1)/64)-1						; ActiveWidth
016E6   0000                   					DC.W		0												; BorderHeight
016E8   FFFF                   					DC.W		0-1												; BorderWidth
016EA   0000                   					DC.W		0												; BorderSide
016EC   01B0                   					DC.W		(DAFB_512_RB-((defmBounds_RFP*1)/8))			; SkipFactor
016EE   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
016F2
016F2                          	; Two bit mode parameters
016F2                          	;
016F2   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0606,$0010					; DAFB parms
016FC   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
0170A   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
0171A   0058 0724 072A         					DC.W		$0058,$0724,$072A,$0032							;
01722   00A8                   					DC.W		$00A8											; ACDC parms
01724
01724   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
01726   0013                   					DC.W		((defmBounds_RFP*2)/64)-1						; ActiveWidth
01728   0000                   					DC.W		0												; BorderHeight
0172A   FFFF                   					DC.W		0-1												; BorderWidth
0172C   0000                   					DC.W		0												; BorderSide
0172E   0160                   					DC.W		(DAFB_512_RB-((defmBounds_RFP*2)/8))			; SkipFactor
01730   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01734
01734                          	; Four bit mode parameters
01734                          	;
01734   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0602,$0010					; DAFB parms
0173E   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
0174C   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
0175C   0058 0724 072A         					DC.W		$0058,$0724,$072A,$003E							;
01764   00B0                   					DC.W		$00B0											; ACDC parms
01766
01766   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
01768   0027                   					DC.W		((defmBounds_RFP*4)/64)-1						; ActiveWidth
0176A   0000                   					DC.W		0												; BorderHeight
0176C   FFFF                   					DC.W		0-1												; BorderWidth
0176E   0000                   					DC.W		0												; BorderSide
01770   00C0                   					DC.W		(DAFB_512_RB-((defmBounds_RFP*4)/8))			; SkipFactor
01772   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01776
01776                          	; Eight bit mode parameters
01776                          	;
01776   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0600,$0010					; DAFB parms
01780   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
0178E   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
0179E   0058 0724 072A         					DC.W		$0058,$0724,$072A,$0044							;
017A6   00B8                   					DC.W		$00B8											; ACDC parms
017A8
017A8   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
017AA   004F                   					DC.W		((defmBounds_RFP*8)/64)-1						; ActiveWidth
017AC   0000                   					DC.W		0												; BorderHeight
017AE   FFFF                   					DC.W		0-1												; BorderWidth
017B0   0000                   					DC.W		0												; BorderSide
017B2   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RFP*8)/8))			; SkipFactor
017B4   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
017B8
017B8                          	; Sixteen bit mode parameters
017B8
017B8   0008 0000 0200         					DC.W		$0008,$0000,$0200,$06FF,$0011					; DAFB parms
017C2   0FF2 0176 00D0         					DC.W		$0FF2,$0176,$00D0,$0014,$019F,$0027,$002D		; Swatch parms
017D0   003F 0048 0188         					DC.W		$003F,$0048,$0188,$019E,$072C,$072A,$0004,$0009	;
017E0   0058 0724 072A         					DC.W		$0058,$0724,$072A,$0047							;
017E8   00BE                   					DC.W		$00BE											; ACDC parms
017EA
017EA   0365                   					DC.W		defmBounds_BFP-1								; ActiveHeight
017EC   009F                   					DC.W		((defmBounds_RFP*16)/64)-1						; ActiveWidth
017EE   0000                   					DC.W		0												; BorderHeight
017F0   FFFF                   					DC.W		0-1												; BorderWidth
017F2   0000                   					DC.W		0												; BorderSide
017F4   0300                   					DC.W		(DAFB_2048_RB-((defmBounds_RFP*16)/8))			; SkipFactor
017F6   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
017FA
017FA                          	_EndsVidParms_DAFB_FPRGB
017FA
017FA                          	;
017FA                          	; Rubik DAFB parameters
017FA                          	;
017FA                          	_sVidParms_DAFB_GS
017FA   0000 01A6              					DC.L		_EndsVidParms_DAFB_GS-_sVidParms_DAFB_GS		; block size
017FE
017FE                          	; Clock chip parms
017FE   0E 05 00 00 0F         					DC.B		$0E,$05,$00,$00,$0F,$00,$00,$00					; Clock chip parms
01806   00 03 05 06 04         					DC.B		$00,$03,$05,$06,$04,$01,$00,$00					;
0180E
0180E                          	; Misc params
0180E                          	;
0180E   85 85                  					Dc.b		SixthVidMode,SixthVidMode						; MaxMode a,b
01810   0000 1000              					Dc.l		DAFBStdOffset									; FrameBase
01814
01814                          	; One bit mode parameters
01814                          	;
01814   0007 0000 0100         					DC.W		$0007,$0000,$0100,$061E,$0050					; DAFB parms
0181E   0FF2 025E 0140         					DC.W		$0FF2,$025E,$0140,$0010,$027F,$001F,$002B		; Swatch parms
0182C   004F 0063 0263         					DC.W		$004F,$0063,$0263,$027E,$032E,$032C,$0004,$0009	;
0183C   0028 032A 032B         					DC.W		$0028,$032A,$032B,$0005							;
01844   0080                   					DC.W		$0080											; ACDC parms
01846
01846   017F                   					DC.W		defmBounds_BGS-1								; ActiveHeight
01848   0007                   					DC.W		((defmBounds_RGS*1)/64)-1						; ActiveWidth
0184A   0000                   					DC.W		0												; BorderHeight
0184C   FFFF                   					DC.W		0-1												; BorderWidth
0184E   0000                   					DC.W		0												; BorderSide
01850   03C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RGS*1)/8))			; SkipFactor
01852   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01856
01856                          	; Two bit mode parameters
01856                          	;
01856   0008 0000 0100         					DC.W		$0008,$0000,$0100,$060E,$0050					; DAFB parms
01860   0FF2 025E 0140         					DC.W		$0FF2,$025E,$0140,$0010,$027F,$001F,$002B		; Swatch parms
0186E   004F 0063 0263         					DC.W		$004F,$0063,$0263,$027E,$032E,$032C,$0004,$0009	;
0187E   002A 032A 032B         					DC.W		$002A,$032A,$032B,$0035							;
01886   0088                   					DC.W		$0088											; ACDC parms
01888
01888   017F                   					DC.W		defmBounds_BGS-1								; ActiveHeight
0188A   000F                   					DC.W		((defmBounds_RGS*2)/64)-1						; ActiveWidth
0188C   0000                   					DC.W		0												; BorderHeight
0188E   FFFF                   					DC.W		0-1												; BorderWidth
01890   0000                   					DC.W		0												; BorderSide
01892   0380                   					DC.W		(DAFB_1024_RB-((defmBounds_RGS*2)/8))			; SkipFactor
01894   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01898
01898                          	; Four bit mode parameters
01898                          	;
01898   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0606,$0050					; DAFB parms
018A2   0FF2 025E 0140         					DC.W		$0FF2,$025E,$0140,$0010,$027F,$001F,$002B		; Swatch parms
018B0   004F 0063 0263         					DC.W		$004F,$0063,$0263,$027E,$032E,$032C,$0004,$0009	;
018C0   002A 032A 032B         					DC.W		$002A,$032A,$032B,$004D							;
018C8   0090                   					DC.W		$0090											; ACDC parms
018CA
018CA   017F                   					DC.W		defmBounds_BGS-1								; ActiveHeight
018CC   001F                   					DC.W		((defmBounds_RGS*4)/64)-1						; ActiveWidth
018CE   0000                   					DC.W		0												; BorderHeight
018D0   FFFF                   					DC.W		0-1												; BorderWidth
018D2   0000                   					DC.W		0												; BorderSide
018D4   0300                   					DC.W		(DAFB_1024_RB-((defmBounds_RGS*4)/8))			; SkipFactor
018D6   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
018DA
018DA                          	; Eight bit mode parameters
018DA                          	;
018DA   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0602,$0050					; DAFB parms
018E4   0FF2 025E 0140         					DC.W		$0FF2,$025E,$0140,$0010,$027F,$001F,$002B		; Swatch parms
018F2   004F 0063 0263         					DC.W		$004F,$0063,$0263,$027E,$032E,$032C,$0004,$0009	;
01902   002A 032A 032B         					DC.W		$002A,$032A,$032B,$0059							;
0190A   0098                   					DC.W		$0098											; ACDC parms
0190C
0190C   017F                   					DC.W		defmBounds_BGS-1								; ActiveHeight
0190E   003F                   					DC.W		((defmBounds_RGS*8)/64)-1						; ActiveWidth
01910   0000                   					DC.W		0												; BorderHeight
01912   FFFF                   					DC.W		0-1												; BorderWidth
01914   0000                   					DC.W		0												; BorderSide
01916   0200                   					DC.W		(DAFB_1024_RB-((defmBounds_RGS*8)/8))			; SkipFactor
01918   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0191C
0191C                          	; Sixteen bit mode parameters
0191C                          	;
0191C   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0600,$0050					; DAFB parms
01926   0FF2 025E 0140         					DC.W		$0FF2,$025E,$0140,$0010,$027F,$001F,$002B		; Swatch parms
01934   004F 0063 0263         					DC.W		$004F,$0063,$0263,$027E,$032E,$032C,$0004,$0009	;
01944   002A 032A 032B         					DC.W		$002A,$032A,$032B,$005F							;
0194C   009E                   					DC.W		$009E											; ACDC parms
0194E
0194E   017F                   					DC.W		defmBounds_BGS-1								; ActiveHeight
01950   007F                   					DC.W		((defmBounds_RGS*16)/64)-1						; ActiveWidth
01952   0000                   					DC.W		0												; BorderHeight
01954   FFFF                   					DC.W		0-1												; BorderWidth
01956   0000                   					DC.W		0												; BorderSide
01958   0000                   					DC.W		(DAFB_1024_RB-((defmBounds_RGS*16)/8))			; SkipFactor
0195A   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0195E
0195E                          	; Thirty two bit mode parameters
0195E                          	;
0195E   0008 0000 0200         					DC.W		$0008,$0000,$0200,$06FF,$0050					; DAFB parms
01968   0FF2 025E 0140         					DC.W		$0FF2,$025E,$0140,$0010,$027F,$001F,$002B		; Swatch parms
01976   004F 0063 0263         					DC.W		$004F,$0063,$0263,$027E,$032E,$032C,$0004,$0009	;
01986   002A 032A 032B         					DC.W		$002A,$032A,$032B,$0063							;
0198E   009C                   					DC.W		$009C											; ACDC parms
01990
01990   017F                   					DC.W		defmBounds_BGS-1								; ActiveHeight
01992   00FF                   					DC.W		((defmBounds_RGS*32)/64)-1						; ActiveWidth
01994   0000                   					DC.W		0												; BorderHeight
01996   FFFF                   					DC.W		0-1												; BorderWidth
01998   0000                   					DC.W		0												; BorderSide
0199A   0000                   					DC.W		(DAFB_2048_RB-((defmBounds_RGS*32)/8))			; SkipFactor
0199C   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
019A0
019A0                          	_EndsVidParms_DAFB_GS
019A0
019A0                          	;
019A0                          	; Two-Page Display parameters
019A0                          	;
019A0                          	_sVidParms_DAFB_2P
019A0   0000 0122              					DC.L		_EndsVidParms_DAFB_2P-_sVidParms_DAFB_2P		; block size
019A4
019A4                          	; Clock chip parms
019A4                          	;
019A4   0E 0B 00 00 03         					DC.B		$0E,$0B,$00,$00,$03,$01,$00,$00					; Clock chip parms
019AC   00 01 05 06 04         					DC.B		$00,$01,$05,$06,$04,$01,$00,$00					;
019B4
019B4                          	; Misc params
019B4                          	;
019B4   83 83                  					Dc.b		FourthVidMode,FourthVidMode						; MaxMode a == b
019B6   0000 0A00              					Dc.l		DAFB2POffset									; FrameBase
019BA
019BA                          	; One bit mode parameters
019BA                          	;
019BA   0005 0000 0090         					DC.W		$0005,$0000,$0090,$0406,$0010					; DAFB parms
019C4   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
019D2   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
019E2   0052 071E 0722         					DC.W		$0052,$071E,$0722,$0029							;
019EA   00C0                   					DC.W		$00C0											; ACDC parms
019EC
019EC   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
019EE   0011                   					DC.W		((defmBounds_R2P*1)/64)-1						; ActiveWidth
019F0   0000                   					DC.W		0												; BorderHeight
019F2   FFFF                   					DC.W		0-1												; BorderWidth
019F4   0000                   					DC.W		0												; BorderSide
019F6   01B0                   					DC.W		(DAFB_576_RB-((defmBounds_R2P*1)/8))			; SkipFactor
019F8   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
019FC
019FC                          	; Two bit mode parameters
019FC                          	;
019FC   0005 0000 0090         					DC.W		$0005,$0000,$0090,$0402,$0010					; DAFB parms
01A06   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01A14   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01A24   0052 071E 0722         					DC.W		$0052,$071E,$0722,$0035							;
01A2C   00C8                   					DC.W		$00C8											; ACDC parms
01A2E
01A2E   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01A30   0023                   					DC.W		((defmBounds_R2P*2)/64)-1						; ActiveWidth
01A32   0000                   					DC.W		0												; BorderHeight
01A34   FFFF                   					DC.W		0-1												; BorderWidth
01A36   0000                   					DC.W		0												; BorderSide
01A38   0120                   					DC.W		(DAFB_576_RB-((defmBounds_R2P*2)/8))			; SkipFactor
01A3A   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01A3E
01A3E                          	; Four bit mode parameters
01A3E                          	;
01A3E   0005 0000 0090         					DC.W		$0005,$0000,$0090,$0400,$0010					; DAFB parms
01A48   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01A56   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01A66   0052 071E 0722         					DC.W		$0052,$071E,$0722,$003B							;
01A6E   00D0                   					DC.W		$00D0											; ACDC parms
01A70
01A70   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01A72   0047                   					DC.W		((defmBounds_R2P*4)/64)-1						; ActiveWidth
01A74   0000                   					DC.W		0												; BorderHeight
01A76   FFFF                   					DC.W		0-1												; BorderWidth
01A78   0000                   					DC.W		0												; BorderSide
01A7A   0000                   					DC.W		(DAFB_576_RB-((defmBounds_R2P*4)/8))			; SkipFactor
01A7C   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01A80
01A80                          	; Eight bit mode parameters
01A80                          	;
01A80   0005 0000 0120         					DC.W		$0005,$0000,$0120,$4FF,$0011					; DAFB parms
01A8A   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01A98   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01AA8   0052 071E 0722         					DC.W		$0052,$071E,$0722,$003E							;
01AB0   00D8                   					DC.W		$00D8											; ACDC parms
01AB2
01AB2   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01AB4   008F                   					DC.W		((defmBounds_R2P*8)/64)-1						; ActiveWidth
01AB6   0000                   					DC.W		0												; BorderHeight
01AB8   FFFF                   					DC.W		0-1												; BorderWidth
01ABA   0000                   					DC.W		0												; BorderSide
01ABC   0000                   					DC.W		(DAFB_1152_RB-((defmBounds_R2P*8)/8))			; SkipFactor
01ABE   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01AC2
01AC2                          	_EndsVidParms_DAFB_2P
01AC2
01AC2                          	;
01AC2                          	; Vesuvio Display parameters
01AC2                          	;
01AC2                          	_sVidParms_DAFB_2PRGB
01AC2   0000 0164              					DC.L		_EndsVidParms_DAFB_2PRGB-_sVidParms_DAFB_2PRGB	; block size
01AC6
01AC6                          	; Clock chip parms
01AC6                          	;
01AC6                          	;jwh				DC.B		$0E,$0B,$00,$00,$06,$02,$00,$00					; Clock chip parms
01AC6                          	;jwh				DC.B		$00,$00,$05,$06,$04,$01,$00,$00					;
01AC6   0E 0B 00 00 03         					DC.B		$0E,$0B,$00,$00,$03,$01,$00,$00					; Clock chip parms
01ACE   00 01 05 06 04         					DC.B		$00,$01,$05,$06,$04,$01,$00,$00					;
01AD6
01AD6                          	; Misc params
01AD6                          	;
01AD6   83 84                  					Dc.b		FourthVidMode,FifthVidMode						; MaxMode a,b
01AD8   0000 0A00              					Dc.l		DAFB2POffset									; FrameBase
01ADC
01ADC                          	; One bit mode parameters
01ADC                          	;
01ADC   0005 0000 0090         					DC.W		$0005,$0000,$0090,$0406,$0010					; DAFB parms
01AE6   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01AF4   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01B04   0052 071E 0722         					DC.W		$0052,$071E,$0722,$0029							;
01B0C   00C0                   					DC.W		$00C0											; ACDC parms
01B0E
01B0E   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01B10   0011                   					DC.W		((defmBounds_R2P*1)/64)-1						; ActiveWidth
01B12   0000                   					DC.W		0												; BorderHeight
01B14   FFFF                   					DC.W		0-1												; BorderWidth
01B16   0000                   					DC.W		0												; BorderSide
01B18   01B0                   					DC.W		(DAFB_576_RB-((defmBounds_R2P*1)/8))			; SkipFactor
01B1A   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01B1E
01B1E                          	; Two bit mode parameters
01B1E                          	;
01B1E   0005 0000 0090         					DC.W		$0005,$0000,$0090,$0402,$0010					; DAFB parms
01B28   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01B36   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01B46   0052 071E 0722         					DC.W		$0052,$071E,$0722,$0035							;
01B4E   00C8                   					DC.W		$00C8											; ACDC parms
01B50
01B50   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01B52   0023                   					DC.W		((defmBounds_R2P*2)/64)-1						; ActiveWidth
01B54   0000                   					DC.W		0												; BorderHeight
01B56   FFFF                   					DC.W		0-1												; BorderWidth
01B58   0000                   					DC.W		0												; BorderSide
01B5A   0120                   					DC.W		(DAFB_576_RB-((defmBounds_R2P*2)/8))			; SkipFactor
01B5C   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01B60
01B60                          	; Four bit mode parameters
01B60                          	;
01B60   0005 0000 0090         					DC.W		$0005,$0000,$0090,$0400,$0010					; DAFB parms
01B6A   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01B78   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01B88   0052 071E 0722         					DC.W		$0052,$071E,$0722,$003B							;
01B90   00D0                   					DC.W		$00D0											; ACDC parms
01B92
01B92   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01B94   0047                   					DC.W		((defmBounds_R2P*4)/64)-1						; ActiveWidth
01B96   0000                   					DC.W		0												; BorderHeight
01B98   FFFF                   					DC.W		0-1												; BorderWidth
01B9A   0000                   					DC.W		0												; BorderSide
01B9C   0000                   					DC.W		(DAFB_576_RB-((defmBounds_R2P*4)/8))			; SkipFactor
01B9E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01BA2
01BA2                          	; Eight bit mode parameters
01BA2                          	;
01BA2   0005 0000 0120         					DC.W		$0005,$0000,$0120,$4FF,$0011					; DAFB parms
01BAC   0FF2 014A 00B6         					DC.W		$0FF2,$014A,$00B6,$0010,$016B,$001F,$0022		; Swatch parms
01BBA   002B 003F 015F         					DC.W		$002B,$003F,$015F,$016A,$0726,$0724,$0004,$0009	;
01BCA   0052 071E 0722         					DC.W		$0052,$071E,$0722,$003E							;
01BD2   00D8                   					DC.W		$00D8											; ACDC parms
01BD4
01BD4   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01BD6   008F                   					DC.W		((defmBounds_R2P*8)/64)-1						; ActiveWidth
01BD8   0000                   					DC.W		0												; BorderHeight
01BDA   FFFF                   					DC.W		0-1												; BorderWidth
01BDC   0000                   					DC.W		0												; BorderSide
01BDE   0000                   					DC.W		(DAFB_1152_RB-((defmBounds_R2P*8)/8))			; SkipFactor
01BE0   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01BE4
01BE4                          	; Sixteen bit mode parameters
01BE4                          	;
01BE4   0005 0000 0240         					DC.W		$0005,$0000,$0240,$4FF,$0011					; DAFB parms
01BEE   0FF2 0294 016C         					DC.W		$0FF2,$0294,$016C,$0020,$02D7,$003F,$0045		; Swatch parms
01BFC   0057 0081 02C1         					DC.W		$0057,$0081,$02C1,$02D6,$0726,$0724,$0004,$0009	;
01C0C   0052 071E 0722         					DC.W		$0052,$071E,$0722,$0080							;
01C14   00BE                   					DC.W		$00BE											; ACDC parms
01C16
01C16   0365                   					DC.W		defmBounds_B2P-1								; ActiveHeight
01C18   011F                   					DC.W		((defmBounds_R2P*16)/64)-1						; ActiveWidth
01C1A   0000                   					DC.W		0												; BorderHeight
01C1C   FFFF                   					DC.W		0-1												; BorderWidth
01C1E   0000                   					DC.W		0												; BorderSide
01C20   0000                   					DC.W		(DAFB_2304_RB-((defmBounds_R2P*16)/8))			; SkipFactor
01C22   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01C26
01C26                          	_EndsVidParms_DAFB_2PRGB
01C26
01C26                          	;
01C26                          	; Goldfish Display parameters
01C26                          	;
01C26                          	_sVidParms_DAFB_GF
01C26   0000 01A6              					DC.L		_EndsVidParms_DAFB_GF-_sVidParms_DAFB_GF		; block size
01C2A
01C2A                          	; Clock chip parms
01C2A                          	;
01C2A   0E 07 00 00 0B         					DC.B		$0E,$07,$00,$00,$0B,$00,$00,$00					; Clock chip parms
01C32   00 02 05 06 04         					DC.B		$00,$02,$05,$06,$04,$01,$00,$00					;
01C3A
01C3A                          	; Misc params
01C3A                          	;
01C3A   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
01C3C   0000 0E00              					Dc.l		DAFBBSOffset									; FrameBase
01C40
01C40                          	; One bit mode parameters
01C40                          	;
01C40   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$060E,$0010					; DAFB parms
01C4A   0FF2 021E 0120         					DC.W		$0FF2,$021E,$0120,$0010,$023F,$001F,$0025		; Swatch parms
01C58   0037 0089 0229         					DC.W		$0037,$0089,$0229,$023E,$0536,$0534,$0004,$0009	;
01C68   0052 0532 0533         					DC.W		$0052,$0532,$0533,$005B							;
01C70   00A0                   					DC.W		$00A0											; ACDC parms
01C72
01C72   026F                   					DC.W		defmBounds_BGF-1								; ActiveHeight
01C74   000C                   					DC.W		((defmBounds_RGF*1)/64)-1						; ActiveWidth
01C76   0000                   					DC.W		0												; BorderHeight
01C78   FFFF                   					DC.W		0-1												; BorderWidth
01C7A   0000                   					DC.W		0												; BorderSide
01C7C   02D8                   					DC.W		(DAFB_832_RB-((defmBounds_RGF*1)/8))			; SkipFactor
01C7E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01C82
01C82                          	; Two bit mode parameters
01C82                          	;
01C82   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$0606,$0010					; DAFB parms
01C8C   0FF2 021E 0120         					DC.W		$0FF2,$021E,$0120,$0010,$023F,$001F,$0025		; Swatch parms
01C9A   0037 0089 0229         					DC.W		$0037,$0089,$0229,$023E,$0536,$0534,$0004,$0009	;
01CAA   0052 0532 0533         					DC.W		$0052,$0532,$0533,$0073							;
01CB2   00A8                   					DC.W		$00A8											; ACDC parms
01CB4
01CB4   026F                   					DC.W		defmBounds_BGF-1								; ActiveHeight
01CB6   0019                   					DC.W		((defmBounds_RGF*2)/64)-1						; ActiveWidth
01CB8   0000                   					DC.W		0												; BorderHeight
01CBA   FFFF                   					DC.W		0-1												; BorderWidth
01CBC   0000                   					DC.W		0												; BorderSide
01CBE   0270                   					DC.W		(DAFB_832_RB-((defmBounds_RGF*2)/8))			; SkipFactor
01CC0   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01CC4
01CC4                          	; Four bit mode parameters
01CC4                          	;
01CC4   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$0602,$0010					; DAFB parms
01CCE   0FF2 021E 0120         					DC.W		$0FF2,$021E,$0120,$0010,$023F,$001F,$0025		; Swatch parms
01CDC   0037 0089 0229         					DC.W		$0037,$0089,$0229,$023E,$0536,$0534,$0004,$0009	;
01CEC   0052 0532 0533         					DC.W		$0052,$0532,$0533,$007F							;
01CF4   00B0                   					DC.W		$00B0											; ACDC parms
01CF6
01CF6   026F                   					DC.W		defmBounds_BGF-1								; ActiveHeight
01CF8   0033                   					DC.W		((defmBounds_RGF*4)/64)-1						; ActiveWidth
01CFA   0000                   					DC.W		0												; BorderHeight
01CFC   FFFF                   					DC.W		0-1												; BorderWidth
01CFE   0000                   					DC.W		0												; BorderSide
01D00   01A0                   					DC.W		(DAFB_832_RB-((defmBounds_RGF*4)/8))			; SkipFactor
01D02   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01D06
01D06                          	; Eight bit mode parameters
01D06                          	;
01D06   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$0600,$0010					; DAFB parms
01D10   0FF2 021E 0120         					DC.W		$0FF2,$021E,$0120,$0010,$023F,$001F,$0025		; Swatch parms
01D1E   0037 0089 0229         					DC.W		$0037,$0089,$0229,$023E,$0536,$0534,$0004,$0009	;
01D2E   0052 0532 0533         					DC.W		$0052,$0532,$0533,$0085							;
01D36   00B8                   					DC.W		$00B8											; ACDC parms
01D38
01D38   026F                   					DC.W		defmBounds_BGF-1								; ActiveHeight
01D3A   0067                   					DC.W		((defmBounds_RGF*8)/64)-1						; ActiveWidth
01D3C   0000                   					DC.W		0												; BorderHeight
01D3E   FFFF                   					DC.W		0-1												; BorderWidth
01D40   0000                   					DC.W		0												; BorderSide
01D42   0000                   					DC.W		(DAFB_832_RB-((defmBounds_RGF*8)/8))			; SkipFactor
01D44   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01D48
01D48                          	; Sixteen bit mode parameters
01D48                          	;
01D48   0007 0000 01A0         					DC.W		$0007,$0000,$01A0,$06FF,$0011					; DAFB parms
01D52   0FF2 021E 0120         					DC.W		$0FF2,$021E,$0120,$0010,$023F,$001F,$0025		; Swatch parms
01D60   0037 0089 0229         					DC.W		$0037,$0089,$0229,$023E,$0536,$0534,$0004,$0009	;
01D70   0052 0532 0533         					DC.W		$0052,$0532,$0533,$0088							;
01D78   00BE                   					DC.W		$00BE											; ACDC parms
01D7A
01D7A   026F                   					DC.W		defmBounds_BGF-1								; ActiveHeight
01D7C   00CF                   					DC.W		((defmBounds_RGF*16)/64)-1						; ActiveWidth
01D7E   0000                   					DC.W		0												; BorderHeight
01D80   FFFF                   					DC.W		0-1												; BorderWidth
01D82   0000                   					DC.W		0												; BorderSide
01D84   0000                   					DC.W		(DAFB_1664_RB-((defmBounds_RGF*16)/8))			; SkipFactor
01D86   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01D8A
01D8A                          	; Thirty Two bit mode parameters
01D8A                          	;
01D8A   0007 0000 0340         					DC.W		$0007,$0000,$0340,$0000,$0011					; DAFB parms
01D94   0FF2 043E 0240         					DC.W		$0FF2,$043E,$0240,$0020,$047F,$003F,$004B		; Swatch parms
01DA2   006F 0113 0453         					DC.W		$006F,$0113,$0453,$047E,$0536,$0534,$0004,$0009	;
01DB2   0052 0532 0533         					DC.W		$0052,$0532,$0533,$0113							;
01DBA   003C                   					DC.W		$003C											; ACDC parms
01DBC
01DBC   026F                   					DC.W		defmBounds_BGF-1								; ActiveHeight
01DBE   019F                   					DC.W		((defmBounds_RGF*32)/64)-1						; ActiveWidth
01DC0   0000                   					DC.W		0												; BorderHeight
01DC2   FFFF                   					DC.W		0-1												; BorderWidth
01DC4   0000                   					DC.W		0												; BorderSide
01DC6   0000                   					DC.W		(DAFB_3328_RB-((defmBounds_RGF*32)/8))			; SkipFactor
01DC8   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01DCC
01DCC                          	_EndsVidParms_DAFB_GF
01DCC
01DCC                          	;
01DCC                          	; Hi-Res Display parameters
01DCC                          	;
01DCC                          	_sVidParms_DAFB_HR
01DCC   0000 01A6              					DC.L		_EndsVidParms_DAFB_HR-_sVidParms_DAFB_HR		; block size
01DD0
01DD0                          	; Clock chip parms
01DD0                          	;
01DD0   0E 0F 00 00 05         					DC.B		$0E,$0F,$00,$00,$05,$01,$00,$00					; Clock chip parms
01DD8   00 03 05 06 04         					DC.B		$00,$03,$05,$06,$04,$01,$00,$00					;
01DE0
01DE0                          	; Misc params
01DE0                          	;
01DE0   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
01DE2   0000 1000              					Dc.l		DAFBStdOffset									; FrameBase
01DE6
01DE6                          	; One bit mode parameters
01DE6                          	;
01DE6   0008 0000 0100         					DC.W		$0008,$0000,$0100,$061E,$0030					; DAFB parms
01DF0   0FF2 031E 01B0         					DC.W		$0FF2,$031E,$01B0,$0020,$035F,$003F,$004B		; Swatch parms
01DFE   006F 0093 0313         					DC.W		$006F,$0093,$0313,$035E,$041A,$0418,$0004,$0009	;
01E0E   0052 0412 0416         					DC.W		$0052,$0412,$0416,$0035							;
01E16   0080                   					DC.W		$0080											; ACDC parms
01E18
01E18   01DF                   					DC.W		defmBounds_BHR-1								; ActiveHeight
01E1A   0009                   					DC.W		((defmBounds_RHR*1)/64)-1						; ActiveWidth
01E1C   0000                   					DC.W		0												; BorderHeight
01E1E   FFFF                   					DC.W		0-1												; BorderWidth
01E20   0000                   					DC.W		0												; BorderSide
01E22   03B0                   					DC.W		(DAFB_1024_RB-((defmBounds_RHR*1)/8))			; SkipFactor
01E24   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01E28
01E28                          	; Two bit mode parameters
01E28                          	;
01E28   0008 0000 0100         					DC.W		$0008,$0000,$0100,$060E,$0030					; DAFB parms
01E32   0FF2 031E 01B0         					DC.W		$0FF2,$031E,$01B0,$0020,$035F,$003F,$004B		; Swatch parms
01E40   006F 0093 0313         					DC.W		$006F,$0093,$0313,$035E,$041A,$0418,$0004,$0009	;
01E50   0052 0412 0416         					DC.W		$0052,$0412,$0416,$0065							;
01E58   0088                   					DC.W		$0088											; ACDC parms
01E5A
01E5A   01DF                   					DC.W		defmBounds_BHR-1								; ActiveHeight
01E5C   0013                   					DC.W		((defmBounds_RHR*2)/64)-1						; ActiveWidth
01E5E   0000                   					DC.W		0												; BorderHeight
01E60   FFFF                   					DC.W		0-1												; BorderWidth
01E62   0000                   					DC.W		0												; BorderSide
01E64   0360                   					DC.W		(DAFB_1024_RB-((defmBounds_RHR*2)/8))			; SkipFactor
01E66   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01E6A
01E6A                          	; Four bit mode parameters
01E6A                          	;
01E6A   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0606,$0030					; DAFB parms
01E74   0FF2 031E 01B0         					DC.W		$0FF2,$031E,$01B0,$0020,$035F,$003F,$004B		; Swatch parms
01E82   006F 0093 0313         					DC.W		$006F,$0093,$0313,$035E,$041A,$0418,$0004,$0009	;
01E92   0052 0412 0416         					DC.W		$0052,$0412,$0416,$007D							;
01E9A   0090                   					DC.W		$0090											; ACDC parms
01E9C
01E9C   01DF                   					DC.W		defmBounds_BHR-1								; ActiveHeight
01E9E   0027                   					DC.W		((defmBounds_RHR*4)/64)-1						; ActiveWidth
01EA0   0000                   					DC.W		0												; BorderHeight
01EA2   FFFF                   					DC.W		0-1												; BorderWidth
01EA4   0000                   					DC.W		0												; BorderSide
01EA6   02C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RHR*4)/8))			; SkipFactor
01EA8   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01EAC
01EAC                          	; Eight bit mode parameters
01EAC                          	;
01EAC   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0602,$0030					; DAFB parms
01EB6   0FF2 031E 01B0         					DC.W		$0FF2,$031E,$01B0,$0020,$035F,$003F,$004B		; Swatch parms
01EC4   006F 0093 0313         					DC.W		$006F,$0093,$0313,$035E,$041A,$0418,$0004,$0009	;
01ED4   0052 0412 0416         					DC.W		$0052,$0412,$0416,$0089							;
01EDC   0098                   					DC.W		$0098											; ACDC parms
01EDE
01EDE   01DF                   					DC.W		defmBounds_BHR-1								; ActiveHeight
01EE0   004F                   					DC.W		((defmBounds_RHR*8)/64)-1						; ActiveWidth
01EE2   0000                   					DC.W		0												; BorderHeight
01EE4   FFFF                   					DC.W		0-1												; BorderWidth
01EE6   0000                   					DC.W		0												; BorderSide
01EE8   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RHR*8)/8))			; SkipFactor
01EEA   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01EEE
01EEE                          	; Sixteen bit mode parameters
01EEE                          	;
01EEE   0008 0000 0200         					DC.W		$0008,$0000,$0200,$0600,$0030					; DAFB parms
01EF8   0FF2 031E 01B0         					DC.W		$0FF2,$031E,$01B0,$0020,$035F,$003F,$004B		; Swatch parms
01F06   006F 0093 0313         					DC.W		$006F,$0093,$0313,$035E,$041A,$0418,$0004,$0009	;
01F16   0052 0412 0416         					DC.W		$0052,$0412,$0416,$008F							;
01F1E   009E                   					DC.W		$009E											; ACDC parms
01F20
01F20   01DF                   					DC.W		defmBounds_BHR-1								; ActiveHeight
01F22   009F                   					DC.W		((defmBounds_RHR*16)/64)-1						; ActiveWidth
01F24   0000                   					DC.W		0												; BorderHeight
01F26   FFFF                   					DC.W		0-1												; BorderWidth
01F28   0000                   					DC.W		0												; BorderSide
01F2A   0300                   					DC.W		(DAFB_2048_RB-((defmBounds_RHR*16)/8))			; SkipFactor
01F2C   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01F30
01F30                          	; Thirty Two bit mode parameters
01F30                          	;
01F30   0008 0000 0400         					DC.W		$0008,$0000,$0400,$06FF,$0032					; DAFB parms
01F3A   0FF2 031E 01B0         					DC.W		$0FF2,$031E,$01B0,$0020,$035F,$003F,$004B		; Swatch parms
01F48   006F 0093 0313         					DC.W		$006F,$0093,$0313,$035E,$041A,$0418,$0004,$0009	;
01F58   0052 0412 0416         					DC.W		$0052,$0412,$0416,$0093							;
01F60   009C                   					DC.W		$009C											; ACDC parms
01F62
01F62   01DF                   					DC.W		defmBounds_BHR-1								; ActiveHeight
01F64   013F                   					DC.W		((defmBounds_RHR*32)/64)-1						; ActiveWidth
01F66   0000                   					DC.W		0												; BorderHeight
01F68   FFFF                   					DC.W		0-1												; BorderWidth
01F6A   0000                   					DC.W		0												; BorderSide
01F6C   0600                   					DC.W		(DAFB_4096_RB-((defmBounds_RHR*32)/8))			; SkipFactor
01F6E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01F72
01F72                          	_EndsVidParms_DAFB_HR
01F72
01F72                          	;
01F72                          	; VGA Display parameters
01F72                          	;
01F72                          	_sVidParms_DAFB_VGA
01F72   0000 01A6              					DC.L		_EndsVidParms_DAFB_VGA-_sVidParms_DAFB_VGA		; block size
01F76
01F76                          	; Clock chip parms
01F76                          	;
01F76   0F 01 01 00 09         					DC.B		$0F,$01,$01,$00,$09,$03,$00,$00					; Clock chip parms
01F7E   00 02 05 06 04         					DC.B		$00,$02,$05,$06,$04,$01,$00,$00					;
01F86
01F86                          	; Misc params
01F86                          	;
01F86   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
01F88   0000 1000              					Dc.l		DAFBStdOffset									; FrameBase
01F8C
01F8C                          	; One bit mode parameters
01F8C                          	;
01F8C   0008 0000 0100         					DC.W		$0008,$0000,$0100,$061E,$0030					; DAFB parms
01F96   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B		; Swatch parms
01FA4   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007	;
01FB4   0044 0404 0408         					DC.W		$0044,$0404,$0408,$0025							;
01FBC   0080                   					DC.W		$0080											; ACDC parms
01FBE
01FBE   01DF                   					DC.W		defmBounds_BVGA-1								; ActiveHeight
01FC0   0009                   					DC.W		((defmBounds_RVGA*1)/64)-1						; ActiveWidth
01FC2   0000                   					DC.W		0												; BorderHeight
01FC4   FFFF                   					DC.W		0-1												; BorderWidth
01FC6   0000                   					DC.W		0												; BorderSide
01FC8   03B0                   					DC.W		(DAFB_1024_RB-((defmBounds_RVGA*1)/8))			; SkipFactor
01FCA   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
01FCE
01FCE                          	; Two bit mode parameters
01FCE                          	;
01FCE   0008 0000 0100         					DC.W		$0008,$0000,$0100,$060E,$0030					; DAFB parms
01FD8   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B		; Swatch parms
01FE6   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007	;
01FF6   0044 0404 0408         					DC.W		$0044,$0404,$0408,$0055							;
01FFE   0088                   					DC.W		$0088											; ACDC parms
02000
02000   01DF                   					DC.W		defmBounds_BVGA-1								; ActiveHeight
02002   0013                   					DC.W		((defmBounds_RVGA*2)/64)-1						; ActiveWidth
02004   0000                   					DC.W		0												; BorderHeight
02006   FFFF                   					DC.W		0-1												; BorderWidth
02008   0000                   					DC.W		0												; BorderSide
0200A   0360                   					DC.W		(DAFB_1024_RB-((defmBounds_RVGA*2)/8))			; SkipFactor
0200C   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02010
02010                          	; Four bit mode parameters
02010                          	;
02010   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0606,$0030					; DAFB parms
0201A   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B		; Swatch parms
02028   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007	;
02038   0044 0404 0408         					DC.W		$0044,$0404,$0408,$006D							;
02040   0090                   					DC.W		$0090											; ACDC parms
02042
02042   01DF                   					DC.W		defmBounds_BVGA-1								; ActiveHeight
02044   0027                   					DC.W		((defmBounds_RVGA*4)/64)-1						; ActiveWidth
02046   0000                   					DC.W		0												; BorderHeight
02048   FFFF                   					DC.W		0-1												; BorderWidth
0204A   0000                   					DC.W		0												; BorderSide
0204C   02C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RVGA*4)/8))			; SkipFactor
0204E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02052
02052                          	; Eight bit mode parameters
02052                          	;
02052   0008 0000 0100         					DC.W		$0008,$0000,$0100,$0602,$0030					; DAFB parms
0205C   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B		; Swatch parms
0206A   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007	;
0207A   0044 0404 0408         					DC.W		$0044,$0404,$0408,$0079							;
02082   0098                   					DC.W		$0098											; ACDC parms
02084
02084   01DF                   					DC.W		defmBounds_BVGA-1								; ActiveHeight
02086   004F                   					DC.W		((defmBounds_RVGA*8)/64)-1						; ActiveWidth
02088   0000                   					DC.W		0												; BorderHeight
0208A   FFFF                   					DC.W		0-1												; BorderWidth
0208C   0000                   					DC.W		0												; BorderSide
0208E   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RVGA*8)/8))			; SkipFactor
02090   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02094
02094                          	; Sixteen bit mode parameters
02094                          	;
02094   0008 0000 0200         					DC.W		$0008,$0000,$0200,$0600,$0030					; DAFB parms
0209E   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B		; Swatch parms
020AC   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007	;
020BC   0044 0404 0408         					DC.W		$0044,$0404,$0408,$007F							;
020C4   009E                   					DC.W		$009E											; ACDC parms
020C6
020C6   01DF                   					DC.W		defmBounds_BVGA-1								; ActiveHeight
020C8   009F                   					DC.W		((defmBounds_RVGA*16)/64)-1						; ActiveWidth
020CA   0000                   					DC.W		0												; BorderHeight
020CC   FFFF                   					DC.W		0-1												; BorderWidth
020CE   0000                   					DC.W		0												; BorderSide
020D0   0300                   					DC.W		(DAFB_2048_RB-((defmBounds_RVGA*16)/8))			; SkipFactor
020D2   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
020D6
020D6                          	; Thirty Two bit mode parameters
020D6                          	;
020D6   0008 0000 0400         					DC.W		$0008,$0000,$0400,$06FF,$0032					; DAFB parms
020E0   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B		; Swatch parms
020EE   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007	;
020FE   0044 0404 0408         					DC.W		$0044,$0404,$0408,$0083							;
02106   009C                   					DC.W		$009C											; ACDC parms
02108
02108   01DF                   					DC.W		defmBounds_BVGA-1								; ActiveHeight
0210A   013F                   					DC.W		((defmBounds_RVGA*32)/64)-1						; ActiveWidth
0210C   0000                   					DC.W		0												; BorderHeight
0210E   FFFF                   					DC.W		0-1												; BorderWidth
02110   0000                   					DC.W		0												; BorderSide
02112   0600                   					DC.W		(DAFB_4096_RB-((defmBounds_RVGA*32)/8))			; SkipFactor
02114   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02118
02118                          	_EndsVidParms_DAFB_VGA
02118
02118                          	;
02118                          	; SuperVGA Display parameters
02118                          	;
02118                          	_sVidParms_DAFB_SVGA
02118   0000 01A6              					DC.L		_EndsVidParms_DAFB_SVGA-_sVidParms_DAFB_SVGA	; block size
0211C
0211C                          	; Clock chip parms
0211C                          	;
0211C   0C 0F 00 00 03         					DC.B		$0C,$0F,$00,$00,$03,$02,$00,$00					; Clock chip parms
02124   00 02 05 06 04         					DC.B		$00,$02,$05,$06,$04,$01,$00,$00					;
0212C
0212C                          	; Misc params
0212C                          	;
0212C   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
0212E   0000 0E00              					Dc.l		DAFBBSOffset									; FrameBase
02132
02132                          	; One bit mode parameters
02132                          	;
02132   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$060E,$0030					; DAFB parms
0213C   0FF2 01C6 0100         					DC.W		$0FF2,$01C6,$0100,$001C,$01FF,$0037,$003D		; Swatch parms
0214A   004F 0060 01F0         					DC.W		$004F,$0060,$01F0,$01FE,$04E8,$04E6,$001A,$001F	;
0215A   0028 04D8 04DC         					DC.W		$0028,$04D8,$04DC,$0032							;
02162   00A0                   					DC.W		$00A0											; ACDC parms
02164
02164   0257                   					DC.W		defmBounds_BSVGA-1								; ActiveHeight
02166   0018                   					DC.W		((defmBounds_RSVGA*1)/32)-1						; ActiveWidth
02168   0000                   					DC.W		0												; BorderHeight
0216A   FFFF                   					DC.W		0-1												; BorderWidth
0216C   0000                   					DC.W		0												; BorderSide
0216E   02DC                   					DC.W		(DAFB_832_RB-((defmBounds_RSVGA*1)/8))			; SkipFactor
02170   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02174
02174
02174                          	; Two bit mode parameters
02174                          	;
02174   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$0606,$0030					; DAFB parms
0217E   0FF2 01C6 0100         					DC.W		$0FF2,$01C6,$0100,$001C,$01FF,$0037,$003D		; Swatch parms
0218C   004F 0060 01F0         					DC.W		$004F,$0060,$01F0,$01FE,$04E8,$04E6,$001A,$001F	;
0219C   0028 04D8 04DC         					DC.W		$0028,$04D8,$04DC,$004A							;
021A4   00A8                   					DC.W		$00A8											; ACDC parms
021A6
021A6   0257                   					DC.W		defmBounds_BSVGA-1								; ActiveHeight
021A8   0031                   					DC.W		((defmBounds_RSVGA*2)/32)-1						; ActiveWidth
021AA   0000                   					DC.W		0												; BorderHeight
021AC   FFFF                   					DC.W		0-1												; BorderWidth
021AE   0000                   					DC.W		0												; BorderSide
021B0   0278                   					DC.W		(DAFB_832_RB-((defmBounds_RSVGA*2)/8))			; SkipFactor
021B2   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
021B6
021B6                          	; Four bit mode parameters
021B6                          	;
021B6   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$0602,$0030					; DAFB parms
021C0   0FF2 01C6 0100         					DC.W		$0FF2,$01C6,$0100,$001C,$01FF,$0037,$003D		; Swatch parms
021CE   004F 0060 01F0         					DC.W		$004F,$0060,$01F0,$01FE,$04E8,$04E6,$001A,$001F	;
021DE   0028 04D8 04DC         					DC.W		$0028,$04D8,$04DC,$0056							;
021E6   00B0                   					DC.W		$00B0											; ACDC parms
021E8
021E8   0257                   					DC.W		defmBounds_BSVGA-1								; ActiveHeight
021EA   0063                   					DC.W		((defmBounds_RSVGA*4)/32)-1						; ActiveWidth
021EC   0000                   					DC.W		0												; BorderHeight
021EE   FFFF                   					DC.W		0-1												; BorderWidth
021F0   0000                   					DC.W		0												; BorderSide
021F2   01B0                   					DC.W		(DAFB_832_RB-((defmBounds_RSVGA*4)/8))			; SkipFactor
021F4   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
021F8
021F8                          	; Eight bit mode parameters
021F8                          	;
021F8   0007 0000 00D0         					DC.W		$0007,$0000,$00D0,$0600,$0030					; DAFB parms
02202   0FF2 01C6 0100         					DC.W		$0FF2,$01C6,$0100,$001C,$01FF,$0037,$003D		; Swatch parms
02210   004F 0060 01F0         					DC.W		$004F,$0060,$01F0,$01FE,$04E8,$04E6,$001A,$001F	;
02220   0028 04D8 04DC         					DC.W		$0028,$04D8,$04DC,$005C							;
02228   00B8                   					DC.W		$00B8											; ACDC parms
0222A
0222A   0257                   					DC.W		defmBounds_BSVGA-1								; ActiveHeight
0222C   00C7                   					DC.W		((defmBounds_RSVGA*8)/32)-1						; ActiveWidth
0222E   0000                   					DC.W		0												; BorderHeight
02230   FFFF                   					DC.W		0-1												; BorderWidth
02232   0000                   					DC.W		0												; BorderSide
02234   0020                   					DC.W		(DAFB_832_RB-((defmBounds_RSVGA*8)/8))			; SkipFactor
02236   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0223A
0223A                          	; Sixteen bit mode parameters
0223A                          	;
0223A   0007 0000 01A0         					DC.W		$0007,$0000,$01A0,$06FF,$0031					; DAFB parms
02244   0FF2 01C6 0100         					DC.W		$0FF2,$01C6,$0100,$001C,$01FF,$0037,$003D		; Swatch parms
02252   004F 0060 01F0         					DC.W		$004F,$0060,$01F0,$01FE,$04E8,$04E6,$001A,$001F	;
02262   0028 04D8 04DC         					DC.W		$0028,$04D8,$04DC,$005F							;
0226A   00BE                   					DC.W		$00BE											; ACDC parms
0226C
0226C   0257                   					DC.W		defmBounds_BSVGA-1								; ActiveHeight
0226E   018F                   					DC.W		((defmBounds_RSVGA*16)/32)-1					; ActiveWidth
02270   0000                   					DC.W		0												; BorderHeight
02272   FFFF                   					DC.W		0-1												; BorderWidth
02274   0000                   					DC.W		0												; BorderSide
02276   0040                   					DC.W		(DAFB_1664_RB-((defmBounds_RSVGA*16)/8))		; SkipFactor
02278   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0227C
0227C                          	; Thirty-two bit mode parameters
0227C                          	;
0227C   0007 0000 0340         					DC.W		$0007,$0000,$0340,$0000,$0031					; DAFB parms
02286   0FF2 038C 0200         					DC.W		$0FF2,$038C,$0200,$0038,$03FF,$006F,$007B		; Swatch parms
02294   009F 00C3 03E3         					DC.W		$009F,$00C3,$03E3,$03FE,$04E8,$04E6,$001A,$001F	;
022A4   0028 04D8 04DC         					DC.W		$0028,$04D8,$04DC,$00C3							;
022AC   003C                   					DC.W		$003C											; ACDC parms
022AE
022AE   0257                   					DC.W		defmBounds_BSVGA-1								; ActiveHeight
022B0   018F                   					DC.W		((defmBounds_RSVGA*32)/64)-1					; ActiveWidth
022B2   0000                   					DC.W		0												; BorderHeight
022B4   FFFF                   					DC.W		0-1												; BorderWidth
022B6   0000                   					DC.W		0												; BorderSide
022B8   0080                   					DC.W		(DAFB_3328_RB-((defmBounds_RSVGA*32)/8))		; SkipFactor
022BA   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
022BE
022BE                          	_EndsVidParms_DAFB_SVGA
022BE
022BE                          	;
022BE                          	; NTSC (Safe Title) Display parameters
022BE                          	;
022BE                          	_sVidParms_DAFB_NTSCST
022BE   0000 01A6              					Dc.l		_EndsVidParms_DAFB_NTSCST-_sVidParms_DAFB_NTSCST ; block size
022C2
022C2                          	; Clock chip params
022C2                          	;
022C2   0C 01 02 00 07         					Dc.b		$0C,$01,$02,$00,$07,$03,$00,$00					; Clock chip parms
022CA   00 04 05 06 04         					Dc.b		$00,$04,$05,$06,$04,$01,$00,$00					;
022D2
022D2                          	; Misc params
022D2                          	;
022D2   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
022D4   0000 1020              					Dc.l		DAFBNTSCOffset									; FrameBase
022D8
022D8                          	; One bit mode params
022D8                          	;
022D8   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$061E,$0074					; DAFB params
022E2   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
022F0   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
02300   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$080F
02308   0080                   					Dc.w		$0080											; ACDC params
0230A
0230A   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
0230C   0007                   					DC.W		((defmBounds_RNTSCST*1)/64)-1					; ActiveWidth
0230E   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
02310   0013                   					DC.W		((defmBounds_RNTSCFF*1)/32)-1					; BorderWidth
02312   0002                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*1)/32 ; BorderSide
02314   03B0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*1)/8))		; SkipFactor
02316   0000 C008              					Dc.l		defmNTSCSTB1									; BaseOffset
0231A
0231A                          	; Two bit mode params
0231A                          	;
0231A   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$060E,$0074					; DAFB params
02324   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
02332   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
02342   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$083F
0234A   0088                   					Dc.w		$0088											; ACDC params
0234C
0234C   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
0234E   000F                   					DC.W		((defmBounds_RNTSCST*2)/64)-1					; ActiveWidth
02350   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
02352   0027                   					DC.W		((defmBounds_RNTSCFF*2)/32)-1					; BorderWidth
02354   0004                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*2)/32 ; BorderSide
02356   0360                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*2)/8))		; SkipFactor
02358   0000 C010              					Dc.l		defmNTSCSTB2									; BaseOffset
0235C
0235C                          	; Four bit mode params
0235C                          	;
0235C   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$0606,$0074					; DAFB params
02366   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
02374   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
02384   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$0857
0238C   0090                   					Dc.w		$0090											; ACDC params
0238E
0238E   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
02390   001F                   					DC.W		((defmBounds_RNTSCST*4)/64)-1					; ActiveWidth
02392   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
02394   004F                   					DC.W		((defmBounds_RNTSCFF*4)/32)-1					; BorderWidth
02396   0008                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*4)/32 ; BorderSide
02398   02C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*4)/8))		; SkipFactor
0239A   0000 C020              					Dc.l		defmNTSCSTB4									; BaseOffset
0239E
0239E                          	; Eight bit mode params
0239E                          	;
0239E   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$0602,$0074					; DAFB params
023A8   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
023B6   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
023C6   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$0863
023CE   0098                   					Dc.w		$0098											; ACDC params
023D0
023D0   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
023D2   003F                   					DC.W		((defmBounds_RNTSCST*8)/64)-1					; ActiveWidth
023D4   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
023D6   009F                   					DC.W		((defmBounds_RNTSCFF*8)/32)-1					; BorderWidth
023D8   0010                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*8)/32 ; BorderSide
023DA   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*8)/8))		; SkipFactor
023DC   0000 C040              					Dc.l		defmNTSCSTB8									; BaseOffset
023E0
023E0                          	; Sixteen bit mode params
023E0                          	;
023E0   0008 0001 0400         					Dc.w		$0008,$0001,$0400,$0600,$0074					; DAFB params
023EA   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
023F8   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
02408   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$0869
02410   009E                   					Dc.w		$009E											; ACDC params
02412
02412   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
02414   007F                   					DC.W		((defmBounds_RNTSCST*16)/64)-1					; ActiveWidth
02416   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
02418   013F                   					DC.W		((defmBounds_RNTSCFF*16)/32)-1					; BorderWidth
0241A   0020                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*16)/32 ; BorderSide
0241C   0300                   					DC.W		(DAFB_2048_RB-((defmBounds_RNTSCFF*16)/8))		; SkipFactor
0241E   0001 8080              					Dc.l		defmNTSCSTB16									; BaseOffset
02422
02422                          	; Thirty-two bit mode params
02422                          	;
02422   0008 0001 0800         					Dc.w		$0008,$0001,$0800,$06FF,$0076					; DAFB params
0242C   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
0243A   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
0244A   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$086D
02452   009C                   					Dc.w		$009C											; ACDC params
02454
02454   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
02456   00FF                   					DC.W		((defmBounds_RNTSCST*32)/64)-1					; ActiveWidth
02458   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
0245A   027F                   					DC.W		((defmBounds_RNTSCFF*32)/32)-1					; BorderWidth
0245C   0040                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*32)/32 ; BorderSide
0245E   0600                   					DC.W		(DAFB_4096_RB-((defmBounds_RNTSCFF*32)/8))		; SkipFactor
02460   0003 0100              					Dc.l		defmNTSCSTB32									; BaseOffset
02464
02464                          	_EndsVidParms_DAFB_NTSCST
02464
02464                          	;
02464                          	; NTSC (Full Frame) Display parameters
02464                          	;
02464                          	_sVidParms_DAFB_NTSCFF
02464   0000 01A6              					Dc.l		_EndsVidParms_DAFB_NTSCFF-_sVidParms_DAFB_NTSCFF ; block size
02468
02468                          	; Clock chip params
02468                          	;
02468   0C 01 02 00 07         					Dc.b		$0C,$01,$02,$00,$07,$03,$00,$00					; Clock chip parms
02470   00 04 05 06 04         					Dc.b		$00,$04,$05,$06,$04,$01,$00,$00					;
02478
02478                          	; Misc params
02478                          	;
02478   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
0247A   0000 1020              					Dc.l		DAFBNTSCOffset									; FrameBase
0247E
0247E                          	; One bit mode params
0247E                          	;
0247E   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$061E,$0074					; DAFB params
02488   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
02496   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
024A6   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$080F
024AE   0080                   					Dc.w		$0080											; ACDC params
024B0
024B0   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
024B2   0009                   					DC.W		((defmBounds_RNTSCFF*1)/64)-1					; ActiveWidth
024B4   0000                   					DC.W		0												; BorderHeight
024B6   FFFF                   					DC.W		0-1												; BorderWidth
024B8   0000                   					DC.W		0												; BorderSide
024BA   03B0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*1)/8))		; SkipFactor
024BC   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
024C0
024C0                          	; Two bit mode params
024C0                          	;
024C0   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$060E,$0074					; DAFB params
024CA   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
024D8   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
024E8   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$083F
024F0   0088                   					Dc.w		$0088											; ACDC params
024F2
024F2   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
024F4   0013                   					DC.W		((defmBounds_RNTSCFF*2)/64)-1					; ActiveWidth
024F6   0000                   					DC.W		0												; BorderHeight
024F8   FFFF                   					DC.W		0-1												; BorderWidth
024FA   0000                   					DC.W		0												; BorderSide
024FC   0360                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*2)/8))		; SkipFactor
024FE   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02502
02502                          	; Four bit mode params
02502                          	;
02502   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$0606,$0074					; DAFB params
0250C   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
0251A   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
0252A   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$0857
02532   0090                   					Dc.w		$0090											; ACDC params
02534
02534   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
02536   0027                   					DC.W		((defmBounds_RNTSCFF*4)/64)-1					; ActiveWidth
02538   0000                   					DC.W		0												; BorderHeight
0253A   FFFF                   					DC.W		0-1												; BorderWidth
0253C   0000                   					DC.W		0												; BorderSide
0253E   02C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*4)/8))		; SkipFactor
02540   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02544
02544                          	; Eight bit mode params
02544                          	;
02544   0008 0001 0200         					Dc.w		$0008,$0001,$0200,$0602,$0074					; DAFB params
0254E   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
0255C   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
0256C   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$0863
02574   0098                   					Dc.w		$0098											; ACDC params
02576
02576   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
02578   004F                   					DC.W		((defmBounds_RNTSCFF*8)/64)-1					; ActiveWidth
0257A   0000                   					DC.W		0												; BorderHeight
0257C   FFFF                   					DC.W		0-1												; BorderWidth
0257E   0000                   					DC.W		0												; BorderSide
02580   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*8)/8))		; SkipFactor
02582   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02586
02586                          	; Sixteen bit mode params
02586                          	;
02586   0008 0001 0400         					Dc.w		$0008,$0001,$0400,$0600,$0074					; DAFB params
02590   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
0259E   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
025AE   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$0869
025B6   009E                   					Dc.w		$009E											; ACDC params
025B8
025B8   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
025BA   009F                   					DC.W		((defmBounds_RNTSCFF*16)/64)-1					; ActiveWidth
025BC   0000                   					DC.W		0												; BorderHeight
025BE   FFFF                   					DC.W		0-1												; BorderWidth
025C0   0000                   					DC.W		0												; BorderSide
025C2   0300                   					DC.W		(DAFB_2048_RB-((defmBounds_RNTSCFF*16)/8))		; SkipFactor
025C4   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
025C8
025C8                          	; Thirty-two bit mode params
025C8                          	;
025C8   0008 0001 0800         					Dc.w		$0008,$0001,$0800,$06FF,$0076					; DAFB params
025D2   0FF2 014C 0186         					Dc.w		$0FF2,$014C,$0186,$001D,$030B,$0039,$003F		; Swatch params
025E0   0062 006D 02ED         					Dc.w		$0062,$006D,$02ED,$030A,$020D,$020C,$0005,$000B	;
025F0   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$086D
025F8   009C                   					Dc.w		$009C											; ACDC params
025FA
025FA   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
025FC   013F                   					DC.W		((defmBounds_RNTSCFF*32)/64)-1					; ActiveWidth
025FE   0000                   					DC.W		0												; BorderHeight
02600   FFFF                   					DC.W		0-1												; BorderWidth
02602   0000                   					DC.W		0												; BorderSide
02604   0600                   					DC.W		(DAFB_4096_RB-((defmBounds_RNTSCFF*32)/8))		; SkipFactor
02606   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0260A
0260A                          	_EndsVidParms_DAFB_NTSCFF
0260A
0260A                          	;
0260A                          	; NTSC (Safe Title Convolved) Display parameters
0260A                          	;
0260A                          	_sVidParms_DAFB_NTSCconvST
0260A   0000 0122              					Dc.l		_EndsVidParms_DAFB_NTSCconvST-_sVidParms_DAFB_NTSCconvST ; block size
0260E
0260E                          	; Clock chip params
0260E                          	;
0260E   0C 01 02 00 07         					Dc.b		$0C,$01,$02,$00,$07,$03,$00,$00					; Clock chip parms
02616   00 02 05 06 04         					Dc.b		$00,$02,$05,$06,$04,$01,$00,$00					;
0261E
0261E                          	; Misc params
0261E                          	;
0261E   83 83                  					Dc.b		FourthVidMode,FourthVidMode						; MaxMode a,b
02620   0000 1400              					Dc.l		DAFBNTSCConvOff									; FrameBase
02624
02624                          	; One bit mode params
02624                          	;
02624   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$060E,$007C					; DAFB params
0262E   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
0263C   00B1 00BA 05BA         					Dc.w		$00B1,$00BA,$05BA,$0616,$020D,$20C,$0005,$000B	;
0264C   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$089C
02654   00A1                   					Dc.w		$00A1											; ACDC params
02656
02656   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
02658   0007                   					DC.W		((defmBounds_RNTSCST*1)/64)-1					; ActiveWidth
0265A   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
0265C   0013                   					DC.W		((defmBounds_RNTSCFF*1)/32)-1					; BorderWidth
0265E   0002                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*1)/32 ; BorderSide
02660   03B0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*1)/8))		; SkipFactor
02662   0000 C008              					Dc.l		defmNTSCSTB1									; BaseOffset
02666
02666                          	; Two bit mode params
02666                          	;
02666   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$0606,$007C					; DAFB params
02670   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
0267E   00B1 00D2 05D2         					Dc.w		$00B1,$00D2,$05D2,$0616,$020D,$20C,$0005,$000B	;
0268E   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$08C4
02696   00A9                   					Dc.w		$00A9											; ACDC params
02698
02698   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
0269A   000F                   					DC.W		((defmBounds_RNTSCST*2)/64)-1					; ActiveWidth
0269C   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
0269E   0027                   					DC.W		((defmBounds_RNTSCFF*2)/32)-1					; BorderWidth
026A0   0004                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*2)/32 ; BorderSide
026A2   0360                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*2)/8))		; SkipFactor
026A4   0000 C010              					Dc.l		defmNTSCSTB2									; BaseOffset
026A8
026A8                          	; Four bit mode params
026A8                          	;
026A8   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$0602,$007C					; DAFB params
026B2   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
026C0   00B1 00DE 05DE         					Dc.w		$00B1,$00DE,$05DE,$0616,$020D,$20C,$0005,$000B	;
026D0   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$08D8
026D8   00B1                   					Dc.w		$00B1											; ACDC params
026DA
026DA   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
026DC   001F                   					DC.W		((defmBounds_RNTSCST*4)/64)-1					; ActiveWidth
026DE   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
026E0   004F                   					DC.W		((defmBounds_RNTSCFF*4)/32)-1					; BorderWidth
026E2   0008                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*4)/32 ; BorderSide
026E4   02C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*4)/8))		; SkipFactor
026E6   0000 C020              					Dc.l		defmNTSCSTB4									; BaseOffset
026EA
026EA                          	; Eight bit mode params
026EA                          	;
026EA   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$0600,$007C					; DAFB params
026F4   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
02702   00B1 00E4 05E4         					Dc.w		$00B1,$00E4,$05E4,$0616,$020D,$20C,$0005,$000B	;
02712   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$08E2
0271A   00B9                   					Dc.w		$00B9											; ACDC params
0271C
0271C   017F                   					DC.W		defmBounds_BNTSCST-1							; ActiveHeight
0271E   003F                   					DC.W		((defmBounds_RNTSCST*8)/64)-1					; ActiveWidth
02720   0030                   					DC.W		(defmBounds_BNTSCFF-defmBounds_BNTSCST)/2		; BorderHeight
02722   009F                   					DC.W		((defmBounds_RNTSCFF*8)/32)-1					; BorderWidth
02724   0010                   					DC.W		(((defmBounds_RNTSCFF-defmBounds_RNTSCST)/2)*8)/32 ; BorderSide
02726   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*8)/8))		; SkipFactor
02728   0000 C040              					Dc.l		defmNTSCSTB8									; BaseOffset
0272C
0272C                          	_EndsVidParms_DAFB_NTSCconvST
0272C
0272C                          	;
0272C                          	; NTSC (Full Frame Convolved) Display parameters
0272C                          	;
0272C                          	_sVidParms_DAFB_NTSCconvFF
0272C   0000 0122              					Dc.l		_EndsVidParms_DAFB_NTSCconvFF-_sVidParms_DAFB_NTSCconvFF ; block size
02730
02730                          	; Clock chip params
02730                          	;
02730   0C 01 02 00 07         					Dc.b		$0C,$01,$02,$00,$07,$03,$00,$00					; Clock chip parms
02738   00 02 05 06 04         					Dc.b		$00,$02,$05,$06,$04,$01,$00,$00					;
02740
02740                          	; Misc params
02740                          	;
02740   83 83                  					Dc.b		FourthVidMode,FourthVidMode						; MaxMode a,b
02742   0000 1400              					Dc.l		DAFBNTSCConvOff									; FrameBase
02746
02746                          	; One bit mode params
02746                          	;
02746   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$060E,$007C					; DAFB params
02750   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
0275E   00B1 00BA 05BA         					Dc.w		$00B1,$00BA,$05BA,$0616,$020D,$20C,$0005,$000B	;
0276E   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$089C
02776   00A1                   					Dc.w		$00A1											; ACDC params
02778
02778   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
0277A   0009                   					DC.W		((defmBounds_RNTSCFF*1)/64)-1					; ActiveWidth
0277C   0000                   					DC.W		0												; BorderHeight
0277E   FFFF                   					DC.W		0-1												; BorderWidth
02780   0000                   					DC.W		0												; BorderSide
02782   03B0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*1)/8))		; SkipFactor
02784   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02788
02788                          	; Two bit mode params
02788                          	;
02788   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$0606,$007C					; DAFB params
02792   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
027A0   00B1 00D2 05D2         					Dc.w		$00B1,$00D2,$05D2,$0616,$020D,$20C,$0005,$000B	;
027B0   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$08C4
027B8   00A9                   					Dc.w		$00A9											; ACDC params
027BA
027BA   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
027BC   0013                   					DC.W		((defmBounds_RNTSCFF*2)/64)-1					; ActiveWidth
027BE   0000                   					DC.W		0												; BorderHeight
027C0   FFFF                   					DC.W		0-1												; BorderWidth
027C2   0000                   					DC.W		0												; BorderSide
027C4   0360                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*2)/8))		; SkipFactor
027C6   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
027CA
027CA                          	; Four bit mode params
027CA                          	;
027CA   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$0602,$007C					; DAFB params
027D4   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
027E2   00B1 00DE 05DE         					Dc.w		$00B1,$00DE,$05DE,$0616,$020D,$20C,$0005,$000B	;
027F2   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$08D8
027FA   00B1                   					Dc.w		$00B1											; ACDC params
027FC
027FC   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
027FE   0027                   					DC.W		((defmBounds_RNTSCFF*4)/64)-1					; ActiveWidth
02800   0000                   					DC.W		0												; BorderHeight
02802   FFFF                   					DC.W		0-1												; BorderWidth
02804   0000                   					DC.W		0												; BorderSide
02806   02C0                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*4)/8))		; SkipFactor
02808   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0280C
0280C                          	; Eight bit mode params
0280C                          	;
0280C   000A 0000 0200         					Dc.w		$000A,$0000,$0200,$0600,$007C					; DAFB params
02816   0FF2 0298 030C         					Dc.w		$0FF2,$0298,$030C,$003A,$0617,$0073,$007F		; Swatch params
02824   00B1 00E4 05E4         					Dc.w		$00B1,$00E4,$05E4,$0616,$020D,$20C,$0005,$000B	;
02834   0023 0203 0206         					Dc.w		$0023,$0203,$0206,$08E2
0283C   00B9                   					Dc.w		$00B9											; ACDC params
0283E
0283E   01DF                   					DC.W		defmBounds_BNTSCFF-1							; ActiveHeight
02840   004F                   					DC.W		((defmBounds_RNTSCFF*8)/64)-1					; ActiveWidth
02842   0000                   					DC.W		0												; BorderHeight
02844   FFFF                   					DC.W		0-1												; BorderWidth
02846   0000                   					DC.W		0												; BorderSide
02848   0180                   					DC.W		(DAFB_1024_RB-((defmBounds_RNTSCFF*8)/8))		; SkipFactor
0284A   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
0284E
0284E                          	_EndsVidParms_DAFB_NTSCconvFF
0284E
0284E                          	;
0284E                          	; PAL (Safe Title) Display parameters
0284E                          	;
0284E                          	_sVidParms_DAFB_PALST
0284E   0000 01A6              					Dc.l		_EndsVidParms_DAFB_PALST-_sVidParms_DAFB_PALST	; block size
02852
02852                          	; Clock chip params
02852                          	;
02852   0D 09 01 00 06         					Dc.b		$0D,$09,$01,$00,$06,$04,$00,$01					; Clock chip params
0285A   01 03 05 06 00         					Dc.b		$01,$03,$05,$06,$00,$01,$00,$00
02862
02862                          	; Misc params
02862                          	;
02862   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
02864   0000 0E20              					Dc.l		DAFBPALOffset									; FrameBase
02868
02868                          	; One bit mode params
02868                          	;
02868   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$061E,$0074					; DAFB params
02872   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02880   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02890   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$082F
02898   0000                   					Dc.w		$0000											; ACDC params
0289A
0289A   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
0289C   0009                   					DC.W		((defmBounds_RPALST*1)/64)-1					; ActiveWidth
0289E   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
028A0   0017                   					DC.W		((defmBounds_RPALFF*1)/32)-1					; BorderWidth
028A2   0002                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*1)/32 ; BorderSide
028A4   02E0                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*1)/8))			; SkipFactor
028A6   0000 9C08              					Dc.l		defmPALSTB1										; BaseOffset
028AA
028AA                          	; Two bit mode params
028AA                          	;
028AA   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$060E,$0074					; DAFB params
028B4   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
028C2   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
028D2   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$085F
028DA   0008                   					Dc.w		$0008											; ACDC params
028DC
028DC   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
028DE   0013                   					DC.W		((defmBounds_RPALST*2)/64)-1					; ActiveWidth
028E0   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
028E2   002F                   					DC.W		((defmBounds_RPALFF*2)/32)-1					; BorderWidth
028E4   0004                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*2)/32 ; BorderSide
028E6   0280                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*2)/8))			; SkipFactor
028E8   0000 9C10              					Dc.l		defmPALSTB2										; BaseOffset
028EC
028EC                          	; Four bit mode params
028EC                          	;
028EC   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$0606,$0074					; DAFB params
028F6   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02904   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02914   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0877
0291C   0010                   					Dc.w		$0010											; ACDC params
0291E
0291E   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
02920   0027                   					DC.W		((defmBounds_RPALST*4)/64)-1					; ActiveWidth
02922   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
02924   005F                   					DC.W		((defmBounds_RPALFF*4)/32)-1					; BorderWidth
02926   0008                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*4)/32 ; BorderSide
02928   01C0                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*4)/8))			; SkipFactor
0292A   0000 9C20              					Dc.l		defmPALSTB4										; BaseOffset
0292E
0292E                          	; Eight bit mode params
0292E                          	;
0292E   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$0602,$0074					; DAFB params
02938   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02946   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02956   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0883
0295E   0018                   					Dc.w		$0018											; ACDC params
02960
02960   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
02962   004F                   					DC.W		((defmBounds_RPALST*8)/64)-1					; ActiveWidth
02964   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
02966   00BF                   					DC.W		((defmBounds_RPALFF*8)/32)-1					; BorderWidth
02968   0010                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*8)/32 ; BorderSide
0296A   0040                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*8)/8))			; SkipFactor
0296C   0000 9C40              					Dc.l		defmPALSTB8										; BaseOffset
02970
02970                          	; Sixteen bit mode params
02970                          	;
02970   0007 0001 0340         					Dc.w		$0007,$0001,$0340,$0600,$0075					; DAFB params
0297A   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02988   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02998   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0888
029A0   001E                   					Dc.w		$001E											; ACDC params
029A2
029A2   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
029A4   009F                   					DC.W		((defmBounds_RPALST*16)/64)-1					; ActiveWidth
029A6   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
029A8   017F                   					DC.W		((defmBounds_RPALFF*16)/32)-1					; BorderWidth
029AA   0020                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*16)/32 ; BorderSide
029AC   0080                   					DC.W		(DAFB_1664_RB-((defmBounds_RPALFF*16)/8))		; SkipFactor
029AE   0001 3880              					Dc.l		defmPALSTB16									; BaseOffset
029B2
029B2                          	; Thirty-two bit mode params
029B2                          	;
029B2   0007 0001 0680         					Dc.w		$0007,$0001,$0680,$06FF,$0075					; DAFB params
029BC   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
029CA   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
029DA   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$088C
029E2   001C                   					Dc.w		$001C											; ACDC params
029E4
029E4   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
029E6   013F                   					DC.W		((defmBounds_RPALST*32)/64)-1					; ActiveWidth
029E8   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
029EA   02FF                   					DC.W		((defmBounds_RPALFF*32)/32)-1					; BorderWidth
029EC   0040                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*32)/32 ; BorderSide
029EE   0100                   					DC.W		(DAFB_3328_RB-((defmBounds_RPALFF*32)/8))		; SkipFactor
029F0   0002 7100              					Dc.l		defmPALSTB32									; BaseOffset
029F4
029F4                          	_EndsVidParms_DAFB_PALST
029F4
029F4                          	;
029F4                          	; PAL (Full Frame) Display parameters
029F4                          	;
029F4                          	_sVidParms_DAFB_PALFF
029F4   0000 01A6              					Dc.l		_EndsVidParms_DAFB_PALFF-_sVidParms_DAFB_PALFF	; block size
029F8
029F8                          	; Clock chip params
029F8                          	;
029F8   0D 09 01 00 06         					Dc.b		$0D,$09,$01,$00,$06,$04,$00,$01					; Clock chip params
02A00   01 03 05 06 00         					Dc.b		$01,$03,$05,$06,$00,$01,$00,$00
02A08
02A08                          	; Misc params
02A08                          	;
02A08
02A08   84 85                  					Dc.b		FifthVidMode,SixthVidMode						; MaxMode a,b
02A0A   0000 0E20              					Dc.l		DAFBPALOffset									; FrameBase
02A0E
02A0E                          	; One bit mode params
02A0E                          	;
02A0E   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$061E,$0074					; DAFB params
02A18   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02A26   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02A36   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$082F
02A3E   0000                   					Dc.w		$0000											; ACDC params
02A40
02A40   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02A42   000B                   					DC.W		((defmBounds_RPALFF*1)/64)-1					; ActiveWidth
02A44   0000                   					DC.W		0												; BorderHeight
02A46   FFFF                   					DC.W		0-1												; BorderWidth
02A48   0000                   					DC.W		0												; BorderSide
02A4A   02E0                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*1)/8))			; SkipFactor
02A4C   0000 0000              					Dc.l		defmBaseOffset 									; BaseOffset
02A50
02A50                          	; Two bit mode params
02A50                          	;
02A50   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$060E,$0074					; DAFB params
02A5A   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02A68   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02A78   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$085F
02A80   0008                   					Dc.w		$0008											; ACDC params
02A82
02A82   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02A84   0017                   					DC.W		((defmBounds_RPALFF*2)/64)-1					; ActiveWidth
02A86   0000                   					DC.W		0												; BorderHeight
02A88   FFFF                   					DC.W		0-1												; BorderWidth
02A8A   0000                   					DC.W		0												; BorderSide
02A8C   0280                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*2)/8))			; SkipFactor
02A8E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02A92
02A92                          	; Four bit mode params
02A92                          	;
02A92   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$0606,$0074					; DAFB params
02A9C   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02AAA   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02ABA   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0877
02AC2   0010                   					Dc.w		$0010											; ACDC params
02AC4
02AC4   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02AC6   002F                   					DC.W		((defmBounds_RPALFF*4)/64)-1					; ActiveWidth
02AC8   0000                   					DC.W		0												; BorderHeight
02ACA   FFFF                   					DC.W		0-1												; BorderWidth
02ACC   0000                   					DC.W		0												; BorderSide
02ACE   01C0                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*4)/8))			; SkipFactor
02AD0   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02AD4
02AD4                          	; Eight bit mode params
02AD4                          	;
02AD4   0007 0001 01A0         					Dc.w		$0007,$0001,$01A0,$0602,$0074					; DAFB params
02ADE   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02AEC   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02AFC   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0883
02B04   0018                   					Dc.w		$0018											; ACDC params
02B06
02B06   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02B08   005F                   					DC.W		((defmBounds_RPALFF*8)/64)-1					; ActiveWidth
02B0A   0000                   					DC.W		0												; BorderHeight
02B0C   FFFF                   					DC.W		0-1												; BorderWidth
02B0E   0000                   					DC.W		0												; BorderSide
02B10   0040                   					DC.W		(DAFB_832_RB-((defmBounds_RPALFF*8)/8))			; SkipFactor
02B12   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02B16
02B16                          	; Sixteen bit mode params
02B16                          	;
02B16   0007 0001 0340         					Dc.w		$0007,$0001,$0340,$0600,$0075					; DAFB params
02B20   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02B2E   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02B3E   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0888
02B46   001E                   					Dc.w		$001E											; ACDC params
02B48
02B48   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02B4A   00BF                   					DC.W		((defmBounds_RPALFF*16)/64)-1					; ActiveWidth
02B4C   0000                   					DC.W		0												; BorderHeight
02B4E   FFFF                   					DC.W		0-1												; BorderWidth
02B50   0000                   					DC.W		0												; BorderSide
02B52   0080                   					DC.W		(DAFB_1664_RB-((defmBounds_RPALFF*16)/8))		; SkipFactor
02B54   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02B58
02B58                          	; Thirty-two bit mode params
02B58                          	;
02B58   0007 0001 0680         					Dc.w		$0007,$0001,$0680,$06FF,$0075					; DAFB params
02B62   0FF2 0192 01D8         					Dc.w		$0FF2,$0192,$01D8,$0023,$03AF,$0045,$0049		; Swatch params
02B70   006D 008D 038D         					Dc.w		$006D,$008D,$038D,$03AE,$0271,$0270,$0004,$0009	;
02B80   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$088C
02B88   001C                   					Dc.w		$001C											; ACDC params
02B8A
02B8A   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02B8C   017F                   					DC.W		((defmBounds_RPALFF*32)/64)-1					; ActiveWidth
02B8E   0000                   					DC.W		0												; BorderHeight
02B90   FFFF                   					DC.W		0-1												; BorderWidth
02B92   0000                   					DC.W		0												; BorderSide
02B94   0100                   					DC.W		(DAFB_3328_RB-((defmBounds_RPALFF*32)/8))		; SkipFactor
02B96   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02B9A
02B9A                          	_EndsVidParms_DAFB_PALFF
02B9A
02B9A                          	;
02B9A                          	; PAL (Safe Title Convolved) Display parameters
02B9A                          	;
02B9A                          	_sVidParms_DAFB_PALconvST
02B9A   0000 0122              					Dc.l		_EndsVidParms_DAFB_PALconvST-_sVidParms_DAFB_PALconvST	; block size
02B9E
02B9E                          	; Clock chip params
02B9E                          	;
02B9E   0D 09 01 00 06         					Dc.b		$0D,$09,$01,$00,$06,$04,$00,$01					; Clock chip params
02BA6   01 01 05 06 00         					Dc.b		$01,$01,$05,$06,$00,$01,$00,$00
02BAE
02BAE                          	; Misc params
02BAE                          	;
02BAE
02BAE   83 83                  					Dc.b		FourthVidMode,FourthVidMode						; Maxmode a == b.
02BB0   0000 1420              					Dc.l		DAFBPALConvOff									; FrameBase
02BB4
02BB4                          	; One bit mode params
02BB4                          	;
02BB4   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$060E,$007C					; DAFB params
02BBE   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02BCC   00DB 00FA 06FA         					Dc.w		$00DB,$00FA,$06FA,$075E,$0271,$0270,$0004,$0009	;
02BDC   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$08DC
02BE4   0021                   					Dc.w		$0021											; ACDC params
02BE6
02BE6   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
02BE8   0009                   					DC.W		((defmBounds_RPALST*1)/64)-1					; ActiveWidth
02BEA   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
02BEC   0017                   					DC.W		((defmBounds_RPALFF*1)/32)-1					; BorderWidth
02BEE   0002                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*1)/32 ; BorderSide
02BF0   03A0                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*1)/8))		; SkipFactor
02BF2   0000 9C08              					Dc.l		defmPALSTB1										; BaseOffset
02BF6
02BF6                          	; Two bit mode params
02BF6                          	;
02BF6   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$0606,$007C					; DAFB params
02C00   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02C0E   00DB 0112 0712         					Dc.w		$00DB,$0112,$0712,$075E,$0271,$0270,$0004,$0009	;
02C1E   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0904
02C26   0029                   					Dc.w		$0029											; ACDC params
02C28
02C28   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
02C2A   0013                   					DC.W		((defmBounds_RPALST*2)/64)-1					; ActiveWidth
02C2C   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
02C2E   002F                   					DC.W		((defmBounds_RPALFF*2)/32)-1					; BorderWidth
02C30   0004                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*2)/32 ; BorderSide
02C32   0340                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*2)/8))		; SkipFactor
02C34   0000 9C10              					Dc.l		defmPALSTB2										; BaseOffset
02C38
02C38                          	; Four bit mode params
02C38                          	;
02C38   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$0602,$007C					; DAFB params
02C42   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02C50   00DB 011E 071E         					Dc.w		$00DB,$011E,$071E,$075E,$0271,$0270,$0004,$0009	;
02C60   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0918
02C68   0031                   					Dc.w		$0031											; ACDC params
02C6A
02C6A   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
02C6C   0027                   					DC.W		((defmBounds_RPALST*4)/64)-1					; ActiveWidth
02C6E   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
02C70   005F                   					DC.W		((defmBounds_RPALFF*4)/32)-1					; BorderWidth
02C72   0008                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*4)/32 ; BorderSide
02C74   0280                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*4)/8))		; SkipFactor
02C76   0000 9C20              					Dc.l		defmPALSTB4										; BaseOffset
02C7A
02C7A                          	; Eight bit mode params
02C7A                          	;
02C7A   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$0600,$007C					; DAFB params
02C84   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02C92   00DB 0124 0724         					Dc.w		$00DB,$0124,$0724,$075E,$0271,$0270,$0004,$0009	;
02CA2   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0922
02CAA   0039                   					Dc.w		$0039											; ACDC params
02CAC
02CAC   01DF                   					DC.W		defmBounds_BPALST-1								; ActiveHeight
02CAE   004F                   					DC.W		((defmBounds_RPALST*8)/64)-1					; ActiveWidth
02CB0   0030                   					DC.W		(defmBounds_BPALFF-defmBounds_BPALST)/2			; BorderHeight
02CB2   00BF                   					DC.W		((defmBounds_RPALFF*8)/32)-1					; BorderWidth
02CB4   0010                   					DC.W		(((defmBounds_RPALFF-defmBounds_RPALST)/2)*8)/32 ; BorderSide
02CB6   0100                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*8)/8))		; SkipFactor
02CB8   0000 9C40              					Dc.l		defmPALSTB8										; BaseOffset
02CBC
02CBC                          	_EndsVidParms_DAFB_PALconvST
02CBC
02CBC                          	;
02CBC                          	; PAL (Full Frame Convolved) Display parameters
02CBC                          	;
02CBC                          	_sVidParms_DAFB_PALconvFF
02CBC   0000 0122              					Dc.l		_EndsVidParms_DAFB_PALconvFF-_sVidParms_DAFB_PALconvFF	; block size
02CC0
02CC0                          	; Clock chip params
02CC0                          	;
02CC0   0D 09 01 00 06         					Dc.b		$0D,$09,$01,$00,$06,$04,$00,$01					; Clock chip params
02CC8   01 01 05 06 00         					Dc.b		$01,$01,$05,$06,$00,$01,$00,$00
02CD0
02CD0                          	; Misc params
02CD0                          	;
02CD0   83 83                  					Dc.b		FourthVidMode,FourthVidMode						; Maxmode a == b.
02CD2   0000 1420              					Dc.l		DAFBPALConvOff									; FrameBase
02CD6
02CD6                          	; One bit mode params
02CD6                          	;
02CD6   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$060E,$007C					; DAFB params
02CE0   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02CEE   00DB 00FA 06FA         					Dc.w		$00DB,$00FA,$06FA,$075E,$0271,$0270,$0004,$0009	;
02CFE   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$08DC
02D06   0021                   					Dc.w		$0021											; ACDC params
02D08
02D08   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02D0A   000B                   					DC.W		((defmBounds_RPALFF*1)/64)-1					; ActiveWidth
02D0C   0000                   					DC.W		0												; BorderHeight
02D0E   FFFF                   					DC.W		0-1												; BorderWidth
02D10   0000                   					DC.W		0												; BorderSide
02D12   03A0                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*1)/8))		; SkipFactor
02D14   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02D18
02D18                          	; Two bit mode params
02D18                          	;
02D18   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$0606,$007C					; DAFB params
02D22   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02D30   00DB 0112 0712         					Dc.w		$00DB,$0112,$0712,$075E,$0271,$0270,$0004,$0009	;
02D40   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0904
02D48   0029                   					Dc.w		$0029											; ACDC params
02D4A
02D4A   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02D4C   0017                   					DC.W		((defmBounds_RPALFF*2)/64)-1					; ActiveWidth
02D4E   0000                   					DC.W		0												; BorderHeight
02D50   FFFF                   					DC.W		0-1												; BorderWidth
02D52   0000                   					DC.W		0												; BorderSide
02D54   0340                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*2)/8))		; SkipFactor
02D56   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02D5A
02D5A                          	; Four bit mode params
02D5A                          	;
02D5A   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$0602,$007C					; DAFB params
02D64   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02D72   00DB 011E 071E         					Dc.w		$00DB,$011E,$071E,$075E,$0271,$0270,$0004,$0009	;
02D82   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0918
02D8A   0031                   					Dc.w		$0031											; ACDC params
02D8C
02D8C   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02D8E   002F                   					DC.W		((defmBounds_RPALFF*4)/64)-1					; ActiveWidth
02D90   0000                   					DC.W		0												; BorderHeight
02D92   FFFF                   					DC.W		0-1												; BorderWidth
02D94   0000                   					DC.W		0												; BorderSide
02D96   0280                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*4)/8))		; SkipFactor
02D98   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02D9C
02D9C                          	; Eight bit mode params
02D9C                          	;
02D9C   000A 0001 0200         					Dc.w		$000A,$0001,$0200,$0600,$007C					; DAFB params
02DA6   0FF2 0324 03B0         					Dc.w		$0FF2,$0324,$03B0,$0046,$075F,$008B,$0093		; Swatch params
02DB4   00DB 0124 0724         					Dc.w		$00DB,$0124,$0724,$075E,$0271,$0270,$0004,$0009	;
02DC4   0027 0267 026B         					Dc.w		$0027,$0267,$026B,$0922
02DCC   0039                   					Dc.w		$0039											; ACDC params
02DCE
02DCE   023F                   					DC.W		defmBounds_BPALFF-1								; ActiveHeight
02DD0   005F                   					DC.W		((defmBounds_RPALFF*8)/64)-1					; ActiveWidth
02DD2   0000                   					DC.W		0												; BorderHeight
02DD4   FFFF                   					DC.W		0-1												; BorderWidth
02DD6   0000                   					DC.W		0												; BorderSide
02DD8   0100                   					DC.W		(DAFB_1024_RB-((defmBounds_RPALFF*8)/8))		; SkipFactor
02DDA   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02DDE
02DDE                          	_EndsVidParms_DAFB_PALconvFF
02DDE
02DDE                          	;
02DDE                          	; 19Ó DAFB parameters
02DDE                          	;
02DDE                          	_sVidParms_DAFB_19
02DDE   0000 0164              					DC.L		_EndsVidParms_DAFB_19-_sVidParms_DAFB_19		; block size
02DE2
02DE2                          	; Clock chip parms
02DE2   08 0F 00 00 0F         					DC.B		$08,$0F,$00,$00,$0F,$01,$00,$00					; Clock chip parms	300,310,320,330,340,350,360,3
02DEA   00 01 05 06 04         					DC.B		$00,$01,$05,$06,$04,$01,$00,$00					;					380,390,3A0,3B0,3C0,3D0,3E0,3F0
02DF2
02DF2                          	; Misc params
02DF2                          	;
02DF2   83 84                  					Dc.b		FourthVidMode,FifthVidMode						; MaxMode a,b
02DF4   0000 1000              					Dc.l		DAFBStdOffset									;
02DF8
02DF8                          	; One bit mode parameters
02DF8                          	;
02DF8   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0606,$0030					; DAFB parms	0,4,8,C,10
02E02   0FF2 012A 00A5         					DC.W		$0FF2,$012A,$00A5,$000C,$014B,$0017,$001A		; Swatch parms	100,124,128,12C,130,134,13
02E10                          	;jwh				DC.W		$0023,$003F,$013F,$014A,$0648,$0646,$0004,$0009	;				13C,140,144,148,14C,150,154
02E10   0023 0035 0135         					DC.W		$0023,$0035,$0135,$014A,$0648,$0646,$0004,$0009	;				13C,140,144,148,14C,150,154,158
02E20                          	;jwh				DC.W		$0040,$0640,$0644,$0029							;				15C,160,164,168
02E20   0040 0640 0644         					DC.W		$0040,$0640,$0644,$001B							;				15C,160,164,168						;jwh
02E28   00C0                   					DC.W		$00C0											; ACDC parms	200
02E2A
02E2A   02FF                   					DC.W		defmBounds_B19-1								; ActiveHeight
02E2C   000F                   					DC.W		((defmBounds_R19*1)/64)-1						; ActiveWidth
02E2E   0000                   					DC.W		0												; BorderHeight
02E30   FFFF                   					DC.W		0-1												; BorderWidth
02E32   0000                   					DC.W		0												; BorderSide
02E34   0180                   					DC.W		(DAFB_512_RB-((defmBounds_R19*1)/8))			; SkipFactor
02E36   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02E3A
02E3A                          	; Two bit mode parameters
02E3A                          	;
02E3A   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0602,$0030					; DAFB parms
02E44   0FF2 012A 00A5         					DC.W		$0FF2,$012A,$00A5,$000C,$014B,$0017,$001A		; Swatch parms
02E52                          	;jwh				DC.W		$0023,$003F,$013F,$014A,$0648,$0646,$0004,$0009	;
02E52   0023 0035 0135         					DC.W		$0023,$0035,$0135,$014A,$0648,$0646,$0004,$0009	;						;jwh
02E62                          	;jwh				DC.W		$0040,$0640,$0644,$0035							;
02E62   0040 0640 0644         					DC.W		$0040,$0640,$0644,$002B							;						;jwh
02E6A   00C8                   					DC.W		$00C8											; ACDC parms
02E6C
02E6C   02FF                   					DC.W		defmBounds_B19-1								; ActiveHeight
02E6E   001F                   					DC.W		((defmBounds_R19*2)/64)-1						; ActiveWidth
02E70   0000                   					DC.W		0												; BorderHeight
02E72   FFFF                   					DC.W		0-1												; BorderWidth
02E74   0000                   					DC.W		0												; BorderSide
02E76   0100                   					DC.W		(DAFB_512_RB-((defmBounds_R19*2)/8))			; SkipFactor
02E78   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02E7C
02E7C                          	; Four bit mode parameters
02E7C                          	;
02E7C   0008 0000 0080         					DC.W		$0008,$0000,$0080,$0600,$0030					; DAFB parms
02E86   0FF2 012A 00A5         					DC.W		$0FF2,$012A,$00A5,$000C,$014B,$0017,$001A		; Swatch parms
02E94                          	;jwh				DC.W		$0023,$003F,$013F,$014A,$0648,$0646,$0004,$0009	;
02E94   0023 0035 0135         					DC.W		$0023,$0035,$0135,$014A,$0648,$0646,$0004,$0009	;						;jwh
02EA4                          	;jwh				DC.W		$0040,$0640,$0644,$003B							;
02EA4   0040 0640 0644         					DC.W		$0040,$0640,$0644,$0031							;						;jwh
02EAC   00D0                   					DC.W		$00D0											; ACDC parms
02EAE
02EAE   02FF                   					DC.W		defmBounds_B19-1								; ActiveHeight
02EB0   003F                   					DC.W		((defmBounds_R19*4)/64)-1						; ActiveWidth
02EB2   0000                   					DC.W		0												; BorderHeight
02EB4   FFFF                   					DC.W		0-1												; BorderWidth
02EB6   0000                   					DC.W		0												; BorderSide
02EB8   0000                   					DC.W		(DAFB_512_RB-((defmBounds_R19*4)/8))			; SkipFactor
02EBA   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02EBE
02EBE                          	; Eight bit mode parameters
02EBE                          	;
02EBE   0008 0000 0100         					DC.W		$0008,$0000,$0100,$06FF,$0030					; DAFB parms
02EC8   0FF2 012A 00A5         					DC.W		$0FF2,$012A,$00A5,$000C,$014B,$0017,$001A		; Swatch parms
02ED6                          	;jwh				DC.W		$0023,$003F,$013F,$014A,$0648,$0646,$0004,$0009	;
02ED6   0023 0035 0135         					DC.W		$0023,$0035,$0135,$014A,$0648,$0646,$0004,$0009	;						;jwh
02EE6                          	;jwh				DC.W		$0040,$0640,$0644,$003F							;
02EE6   0040 0640 0644         					DC.W		$0040,$0640,$0644,$0035							;						;jwh
02EEE   00D8                   					DC.W		$00D8											; ACDC parms
02EF0
02EF0   02FF                   					DC.W		defmBounds_B19-1								; ActiveHeight
02EF2   007F                   					DC.W		((defmBounds_R19*8)/64)-1						; ActiveWidth
02EF4   0000                   					DC.W		0												; BorderHeight
02EF6   FFFF                   					DC.W		0-1												; BorderWidth
02EF8   0000                   					DC.W		0												; BorderSide
02EFA   0000                   					DC.W		(DAFB_1024_RB-((defmBounds_R19*8)/8))			; SkipFactor
02EFC   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02F00
02F00                          	; Sixteen bit mode parameters
02F00                          	;
02F00   0008 0000 0200         					DC.W		$0008,$0000,$0200,$06FF,$0031					; DAFB parms
02F0A   0FF2 0254 014A         					DC.W		$0FF2,$0254,$014A,$0018,$0297,$002F,$0035		; Swatch parms
02F18                          	;jwh				DC.W		$0047,$0081,$0281,$0296,$0648,$0646,$0004,$0009	;
02F18   0047 006B 026B         					DC.W		$0047,$006B,$026B,$0296,$0648,$0646,$0004,$0009	;						;jwh
02F28                          	;jwh				DC.W		$0040,$0640,$0644,$0080							;
02F28   0040 0640 0644         					DC.W		$0040,$0640,$0644,$006A							;						;jwh
02F30   00BE                   					DC.W		$00BE											; ACDC parms
02F32
02F32   02FF                   					DC.W		defmBounds_B19-1								; ActiveHeight
02F34   00FF                   					DC.W		((defmBounds_R19*16)/64)-1						; ActiveWidth
02F36   0000                   					DC.W		0												; BorderHeight
02F38   FFFF                   					DC.W		0-1												; BorderWidth
02F3A   0000                   					DC.W		0												; BorderSide
02F3C   0000                   					DC.W		(DAFB_2048_RB-((defmBounds_R19*16)/8))			; SkipFactor
02F3E   0000 0000              					Dc.l		defmBaseOffset									; BaseOffset
02F42
02F42                          	_EndsVidParms_DAFB_19
02F42
02F42                          	;-------------------------------------------------------------
02F42                          	;				One-Bit per pixel parameters
02F42                          	;-------------------------------------------------------------
02F42                          	;
02F42
02F42                          	_OBM_DAFB_2P	OSLstEntry	mVidParams,_OBVParms_DAFB_2P	;
02F42   0100 0100             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_2P-*)**$00FFFFFF)
02F46                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02F46   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02F4A                          					DatLstEntry mDevType,defmDevType			;
02F4A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02F4E                          					DatLstEntry	EndOfList,0						;
02F4E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02F52
02F52                          	_OBM_DAFB_FP	OSLstEntry	mVidParams,_OBVParms_DAFB_FP	;
02F52   0100 011E             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_FP-*)**$00FFFFFF)
02F56                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02F56   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02F5A                          					DatLstEntry mDevType,defmDevType			;
02F5A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02F5E                          					DatLstEntry	EndOfList,0						;
02F5E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02F62
02F62                          	_OBM_DAFB_GS	OSLstEntry	mVidParams,_OBVParms_DAFB_GS	;
02F62   0100 013C             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_GS-*)**$00FFFFFF)
02F66                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02F66   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02F6A                          					DatLstEntry mDevType,defmDevType			;
02F6A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02F6E                          					DatLstEntry	EndOfList,0						;
02F6E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02F72
02F72                          	_OBM_DAFB_NTSCST
02F72                          					OSLstEntry	mVidParams,_OBVParms_DAFB_NTSCST ;
02F72   0100 015A             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_NTSCST-*)**$00FFFFFF)
02F76                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02F76   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02F7A                          					DatLstEntry mDevType,defmDevType			;
02F7A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02F7E                          					DatLstEntry	EndOfList,0						;
02F7E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02F82
02F82                          	_OBM_DAFB_NTSCFF
02F82                          					OSLstEntry	mVidParams,_OBVParms_DAFB_NTSCFF ;
02F82   0100 0178             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_NTSCFF-*)**$00FFFFFF)
02F86                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02F86   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02F8A                          					DatLstEntry mDevType,defmDevType			;
02F8A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02F8E                          					DatLstEntry	EndOfList,0						;
02F8E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02F92
02F92                          	_OBM_DAFB_NTSCSTconv
02F92                          					OSLstEntry	mVidParams,_OBVParms_DAFB_NTSCSTconv ;
02F92   0100 0196             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_NTSCSTconv-*)**$00FFFFFF)
02F96                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02F96   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02F9A                          					DatLstEntry mDevType,defmDevType			;
02F9A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02F9E                          					DatLstEntry	EndOfList,0						;
02F9E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02FA2
02FA2                          	_OBM_DAFB_NTSCFFconv
02FA2                          					OSLstEntry	mVidParams,_OBVParms_DAFB_NTSCFFconv ;
02FA2   0100 01B4             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_NTSCFFconv-*)**$00FFFFFF)
02FA6                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02FA6   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02FAA                          					DatLstEntry mDevType,defmDevType			;
02FAA   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02FAE                          					DatLstEntry	EndOfList,0						;
02FAE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02FB2
02FB2                          	_OBM_DAFB_HR	OSLstEntry	mVidParams,_OBVParms_DAFB_640by480 ;
02FB2   0100 01D2             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_640by480-*)**$00FFFFFF)
02FB6                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02FB6   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02FBA                          					DatLstEntry mDevType,defmDevType			;
02FBA   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02FBE                          					DatLstEntry	EndOfList,0						;
02FBE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02FC2
02FC2                          	_OBM_DAFB_VGA	OSLstEntry	mVidParams,_OBVParms_DAFB_640by480 ;
02FC2   0100 01C2             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_640by480-*)**$00FFFFFF)
02FC6                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02FC6   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02FCA                          					DatLstEntry mDevType,defmDevType			;
02FCA   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02FCE                          					DatLstEntry	EndOfList,0						;
02FCE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02FD2
02FD2                          	_OBM_DAFB_SVGA	OSLstEntry	mVidParams,_OBVParms_DAFB_SVGA	;
02FD2   0100 01E0             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_SVGA-*)**$00FFFFFF)
02FD6                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02FD6   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02FDA                          					DatLstEntry mDevType,defmDevType			;
02FDA   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02FDE                          					DatLstEntry	EndOfList,0						;
02FDE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02FE2
02FE2                          	_OBM_DAFB_GF	OSLstEntry	mVidParams,_OBVParms_DAFB_GF	;
02FE2   0100 01FE             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_GF-*)**$00FFFFFF)
02FE6                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02FE6   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02FEA                          					DatLstEntry mDevType,defmDevType			;
02FEA   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02FEE                          					DatLstEntry	EndOfList,0						;
02FEE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
02FF2
02FF2                          	_OBM_DAFB_PALST
02FF2                          					OSLstEntry	mVidParams,_OBVParms_DAFB_PALST	;
02FF2   0100 021C             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_PALST-*)**$00FFFFFF)
02FF6                          					DatLstEntry	mPageCnt,defPages_DAFB			;
02FF6   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
02FFA                          					DatLstEntry mDevType,defmDevType			;
02FFA   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
02FFE                          					DatLstEntry	EndOfList,0						;
02FFE   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03002
03002                          	_OBM_DAFB_PALSTconv
03002                          					OSLstEntry	mVidParams,_OBVParms_DAFB_PALSTconv	;
03002   0100 0268             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_PALSTconv-*)**$00FFFFFF)
03006                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03006   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0300A                          					DatLstEntry mDevType,defmDevType			;
0300A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
0300E                          					DatLstEntry	EndOfList,0						;
0300E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03012
03012                          	_OBM_DAFB_PALFF
03012                          					OSLstEntry	mVidParams,_OBVParms_DAFB_PALFF	;
03012   0100 022A             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_PALFF-*)**$00FFFFFF)
03016                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03016   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0301A                          					DatLstEntry mDevType,defmDevType			;
0301A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
0301E                          					DatLstEntry	EndOfList,0						;
0301E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03022
03022                          	_OBM_DAFB_PALFFconv
03022                          					OSLstEntry	mVidParams,_OBVParms_DAFB_PALFFconv	;
03022   0100 0276             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_PALFFconv-*)**$00FFFFFF)
03026                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03026   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0302A                          					DatLstEntry mDevType,defmDevType			;
0302A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
0302E                          					DatLstEntry	EndOfList,0						;
0302E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03032
03032                          	_OBM_DAFB_19	OSLstEntry	mVidParams,_OBVParms_DAFB_19	;
03032   0100 0294             1	  				DC.L		(mVidParams<<24)++((_OBVParms_DAFB_19-*)**$00FFFFFF)
03036                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03036   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0303A                          					DatLstEntry mDevType,defmDevType			;
0303A   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
0303E                          					DatLstEntry	EndOfList,0						;
0303E   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03042
03042   0000 002E              	_OBVParms_DAFB_2P	DC.L	_EndOBVParms_DAFB_2P-_OBVParms_DAFB_2P
03046
03046   0000 0A00              					DC.L	DAFB2POffset
0304A   0240                   					DC.W	DAFB_576_RB
0304C   0000 0000 0366         					DC.W	defmBounds_T2P,defmBounds_L2P,defmBounds_B2P,defmBounds_R2P
03054   0000                   					DC.W	defVersion
03056   0000                   					DC.W	0									; packType not used
03058   0000 0000              					DC.L	0									; packSize not used
0305C   004D 0000              					DC.L	HRes2P
03060   004D 0000              					DC.L	VRes2P
03064   0000                   					DC.W	defPixelType
03066   0001                   					DC.W	1
03068   0001                   					DC.W	defCmpCount
0306A   0001                   					DC.W	1
0306C   0000 0000              					DC.L	defmPlaneBytes
03070                          	_EndOBVParms_DAFB_2P
03070
03070   0000 002E              	_OBVParms_DAFB_FP	DC.L	_EndOBVParms_DAFB_FP-_OBVParms_DAFB_FP
03074
03074   0000 1000              					DC.L	DAFBStdOffset
03078   0200                   					DC.W	DAFB_512_RB
0307A   0000 0000 0366         					DC.W	defmBounds_TFP,defmBounds_LFP,defmBounds_BFP,defmBounds_RFP
03082   0000                   					DC.W	defVersion
03084   0000                   					DC.W	0									; packType not used
03086   0000 0000              					DC.L	0									; packSize not used
0308A   0050 0000              					DC.L	HResFP
0308E   0050 0000              					DC.L	VResFP
03092   0000                   					DC.W	defPixelType
03094   0001                   					DC.W	1
03096   0001                   					DC.W	defCmpCount
03098   0001                   					DC.W	1
0309A   0000 0000              					DC.L	defmPlaneBytes
0309E                          	_EndOBVParms_DAFB_FP
0309E
0309E   0000 002E              	_OBVParms_DAFB_GS	DC.L	_EndOBVParms_DAFB_GS-_OBVParms_DAFB_GS
030A2
030A2   0000 1000              					DC.L	DAFBStdOffset
030A6   0400                   					DC.W	DAFB_1024_RB
030A8   0000 0000 0180         					DC.W	defmBounds_TGS,defmBounds_LGS,defmBounds_BGS,defmBounds_RGS
030B0   0000                   					DC.W	defVersion
030B2   0000                   					DC.W	0									; packType not used
030B4   0000 0000              					DC.L	0									; packSize not used
030B8   0048 0000              					DC.L	HResGS
030BC   0048 0000              					DC.L	VResGS
030C0   0000                   					DC.W	defPixelType
030C2   0001                   					DC.W	1
030C4   0001                   					DC.W	defCmpCount
030C6   0001                   					DC.W	1
030C8   0000 0000              					DC.L	defmPlaneBytes
030CC                          	_EndOBVParms_DAFB_GS
030CC
030CC   0000 002E              	_OBVParms_DAFB_NTSCST	Dc.l	_EndOBVParms_DAFB_NTSCST-_OBVParms_DAFB_NTSCST
030D0   0000 D028              					Dc.l	DAFBNTSCOffset+defmNTSCSTB1
030D4   0400                   					Dc.w	DAFB_1024_RB
030D6   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
030DE   0000                   					Dc.w	defVersion
030E0   0000                   					Dc.w	0									; packType not used
030E2   0000 0000              					Dc.l	0									; packSize not used
030E6   0048 0000              					Dc.l	HResNTSC
030EA   0048 0000              					Dc.l	VResNTSC
030EE   0000                   					Dc.w	defPixelType
030F0   0001                   					Dc.w	1
030F2   0001                   					Dc.w	defCmpCount
030F4   0001                   					Dc.w	1
030F6   0000 0000              					Dc.l	defmPlaneBytes
030FA                          	_EndOBVParms_DAFB_NTSCST
030FA
030FA   0000 002E              	_OBVParms_DAFB_NTSCFF	Dc.l	_EndOBVParms_DAFB_NTSCFF-_OBVParms_DAFB_NTSCFF
030FE   0000 1020              					Dc.l	DAFBNTSCOffset
03102   0400                   					Dc.w	DAFB_1024_RB
03104   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
0310C   0000                   					Dc.w	defVersion
0310E   0000                   					Dc.w	0									; packType not used
03110   0000 0000              					Dc.l	0									; packSize not used
03114   0048 0000              					Dc.l	HResNTSC
03118   0048 0000              					Dc.l	VResNTSC
0311C   0000                   					Dc.w	defPixelType
0311E   0001                   					Dc.w	1
03120   0001                   					Dc.w	defCmpCount
03122   0001                   					Dc.w	1
03124   0000 0000              					Dc.l	defmPlaneBytes
03128                          	_EndOBVParms_DAFB_NTSCFF
03128
03128   0000 002E              	_OBVParms_DAFB_NTSCSTconv	Dc.l	_EndOBVParms_DAFB_NTSCSTconv-_OBVParms_DAFB_NTSCSTconv
0312C   0000 D408              					Dc.l	DAFBNTSCConvOff+defmNTSCSTB1
03130   0400                   					Dc.w	DAFB_1024_RB
03132   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
0313A   0000                   					Dc.w	defVersion
0313C   0000                   					Dc.w	0									; packType not used
0313E   0000 0000              					Dc.l	0									; packSize not used
03142   0048 0000              					Dc.l	HResNTSC
03146   0048 0000              					Dc.l	VResNTSC
0314A   0000                   					Dc.w	defPixelType
0314C   0001                   					Dc.w	1
0314E   0001                   					Dc.w	defCmpCount
03150   0001                   					Dc.w	1
03152   0000 0000              					Dc.l	defmPlaneBytes
03156                          	_EndOBVParms_DAFB_NTSCSTconv
03156
03156   0000 002E              	_OBVParms_DAFB_NTSCFFconv	Dc.l	_EndOBVParms_DAFB_NTSCFFconv-_OBVParms_DAFB_NTSCFFconv
0315A   0000 1400              					Dc.l	DAFBNTSCConvOff
0315E   0400                   					Dc.w	DAFB_1024_RB
03160   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
03168   0000                   					Dc.w	defVersion
0316A   0000                   					Dc.w	0									; packType not used
0316C   0000 0000              					Dc.l	0									; packSize not used
03170   0048 0000              					Dc.l	HResNTSC
03174   0048 0000              					Dc.l	VResNTSC
03178   0000                   					Dc.w	defPixelType
0317A   0001                   					Dc.w	1
0317C   0001                   					Dc.w	defCmpCount
0317E   0001                   					Dc.w	1
03180   0000 0000              					Dc.l	defmPlaneBytes
03184                          	_EndOBVParms_DAFB_NTSCFFconv
03184
03184   0000 002E              	_OBVParms_DAFB_640by480		DC.L	_EndOBVParms_DAFB_640by480-_OBVParms_DAFB_640by480
03188
03188   0000 1000              					DC.L	DAFBStdOffset
0318C   0400                   					DC.W	DAFB_1024_RB
0318E   0000 0000 01E0         					DC.W	0,0,480,640							; who needs equates in a file of this size?
03196   0000                   					DC.W	defVersion
03198   0000                   					DC.W	0									; packType not used
0319A   0000 0000              					DC.L	0									; packSize not used
0319E   0048 0000              					DC.L	$00480000							; 72 hdpi
031A2   0048 0000              					DC.L	$00480000							; 72 vdpi
031A6   0000                   					DC.W	defPixelType
031A8   0001                   					DC.W	1
031AA   0001                   					DC.W	defCmpCount
031AC   0001                   					DC.W	1
031AE   0000 0000              					DC.L	defmPlaneBytes
031B2                          	_EndOBVParms_DAFB_640by480
031B2
031B2   0000 002E              	_OBVParms_DAFB_SVGA	DC.L	_EndOBVParms_DAFB_SVGA-_OBVParms_DAFB_SVGA
031B6
031B6   0000 0E00              					DC.L	DAFBBSOffset
031BA   0340                   					DC.W	DAFB_832_RB
031BC   0000 0000 0258         					DC.W	defmBounds_TSVGA,defmBounds_LSVGA,defmBounds_BSVGA,defmBounds_RSVGA
031C4   0000                   					DC.W	defVersion
031C6   0000                   					DC.W	0									; packType not used
031C8   0000 0000              					DC.L	0									; packSize not used
031CC   0048 0000              					DC.L	HResSVGA
031D0   0048 0000              					DC.L	VResSVGA
031D4   0000                   					DC.W	defPixelType
031D6   0001                   					DC.W	1
031D8   0001                   					DC.W	defCmpCount
031DA   0001                   					DC.W	1
031DC   0000 0000              					DC.L	defmPlaneBytes
031E0                          	_EndOBVParms_DAFB_SVGA
031E0
031E0   0000 002E              	_OBVParms_DAFB_GF	DC.L	_EndOBVParms_DAFB_GF-_OBVParms_DAFB_GF
031E4
031E4   0000 0E00              					DC.L	DAFBBSOffset
031E8   0340                   					DC.W	DAFB_832_RB
031EA   0000 0000 0270         					DC.W	defmBounds_TGF,defmBounds_LGF,defmBounds_BGF,defmBounds_RGF
031F2   0000                   					DC.W	defVersion
031F4   0000                   					DC.W	0									; packType not used
031F6   0000 0000              					DC.L	0									; packSize not used
031FA   0048 0000              					DC.L	HResGF
031FE   0048 0000              					DC.L	VResGF
03202   0000                   					DC.W	defPixelType
03204   0001                   					DC.W	1
03206   0001                   					DC.W	defCmpCount
03208   0001                   					DC.W	1
0320A   0000 0000              					DC.L	defmPlaneBytes
0320E                          	_EndOBVParms_DAFB_GF
0320E
0320E   0000 002E              	_OBVParms_DAFB_PALST	Dc.l	_EndOBVParms_DAFB_PALST-_OBVParms_DAFB_PALST
03212   0000 AA28              					Dc.l	DAFBPALOffset+defmPALSTB1
03216   0340                   					Dc.w	DAFB_832_RB
03218   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
03220   0000                   					Dc.w	defVersion
03222   0000                   					Dc.w	0									; packType not used
03224   0000 0000              					Dc.l	0									; packSize not used
03228   0048 0000              					Dc.l	HResPAL
0322C   0048 0000              					Dc.l	VResPAL
03230   0000                   					Dc.w	defPixelType
03232   0001                   					Dc.w	1
03234   0001                   					Dc.w	defCmpCount
03236   0001                   					Dc.w	1
03238   0000 0000              					Dc.l	defmPlaneBytes
0323C                          	_EndOBVParms_DAFB_PALST
0323C
0323C   0000 002E              	_OBVParms_DAFB_PALFF	Dc.l	_EndOBVParms_DAFB_PALFF-_OBVParms_DAFB_PALFF
03240   0000 0E20              					Dc.l	DAFBPALOffset
03244   0340                   					Dc.w	DAFB_832_RB
03246   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
0324E   0000                   					Dc.w	defVersion
03250   0000                   					Dc.w	0									; packType not used
03252   0000 0000              					Dc.l	0									; packSize not used
03256   0048 0000              					Dc.l	HResPAL
0325A   0048 0000              					Dc.l	VResPAL
0325E   0000                   					Dc.w	defPixelType
03260   0001                   					Dc.w	1
03262   0001                   					Dc.w	defCmpCount
03264   0001                   					Dc.w	1
03266   0000 0000              					Dc.l	defmPlaneBytes
0326A                          	_EndOBVParms_DAFB_PALFF
0326A
0326A   0000 002E              	_OBVParms_DAFB_PALSTconv	Dc.l	_EndOBVParms_DAFB_PALSTconv-_OBVParms_DAFB_PALSTconv
0326E   0000 D428              					Dc.l	DAFBPALConvOff+defmPALSTB1Conv
03272   0400                   					Dc.w	DAFB_1024_RB
03274   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
0327C   0000                   					Dc.w	defVersion
0327E   0000                   					Dc.w	0									; packType not used
03280   0000 0000              					Dc.l	0									; packSize not used
03284   0048 0000              					Dc.l	HResPAL
03288   0048 0000              					Dc.l	VResPAL
0328C   0000                   					Dc.w	defPixelType
0328E   0001                   					Dc.w	1
03290   0001                   					Dc.w	defCmpCount
03292   0001                   					Dc.w	1
03294   0000 0000              					Dc.l	defmPlaneBytes
03298                          	_EndOBVParms_DAFB_PALSTconv
03298
03298   0000 002E              	_OBVParms_DAFB_PALFFconv	Dc.l	_EndOBVParms_DAFB_PALFFconv-_OBVParms_DAFB_PALFFconv
0329C   0000 1420              					Dc.l	DAFBPALConvOff
032A0   0400                   					Dc.w	DAFB_1024_RB
032A2   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
032AA   0000                   					Dc.w	defVersion
032AC   0000                   					Dc.w	0									; packType not used
032AE   0000 0000              					Dc.l	0									; packSize not used
032B2   0048 0000              					Dc.l	HResPAL
032B6   0048 0000              					Dc.l	VResPAL
032BA   0000                   					Dc.w	defPixelType
032BC   0001                   					Dc.w	1
032BE   0001                   					Dc.w	defCmpCount
032C0   0001                   					Dc.w	1
032C2   0000 0000              					Dc.l	defmPlaneBytes
032C6                          	_EndOBVParms_DAFB_PALFFconv
032C6
032C6   0000 002E              	_OBVParms_DAFB_19	DC.L	_EndOBVParms_DAFB_19-_OBVParms_DAFB_19
032CA
032CA   0000 1000              					DC.L	DAFBStdOffset
032CE   0200                   					DC.W	DAFB_512_RB
032D0   0000 0000 0300         					DC.W	defmBounds_T19,defmBounds_L19,defmBounds_B19,defmBounds_R19
032D8   0000                   					DC.W	defVersion
032DA   0000                   					DC.W	0									; packType not used
032DC   0000 0000              					DC.L	0									; packSize not used
032E0   0048 0000              					DC.L	HRes19
032E4   0048 0000              					DC.L	VRes19
032E8   0000                   					DC.W	defPixelType
032EA   0001                   					DC.W	1
032EC   0001                   					DC.W	defCmpCount
032EE   0001                   					DC.W	1
032F0   0000 0000              					DC.L	defmPlaneBytes
032F4                          	_EndOBVParms_DAFB_19
032F4
032F4                          	;-------------------------------------------------------------
032F4                          	;				Two-Bit per pixel parameters
032F4                          	;-------------------------------------------------------------
032F4                          	;
032F4
032F4                          	_TBM_DAFB_2P	OSLstEntry	mVidParams,_TBVParms_DAFB_2P	;
032F4   0100 0100             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_2P-*)**$00FFFFFF)
032F8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
032F8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
032FC                          					DatLstEntry mDevType,defmDevType			;
032FC   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03300                          					DatLstEntry	EndOfList,0						;
03300   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03304
03304                          	_TBM_DAFB_FP	OSLstEntry	mVidParams,_TBVParms_DAFB_FP	;
03304   0100 011E             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_FP-*)**$00FFFFFF)
03308                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03308   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0330C                          					DatLstEntry mDevType,defmDevType			;
0330C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03310                          					DatLstEntry	EndOfList,0						;
03310   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03314
03314                          	_TBM_DAFB_GS	OSLstEntry	mVidParams,_TBVParms_DAFB_GS	;
03314   0100 013C             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_GS-*)**$00FFFFFF)
03318                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03318   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0331C                          					DatLstEntry mDevType,defmDevType			;
0331C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03320                          					DatLstEntry	EndOfList,0						;
03320   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03324
03324                          	_TBM_DAFB_NTSCST
03324                          					OSLstEntry	mVidParams,_TBVParms_DAFB_NTSCST ;
03324   0100 015A             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_NTSCST-*)**$00FFFFFF)
03328                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03328   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0332C                          					DatLstEntry mDevType,defmDevType			;
0332C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03330                          					DatLstEntry	EndOfList,0						;
03330   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03334
03334                          	_TBM_DAFB_NTSCFF
03334                          					OSLstEntry	mVidParams,_TBVParms_DAFB_NTSCFF ;
03334   0100 0178             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_NTSCFF-*)**$00FFFFFF)
03338                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03338   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0333C                          					DatLstEntry mDevType,defmDevType			;
0333C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03340                          					DatLstEntry	EndOfList,0						;
03340   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03344
03344                          	_TBM_DAFB_NTSCSTconv
03344                          					OSLstEntry	mVidParams,_TBVParms_DAFB_NTSCSTconv ;
03344   0100 0196             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_NTSCSTconv-*)**$00FFFFFF)
03348                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03348   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0334C                          					DatLstEntry mDevType,defmDevType			;
0334C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03350                          					DatLstEntry	EndOfList,0						;
03350   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03354
03354                          	_TBM_DAFB_NTSCFFconv
03354                          					OSLstEntry	mVidParams,_TBVParms_DAFB_NTSCFFconv ;
03354   0100 01B4             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_NTSCFFconv-*)**$00FFFFFF)
03358                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03358   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0335C                          					DatLstEntry mDevType,defmDevType			;
0335C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03360                          					DatLstEntry	EndOfList,0						;
03360   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03364
03364                          	_TBM_DAFB_HR	OSLstEntry	mVidParams,_TBVParms_DAFB_640by480 ;
03364   0100 01D2             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_640by480-*)**$00FFFFFF)
03368                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03368   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0336C                          					DatLstEntry mDevType,defmDevType			;
0336C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03370                          					DatLstEntry	EndOfList,0						;
03370   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03374
03374                          	_TBM_DAFB_VGA	OSLstEntry	mVidParams,_TBVParms_DAFB_640by480	;
03374   0100 01C2             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_640by480-*)**$00FFFFFF)
03378                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03378   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0337C                          					DatLstEntry mDevType,defmDevType			;
0337C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03380                          					DatLstEntry	EndOfList,0						;
03380   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03384
03384                          	_TBM_DAFB_SVGA	OSLstEntry	mVidParams,_TBVParms_DAFB_SVGA	;
03384   0100 01E0             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_SVGA-*)**$00FFFFFF)
03388                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03388   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0338C                          					DatLstEntry mDevType,defmDevType			;
0338C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03390                          					DatLstEntry	EndOfList,0						;
03390   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03394
03394                          	_TBM_DAFB_GF	OSLstEntry	mVidParams,_TBVParms_DAFB_GF	;
03394   0100 01FE             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_GF-*)**$00FFFFFF)
03398                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03398   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0339C                          					DatLstEntry mDevType,defmDevType			;
0339C   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
033A0                          					DatLstEntry	EndOfList,0						;
033A0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
033A4
033A4                          	_TBM_DAFB_PALST
033A4                          					OSLstEntry	mVidParams,_TBVParms_DAFB_PALST	;
033A4   0100 021C             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_PALST-*)**$00FFFFFF)
033A8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
033A8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
033AC                          					DatLstEntry mDevType,defmDevType			;
033AC   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
033B0                          					DatLstEntry	EndOfList,0						;
033B0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
033B4
033B4                          	_TBM_DAFB_PALSTconv
033B4                          					OSLstEntry	mVidParams,_TBVParms_DAFB_PALSTconv	;
033B4   0100 0268             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_PALSTconv-*)**$00FFFFFF)
033B8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
033B8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
033BC                          					DatLstEntry mDevType,defmDevType			;
033BC   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
033C0                          					DatLstEntry	EndOfList,0						;
033C0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
033C4
033C4                          	_TBM_DAFB_PALFF
033C4                          					OSLstEntry	mVidParams,_TBVParms_DAFB_PALFF	;
033C4   0100 022A             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_PALFF-*)**$00FFFFFF)
033C8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
033C8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
033CC                          					DatLstEntry mDevType,defmDevType			;
033CC   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
033D0                          					DatLstEntry	EndOfList,0						;
033D0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
033D4
033D4                          	_TBM_DAFB_PALFFconv
033D4                          					OSLstEntry	mVidParams,_TBVParms_DAFB_PALFFconv	;
033D4   0100 0276             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_PALFFconv-*)**$00FFFFFF)
033D8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
033D8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
033DC                          					DatLstEntry mDevType,defmDevType			;
033DC   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
033E0                          					DatLstEntry	EndOfList,0						;
033E0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
033E4
033E4                          	_TBM_DAFB_19	OSLstEntry	mVidParams,_TBVParms_DAFB_19	;
033E4   0100 0294             1	  				DC.L		(mVidParams<<24)++((_TBVParms_DAFB_19-*)**$00FFFFFF)
033E8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
033E8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
033EC                          					DatLstEntry mDevType,defmDevType			;
033EC   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
033F0                          					DatLstEntry	EndOfList,0						;
033F0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
033F4
033F4   0000 002E              	_TBVParms_DAFB_2P	DC.L	_EndTBVParms_DAFB_2P-_TBVParms_DAFB_2P
033F8
033F8   0000 0A00              					DC.L	DAFB2POffset
033FC   0240                   					DC.W	DAFB_576_RB
033FE   0000 0000 0366         					DC.W	defmBounds_T2P,defmBounds_L2P,defmBounds_B2P,defmBounds_R2P
03406   0000                   					DC.W	defVersion
03408   0000                   					DC.W	0									; packType not used
0340A   0000 0000              					DC.L	0									; packSize not used
0340E   004D 0000              					DC.L	HRes2P
03412   004D 0000              					DC.L	VRes2P
03416   0000                   					DC.W	defPixelType
03418   0002                   					DC.W	2
0341A   0001                   					DC.W	defCmpCount
0341C   0002                   					DC.W	2
0341E   0000 0000              					DC.L	defmPlaneBytes
03422                          	_EndTBVParms_DAFB_2P
03422
03422   0000 002E              	_TBVParms_DAFB_FP	DC.L	_EndTBVParms_DAFB_FP-_TBVParms_DAFB_FP
03426
03426   0000 1000              					DC.L	DAFBStdOffset
0342A   0200                   					DC.W	DAFB_512_RB
0342C   0000 0000 0366         					DC.W	defmBounds_TFP,defmBounds_LFP,defmBounds_BFP,defmBounds_RFP
03434   0000                   					DC.W	defVersion
03436   0000                   					DC.W	0									; packType not used
03438   0000 0000              					DC.L	0									; packSize not used
0343C   0050 0000              					DC.L	HResFP
03440   0050 0000              					DC.L	VResFP
03444   0000                   					DC.W	defPixelType
03446   0002                   					DC.W	2
03448   0001                   					DC.W	defCmpCount
0344A   0002                   					DC.W	2
0344C   0000 0000              					DC.L	defmPlaneBytes
03450                          	_EndTBVParms_DAFB_FP
03450
03450   0000 002E              	_TBVParms_DAFB_GS	DC.L	_EndTBVParms_DAFB_GS-_TBVParms_DAFB_GS
03454
03454   0000 1000              					DC.L	DAFBStdOffset
03458   0400                   					DC.W	DAFB_1024_RB
0345A   0000 0000 0180         					DC.W	defmBounds_TGS,defmBounds_LGS,defmBounds_BGS,defmBounds_RGS
03462   0000                   					DC.W	defVersion
03464   0000                   					DC.W	0									; packType not used
03466   0000 0000              					DC.L	0									; packSize not used
0346A   0048 0000              					DC.L	HResGS
0346E   0048 0000              					DC.L	VResGS
03472   0000                   					DC.W	defPixelType
03474   0002                   					DC.W	2
03476   0001                   					DC.W	defCmpCount
03478   0002                   					DC.W	2
0347A   0000 0000              					DC.L	defmPlaneBytes
0347E                          	_EndTBVParms_DAFB_GS
0347E
0347E   0000 002E              	_TBVParms_DAFB_NTSCST	Dc.l	_EndTBVParms_DAFB_NTSCST-_TBVParms_DAFB_NTSCST
03482   0000 D030              					Dc.l	DAFBNTSCOffset+defmNTSCSTB2
03486   0400                   					Dc.w	DAFB_1024_RB
03488   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
03490   0000                   					Dc.w	defVersion
03492   0000                   					Dc.w	0									; packType not used
03494   0000 0000              					Dc.l	0									; packSize not used
03498   0048 0000              					Dc.l	HResNTSC
0349C   0048 0000              					Dc.l	VResNTSC
034A0   0000                   					Dc.w	defPixelType
034A2   0002                   					Dc.w	2
034A4   0001                   					Dc.w	defCmpCount
034A6   0002                   					Dc.w	2
034A8   0000 0000              					Dc.l	defmPlaneBytes
034AC                          	_EndTBVParms_DAFB_NTSCST
034AC
034AC   0000 002E              	_TBVParms_DAFB_NTSCFF	Dc.l	_EndTBVParms_DAFB_NTSCFF-_TBVParms_DAFB_NTSCFF
034B0   0000 1020              					Dc.l	DAFBNTSCOffset
034B4   0400                   					Dc.w	DAFB_1024_RB
034B6   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
034BE   0000                   					Dc.w	defVersion
034C0   0000                   					Dc.w	0									; packType not used
034C2   0000 0000              					Dc.l	0									; packSize not used
034C6   0048 0000              					Dc.l	HResNTSC
034CA   0048 0000              					Dc.l	VResNTSC
034CE   0000                   					Dc.w	defPixelType
034D0   0002                   					Dc.w	2
034D2   0001                   					Dc.w	defCmpCount
034D4   0002                   					Dc.w	2
034D6   0000 0000              					Dc.l	defmPlaneBytes
034DA                          	_EndTBVParms_DAFB_NTSCFF
034DA
034DA   0000 002E              	_TBVParms_DAFB_NTSCSTconv	Dc.l	_EndTBVParms_DAFB_NTSCSTconv-_TBVParms_DAFB_NTSCSTconv
034DE   0000 D410              					Dc.l	DAFBNTSCConvOff+defmNTSCSTB2
034E2   0400                   					Dc.w	DAFB_1024_RB
034E4   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
034EC   0000                   					Dc.w	defVersion
034EE   0000                   					Dc.w	0									; packType not used
034F0   0000 0000              					Dc.l	0									; packSize not used
034F4   0048 0000              					Dc.l	HResNTSC
034F8   0048 0000              					Dc.l	VResNTSC
034FC   0000                   					Dc.w	defPixelType
034FE   0002                   					Dc.w	2
03500   0001                   					Dc.w	defCmpCount
03502   0002                   					Dc.w	2
03504   0000 0000              					Dc.l	defmPlaneBytes
03508                          	_EndTBVParms_DAFB_NTSCSTconv
03508
03508   0000 002E              	_TBVParms_DAFB_NTSCFFconv	Dc.l	_EndTBVParms_DAFB_NTSCFFconv-_TBVParms_DAFB_NTSCFFconv
0350C   0000 1400              					Dc.l	DAFBNTSCConvOff
03510   0400                   					Dc.w	DAFB_1024_RB
03512   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
0351A   0000                   					Dc.w	defVersion
0351C   0000                   					Dc.w	0									; packType not used
0351E   0000 0000              					Dc.l	0									; packSize not used
03522   0048 0000              					Dc.l	HResNTSC
03526   0048 0000              					Dc.l	VResNTSC
0352A   0000                   					Dc.w	defPixelType
0352C   0002                   					Dc.w	2
0352E   0001                   					Dc.w	defCmpCount
03530   0002                   					Dc.w	2
03532   0000 0000              					Dc.l	defmPlaneBytes
03536                          	_EndTBVParms_DAFB_NTSCFFconv
03536
03536   0000 002E              	_TBVParms_DAFB_640by480		DC.L	_EndTBVParms_DAFB_640by480-_TBVParms_DAFB_640by480
0353A
0353A   0000 1000              					DC.L	DAFBStdOffset
0353E   0400                   					DC.W	DAFB_1024_RB
03540   0000 0000 01E0         					DC.W	0,0,480,640							; who needs equates in a file of this size?
03548   0000                   					DC.W	defVersion
0354A   0000                   					DC.W	0									; packType not used
0354C   0000 0000              					DC.L	0									; packSize not used
03550   0048 0000              					DC.L	$00480000							; 72 hdpi
03554   0048 0000              					DC.L	$00480000							; 72 vdpi
03558   0000                   					DC.W	defPixelType
0355A   0002                   					DC.W	2
0355C   0001                   					DC.W	defCmpCount
0355E   0002                   					DC.W	2
03560   0000 0000              					DC.L	defmPlaneBytes
03564                          	_EndTBVParms_DAFB_640by480
03564
03564   0000 002E              	_TBVParms_DAFB_SVGA	DC.L	_EndTBVParms_DAFB_SVGA-_TBVParms_DAFB_SVGA
03568
03568   0000 0E00              					DC.L	DAFBBSOffset
0356C   0340                   					DC.W	DAFB_832_RB
0356E   0000 0000 0258         					Dc.w	defmBounds_TSVGA,defmBounds_LSVGA,defmBounds_BSVGA,defmBounds_RSVGA
03576   0000                   					DC.W	defVersion
03578   0000                   					DC.W	0									; packType not used
0357A   0000 0000              					DC.L	0									; packSize not used
0357E   0048 0000              					DC.L	HResSVGA
03582   0048 0000              					DC.L	VResSVGA
03586   0000                   					DC.W	defPixelType
03588   0002                   					DC.W	2
0358A   0001                   					DC.W	defCmpCount
0358C   0002                   					DC.W	2
0358E   0000 0000              					DC.L	defmPlaneBytes
03592                          	_EndTBVParms_DAFB_SVGA
03592
03592   0000 002E              	_TBVParms_DAFB_GF	DC.L	_EndTBVParms_DAFB_GF-_TBVParms_DAFB_GF
03596
03596   0000 0E00              					DC.L	DAFBBSOffset
0359A   0340                   					DC.W	DAFB_832_RB
0359C   0000 0000 0270         					DC.W	defmBounds_TGF,defmBounds_LGF,defmBounds_BGF,defmBounds_RGF
035A4   0000                   					DC.W	defVersion
035A6   0000                   					DC.W	0									; packType not used
035A8   0000 0000              					DC.L	0									; packSize not used
035AC   0048 0000              					DC.L	HResGF
035B0   0048 0000              					DC.L	VResGF
035B4   0000                   					DC.W	defPixelType
035B6   0002                   					DC.W	2
035B8   0001                   					DC.W	defCmpCount
035BA   0002                   					DC.W	2
035BC   0000 0000              					DC.L	defmPlaneBytes
035C0                          	_EndTBVParms_DAFB_GF
035C0
035C0   0000 002E              	_TBVParms_DAFB_PALST	Dc.l	_EndTBVParms_DAFB_PALST-_TBVParms_DAFB_PALST
035C4   0000 AA30              					Dc.l	DAFBPALOffset+defmPALSTB2
035C8   0340                   					Dc.w	DAFB_832_RB
035CA   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
035D2   0000                   					Dc.w	defVersion
035D4   0000                   					Dc.w	0									; packType not used
035D6   0000 0000              					Dc.l	0									; packSize not used
035DA   0048 0000              					Dc.l	HResPAL
035DE   0048 0000              					Dc.l	VResPAL
035E2   0000                   					Dc.w	defPixelType
035E4   0002                   					Dc.w	2
035E6   0001                   					Dc.w	defCmpCount
035E8   0002                   					Dc.w	2
035EA   0000 0000              					Dc.l	defmPlaneBytes
035EE                          	_EndTBVParms_DAFB_PALST
035EE
035EE   0000 002E              	_TBVParms_DAFB_PALFF	Dc.l	_EndTBVParms_DAFB_PALFF-_TBVParms_DAFB_PALFF
035F2   0000 0E20              					Dc.l	DAFBPALOffset
035F6   0340                   					Dc.w	DAFB_832_RB
035F8   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
03600   0000                   					Dc.w	defVersion
03602   0000                   					Dc.w	0									; packType not used
03604   0000 0000              					Dc.l	0									; packSize not used
03608   0048 0000              					Dc.l	HResPAL
0360C   0048 0000              					Dc.l	VResPAL
03610   0000                   					Dc.w	defPixelType
03612   0002                   					Dc.w	2
03614   0001                   					Dc.w	defCmpCount
03616   0002                   					Dc.w	2
03618   0000 0000              					Dc.l	defmPlaneBytes
0361C                          	_EndTBVParms_DAFB_PALFF
0361C
0361C   0000 002E              	_TBVParms_DAFB_PALSTconv	Dc.l	_EndTBVParms_DAFB_PALSTconv-_TBVParms_DAFB_PALSTconv
03620   0000 D430              					Dc.l	DAFBPALConvOff+defmPALSTB2Conv
03624   0400                   					Dc.w	DAFB_1024_RB
03626   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
0362E   0000                   					Dc.w	defVersion
03630   0000                   					Dc.w	0									; packType not used
03632   0000 0000              					Dc.l	0									; packSize not used
03636   0048 0000              					Dc.l	HResPAL
0363A   0048 0000              					Dc.l	VResPAL
0363E   0000                   					Dc.w	defPixelType
03640   0002                   					Dc.w	2
03642   0001                   					Dc.w	defCmpCount
03644   0002                   					Dc.w	2
03646   0000 0000              					Dc.l	defmPlaneBytes
0364A                          	_EndTBVParms_DAFB_PALSTconv
0364A
0364A   0000 002E              	_TBVParms_DAFB_PALFFconv	Dc.l	_EndTBVParms_DAFB_PALFFconv-_TBVParms_DAFB_PALFFconv
0364E   0000 1420              					Dc.l	DAFBPALConvOff
03652   0400                   					Dc.w	DAFB_1024_RB
03654   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
0365C   0000                   					Dc.w	defVersion
0365E   0000                   					Dc.w	0									; packType not used
03660   0000 0000              					Dc.l	0									; packSize not used
03664   0048 0000              					Dc.l	HResPAL
03668   0048 0000              					Dc.l	VResPAL
0366C   0000                   					Dc.w	defPixelType
0366E   0002                   					Dc.w	2
03670   0001                   					Dc.w	defCmpCount
03672   0002                   					Dc.w	2
03674   0000 0000              					Dc.l	defmPlaneBytes
03678                          	_EndTBVParms_DAFB_PALFFconv
03678
03678   0000 002E              	_TBVParms_DAFB_19	DC.L	_EndTBVParms_DAFB_19-_TBVParms_DAFB_19
0367C
0367C   0000 1000              					DC.L	DAFBStdOffset
03680   0200                   					DC.W	DAFB_512_RB
03682   0000 0000 0300         					DC.W	defmBounds_T19,defmBounds_L19,defmBounds_B19,defmBounds_R19
0368A   0000                   					DC.W	defVersion
0368C   0000                   					DC.W	0									; packType not used
0368E   0000 0000              					DC.L	0									; packSize not used
03692   0048 0000              					DC.L	HRes19
03696   0048 0000              					DC.L	VRes19
0369A   0000                   					DC.W	defPixelType
0369C   0002                   					DC.W	2
0369E   0001                   					DC.W	defCmpCount
036A0   0002                   					DC.W	2
036A2   0000 0000              					DC.L	defmPlaneBytes
036A6                          	_EndTBVParms_DAFB_19
036A6
036A6                          	;-------------------------------------------------------------
036A6                          	;				Four-Bit per pixel parameters
036A6                          	;-------------------------------------------------------------
036A6
036A6                          	_FBM_DAFB_2P	OSLstEntry	mVidParams,_FBVParms_DAFB_2P	;
036A6   0100 0100             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_2P-*)**$00FFFFFF)
036AA                          					DatLstEntry	mPageCnt,defPages_DAFB			;
036AA   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
036AE                          					DatLstEntry mDevType,defmDevType			;
036AE   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
036B2                          					DatLstEntry	EndOfList,0						;
036B2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
036B6
036B6                          	_FBM_DAFB_FP	OSLstEntry	mVidParams,_FBVParms_DAFB_FP	;
036B6   0100 011E             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_FP-*)**$00FFFFFF)
036BA                          					DatLstEntry	mPageCnt,defPages_DAFB			;
036BA   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
036BE                          					DatLstEntry mDevType,defmDevType			;
036BE   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
036C2                          					DatLstEntry	EndOfList,0						;
036C2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
036C6
036C6                          	_FBM_DAFB_GS	OSLstEntry	mVidParams,_FBVParms_DAFB_GS	;
036C6   0100 013C             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_GS-*)**$00FFFFFF)
036CA                          					DatLstEntry	mPageCnt,defPages_DAFB			;
036CA   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
036CE                          					DatLstEntry mDevType,defmDevType			;
036CE   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
036D2                          					DatLstEntry	EndOfList,0						;
036D2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
036D6
036D6                          	_FBM_DAFB_NTSCST
036D6                          					OSLstEntry	mVidParams,_FBVParms_DAFB_NTSCST ;
036D6   0100 015A             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_NTSCST-*)**$00FFFFFF)
036DA                          					DatLstEntry	mPageCnt,defPages_DAFB			;
036DA   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
036DE                          					DatLstEntry mDevType,defmDevType			;
036DE   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
036E2                          					DatLstEntry	EndOfList,0						;
036E2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
036E6
036E6                          	_FBM_DAFB_NTSCFF
036E6                          					OSLstEntry	mVidParams,_FBVParms_DAFB_NTSCFF ;
036E6   0100 0178             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_NTSCFF-*)**$00FFFFFF)
036EA                          					DatLstEntry	mPageCnt,defPages_DAFB			;
036EA   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
036EE                          					DatLstEntry mDevType,defmDevType			;
036EE   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
036F2                          					DatLstEntry	EndOfList,0						;
036F2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
036F6
036F6                          	_FBM_DAFB_NTSCSTconv
036F6                          					OSLstEntry	mVidParams,_FBVParms_DAFB_NTSCSTconv ;
036F6   0100 0196             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_NTSCSTconv-*)**$00FFFFFF)
036FA                          					DatLstEntry	mPageCnt,defPages_DAFB			;
036FA   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
036FE                          					DatLstEntry mDevType,defmDevType			;
036FE   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03702                          					DatLstEntry	EndOfList,0						;
03702   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03706
03706                          	_FBM_DAFB_NTSCFFconv
03706                          					OSLstEntry	mVidParams,_FBVParms_DAFB_NTSCFFconv ;
03706   0100 01B4             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_NTSCFFconv-*)**$00FFFFFF)
0370A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0370A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0370E                          					DatLstEntry mDevType,defmDevType			;
0370E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03712                          					DatLstEntry	EndOfList,0						;
03712   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03716
03716                          	_FBM_DAFB_HR	OSLstEntry	mVidParams,_FBVParms_DAFB_640by480 ;
03716   0100 01D2             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_640by480-*)**$00FFFFFF)
0371A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0371A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0371E                          					DatLstEntry mDevType,defmDevType			;
0371E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03722                          					DatLstEntry	EndOfList,0						;
03722   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03726
03726                          	_FBM_DAFB_VGA	OSLstEntry	mVidParams,_FBVParms_DAFB_640by480 ;
03726   0100 01C2             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_640by480-*)**$00FFFFFF)
0372A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0372A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0372E                          					DatLstEntry mDevType,defmDevType			;
0372E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03732                          					DatLstEntry	EndOfList,0						;
03732   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03736
03736                          	_FBM_DAFB_SVGA	OSLstEntry	mVidParams,_FBVParms_DAFB_SVGA	;
03736   0100 01E0             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_SVGA-*)**$00FFFFFF)
0373A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0373A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0373E                          					DatLstEntry mDevType,defmDevType			;
0373E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03742                          					DatLstEntry	EndOfList,0						;
03742   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03746
03746                          	_FBM_DAFB_GF	OSLstEntry	mVidParams,_FBVParms_DAFB_GF	;
03746   0100 01FE             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_GF-*)**$00FFFFFF)
0374A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0374A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0374E                          					DatLstEntry mDevType,defmDevType			;
0374E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03752                          					DatLstEntry	EndOfList,0						;
03752   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03756
03756                          	_FBM_DAFB_PALST
03756                          					OSLstEntry	mVidParams,_FBVParms_DAFB_PALST	;
03756   0100 021C             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_PALST-*)**$00FFFFFF)
0375A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0375A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0375E                          					DatLstEntry mDevType,defmDevType			;
0375E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03762                          					DatLstEntry	EndOfList,0						;
03762   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03766
03766                          	_FBM_DAFB_PALSTconv
03766                          					OSLstEntry	mVidParams,_FBVParms_DAFB_PALSTconv	;
03766   0100 0268             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_PALSTconv-*)**$00FFFFFF)
0376A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0376A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0376E                          					DatLstEntry mDevType,defmDevType			;
0376E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03772                          					DatLstEntry	EndOfList,0						;
03772   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03776
03776                          	_FBM_DAFB_PALFF
03776                          					OSLstEntry	mVidParams,_FBVParms_DAFB_PALFF	;
03776   0100 022A             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_PALFF-*)**$00FFFFFF)
0377A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0377A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0377E                          					DatLstEntry mDevType,defmDevType			;
0377E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03782                          					DatLstEntry	EndOfList,0						;
03782   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03786
03786                          	_FBM_DAFB_PALFFconv
03786                          					OSLstEntry	mVidParams,_FBVParms_DAFB_PALFFconv	;
03786   0100 0276             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_PALFFconv-*)**$00FFFFFF)
0378A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0378A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0378E                          					DatLstEntry mDevType,defmDevType			;
0378E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03792                          					DatLstEntry	EndOfList,0						;
03792   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03796
03796                          	_FBM_DAFB_19	OSLstEntry	mVidParams,_FBVParms_DAFB_19	;
03796   0100 0294             1	  				DC.L		(mVidParams<<24)++((_FBVParms_DAFB_19-*)**$00FFFFFF)
0379A                          					DatLstEntry	mPageCnt,defPages_DAFB			;
0379A   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0379E                          					DatLstEntry mDevType,defmDevType			;
0379E   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
037A2                          					DatLstEntry	EndOfList,0						;
037A2   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
037A6
037A6   0000 002E              	_FBVParms_DAFB_2P	DC.L	_EndFBVParms_DAFB_2P-_FBVParms_DAFB_2P
037AA
037AA   0000 0A00              					DC.L	DAFB2POffset
037AE   0240                   					DC.W	DAFB_576_RB
037B0   0000 0000 0366         					DC.W	defmBounds_T2P,defmBounds_L2P,defmBounds_B2P,defmBounds_R2P
037B8   0000                   					DC.W	defVersion
037BA   0000                   					DC.W	0									; packType not used
037BC   0000 0000              					DC.L	0									; packSize not used
037C0   004D 0000              					DC.L	HRes2P
037C4   004D 0000              					DC.L	VRes2P
037C8   0000                   					DC.W	defPixelType
037CA   0004                   					DC.W	4
037CC   0001                   					DC.W	defCmpCount
037CE   0004                   					DC.W	4
037D0   0000 0000              					DC.L	defmPlaneBytes
037D4                          	_EndFBVParms_DAFB_2P
037D4
037D4   0000 002E              	_FBVParms_DAFB_FP	DC.L	_EndFBVParms_DAFB_FP-_FBVParms_DAFB_FP
037D8
037D8   0000 1000              					DC.L	DAFBStdOffset
037DC   0200                   					DC.W	DAFB_512_RB
037DE   0000 0000 0366         					DC.W	defmBounds_TFP,defmBounds_LFP,defmBounds_BFP,defmBounds_RFP
037E6   0000                   					DC.W	defVersion
037E8   0000                   					DC.W	0									; packType not used
037EA   0000 0000              					DC.L	0									; packSize not used
037EE   0050 0000              					DC.L	HResFP
037F2   0050 0000              					DC.L	VResFP
037F6   0000                   					DC.W	defPixelType
037F8   0004                   					DC.W	4
037FA   0001                   					DC.W	defCmpCount
037FC   0004                   					DC.W	4
037FE   0000 0000              					DC.L	defmPlaneBytes
03802                          	_EndFBVParms_DAFB_FP
03802
03802   0000 002E              	_FBVParms_DAFB_GS	DC.L	_EndFBVParms_DAFB_GS-_FBVParms_DAFB_GS
03806
03806   0000 1000              					DC.L	DAFBStdOffset
0380A   0400                   					DC.W	DAFB_1024_RB
0380C   0000 0000 0180         					DC.W	defmBounds_TGS,defmBounds_LGS,defmBounds_BGS,defmBounds_RGS
03814   0000                   					DC.W	defVersion
03816   0000                   					DC.W	0									; packType not used
03818   0000 0000              					DC.L	0									; packSize not used
0381C   0048 0000              					DC.L	HResGS
03820   0048 0000              					DC.L	VResGS
03824   0000                   					DC.W	defPixelType
03826   0004                   					DC.W	4
03828   0001                   					DC.W	defCmpCount
0382A   0004                   					DC.W	4
0382C   0000 0000              					DC.L	defmPlaneBytes
03830                          	_EndFBVParms_DAFB_GS
03830
03830   0000 002E              	_FBVParms_DAFB_NTSCST	Dc.l	_EndFBVParms_DAFB_NTSCST-_FBVParms_DAFB_NTSCST
03834   0000 D040              					Dc.l	DAFBNTSCOffset+defmNTSCSTB4
03838   0400                   					Dc.w	DAFB_1024_RB
0383A   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
03842   0000                   					Dc.w	defVersion
03844   0000                   					Dc.w	0									; packType not used
03846   0000 0000              					Dc.l	0									; packSize not used
0384A   0048 0000              					Dc.l	HResNTSC
0384E   0048 0000              					Dc.l	VResNTSC
03852   0000                   					Dc.w	defPixelType
03854   0004                   					Dc.w	4
03856   0001                   					Dc.w	defCmpCount
03858   0004                   					Dc.w	4
0385A   0000 0000              					Dc.l	defmPlaneBytes
0385E                          	_EndFBVParms_DAFB_NTSCST
0385E
0385E   0000 002E              	_FBVParms_DAFB_NTSCFF	Dc.l	_EndFBVParms_DAFB_NTSCFF-_FBVParms_DAFB_NTSCFF
03862   0000 1020              					Dc.l	DAFBNTSCOffset
03866   0400                   					Dc.w	DAFB_1024_RB
03868   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
03870   0000                   					Dc.w	defVersion
03872   0000                   					Dc.w	0									; packType not used
03874   0000 0000              					Dc.l	0									; packSize not used
03878   0048 0000              					Dc.l	HResNTSC
0387C   0048 0000              					Dc.l	VResNTSC
03880   0000                   					Dc.w	defPixelType
03882   0004                   					Dc.w	4
03884   0001                   					Dc.w	defCmpCount
03886   0004                   					Dc.w	4
03888   0000 0000              					Dc.l	defmPlaneBytes
0388C                          	_EndFBVParms_DAFB_NTSCFF
0388C
0388C   0000 002E              	_FBVParms_DAFB_NTSCSTconv	Dc.l	_EndFBVParms_DAFB_NTSCSTconv-_FBVParms_DAFB_NTSCSTconv
03890   0000 D420              					Dc.l	DAFBNTSCConvOff+defmNTSCSTB4
03894   0400                   					Dc.w	DAFB_1024_RB
03896   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
0389E   0000                   					Dc.w	defVersion
038A0   0000                   					Dc.w	0									; packType not used
038A2   0000 0000              					Dc.l	0									; packSize not used
038A6   0048 0000              					Dc.l	HResNTSC
038AA   0048 0000              					Dc.l	VResNTSC
038AE   0000                   					Dc.w	defPixelType
038B0   0004                   					Dc.w	4
038B2   0001                   					Dc.w	defCmpCount
038B4   0004                   					Dc.w	4
038B6   0000 0000              					Dc.l	defmPlaneBytes
038BA                          	_EndFBVParms_DAFB_NTSCSTconv
038BA
038BA   0000 002E              	_FBVParms_DAFB_NTSCFFconv	Dc.l	_EndFBVParms_DAFB_NTSCFFconv-_FBVParms_DAFB_NTSCFFconv
038BE   0000 1400              					Dc.l	DAFBNTSCConvOff
038C2   0400                   					Dc.w	DAFB_1024_RB
038C4   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
038CC   0000                   					Dc.w	defVersion
038CE   0000                   					Dc.w	0									; packType not used
038D0   0000 0000              					Dc.l	0									; packSize not used
038D4   0048 0000              					Dc.l	HResNTSC
038D8   0048 0000              					Dc.l	VResNTSC
038DC   0000                   					Dc.w	defPixelType
038DE   0004                   					Dc.w	4
038E0   0001                   					Dc.w	defCmpCount
038E2   0004                   					Dc.w	4
038E4   0000 0000              					Dc.l	defmPlaneBytes
038E8                          	_EndFBVParms_DAFB_NTSCFFconv
038E8
038E8   0000 002E              	_FBVParms_DAFB_640by480		DC.L	_EndFBVParms_DAFB_640by480-_FBVParms_DAFB_640by480
038EC
038EC   0000 1000              					DC.L	DAFBStdOffset
038F0   0400                   					DC.W	DAFB_1024_RB
038F2   0000 0000 01E0         					DC.W	0,0,480,640							; who needs equates in a file of this size?
038FA   0000                   					DC.W	defVersion
038FC   0000                   					DC.W	0									; packType not used
038FE   0000 0000              					DC.L	0									; packSize not used
03902   0048 0000              					DC.L	$00480000							; 72 hdpi
03906   0048 0000              					DC.L	$00480000							; 72 vdpi
0390A   0000                   					DC.W	defPixelType
0390C   0004                   					DC.W	4
0390E   0001                   					DC.W	defCmpCount
03910   0004                   					DC.W	4
03912   0000 0000              					DC.L	defmPlaneBytes
03916                          	_EndFBVParms_DAFB_640by480
03916
03916   0000 002E              	_FBVParms_DAFB_SVGA		DC.L	_EndFBVParms_DAFB_SVGA-_FBVParms_DAFB_SVGA
0391A
0391A   0000 0E00              					DC.L	DAFBBSOffset
0391E   0340                   					DC.W	DAFB_832_RB
03920   0000 0000 0258         					Dc.w	defmBounds_TSVGA,defmBounds_LSVGA,defmBounds_BSVGA,defmBounds_RSVGA
03928   0000                   					DC.W	defVersion
0392A   0000                   					DC.W	0									; packType not used
0392C   0000 0000              					DC.L	0									; packSize not used
03930   0048 0000              					DC.L	HResSVGA
03934   0048 0000              					DC.L	VResSVGA
03938   0000                   					DC.W	defPixelType
0393A   0004                   					DC.W	4
0393C   0001                   					DC.W	defCmpCount
0393E   0004                   					DC.W	4
03940   0000 0000              					DC.L	defmPlaneBytes
03944                          	_EndFBVParms_DAFB_SVGA
03944
03944   0000 002E              	_FBVParms_DAFB_GF	DC.L	_EndFBVParms_DAFB_GF-_FBVParms_DAFB_GF
03948
03948   0000 0E00              					DC.L	DAFBBSOffset
0394C   0340                   					DC.W	DAFB_832_RB
0394E   0000 0000 0270         					DC.W	defmBounds_TGF,defmBounds_LGF,defmBounds_BGF,defmBounds_RGF
03956   0000                   					DC.W	defVersion
03958   0000                   					DC.W	0									; packType not used
0395A   0000 0000              					DC.L	0									; packSize not used
0395E   0048 0000              					DC.L	HResGF
03962   0048 0000              					DC.L	VResGF
03966   0000                   					DC.W	defPixelType
03968   0004                   					DC.W	4
0396A   0001                   					DC.W	defCmpCount
0396C   0004                   					DC.W	4
0396E   0000 0000              					DC.L	defmPlaneBytes
03972                          	_EndFBVParms_DAFB_GF
03972
03972   0000 002E              	_FBVParms_DAFB_PALST	Dc.l	_EndFBVParms_DAFB_PALST-_FBVParms_DAFB_PALST
03976   0000 AA40              					Dc.l	DAFBPALOffset+defmPALSTB4
0397A   0340                   					Dc.w	DAFB_832_RB
0397C   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
03984   0000                   					Dc.w	defVersion
03986   0000                   					Dc.w	0									; packType not used
03988   0000 0000              					Dc.l	0									; packSize not used
0398C   0048 0000              					Dc.l	HResPAL
03990   0048 0000              					Dc.l	VResPAL
03994   0000                   					Dc.w	defPixelType
03996   0004                   					Dc.w	4
03998   0001                   					Dc.w	defCmpCount
0399A   0004                   					Dc.w	4
0399C   0000 0000              					Dc.l	defmPlaneBytes
039A0                          	_EndFBVParms_DAFB_PALST
039A0
039A0   0000 002E              	_FBVParms_DAFB_PALFF	Dc.l	_EndFBVParms_DAFB_PALFF-_FBVParms_DAFB_PALFF
039A4   0000 0E20              					Dc.l	DAFBPALOffset
039A8   0340                   					Dc.w	DAFB_832_RB
039AA   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
039B2   0000                   					Dc.w	defVersion
039B4   0000                   					Dc.w	0									; packType not used
039B6   0000 0000              					Dc.l	0									; packSize not used
039BA   0048 0000              					Dc.l	HResPAL
039BE   0048 0000              					Dc.l	VResPAL
039C2   0000                   					Dc.w	defPixelType
039C4   0004                   					Dc.w	4
039C6   0001                   					Dc.w	defCmpCount
039C8   0004                   					Dc.w	4
039CA   0000 0000              					Dc.l	defmPlaneBytes
039CE                          	_EndFBVParms_DAFB_PALFF
039CE
039CE   0000 002E              	_FBVParms_DAFB_PALSTconv	Dc.l	_EndFBVParms_DAFB_PALSTconv-_FBVParms_DAFB_PALSTconv
039D2   0000 D440              					Dc.l	DAFBPALConvOff+defmPALSTB4Conv
039D6   0400                   					Dc.w	DAFB_1024_RB
039D8   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
039E0   0000                   					Dc.w	defVersion
039E2   0000                   					Dc.w	0									; packType not used
039E4   0000 0000              					Dc.l	0									; packSize not used
039E8   0048 0000              					Dc.l	HResPAL
039EC   0048 0000              					Dc.l	VResPAL
039F0   0000                   					Dc.w	defPixelType
039F2   0004                   					Dc.w	4
039F4   0001                   					Dc.w	defCmpCount
039F6   0004                   					Dc.w	4
039F8   0000 0000              					Dc.l	defmPlaneBytes
039FC                          	_EndFBVParms_DAFB_PALSTconv
039FC
039FC   0000 002E              	_FBVParms_DAFB_PALFFconv	Dc.l	_EndFBVParms_DAFB_PALFFconv-_FBVParms_DAFB_PALFFconv
03A00   0000 1420              					Dc.l	DAFBPALConvOff
03A04   0400                   					Dc.w	DAFB_1024_RB
03A06   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
03A0E   0000                   					Dc.w	defVersion
03A10   0000                   					Dc.w	0									; packType not used
03A12   0000 0000              					Dc.l	0									; packSize not used
03A16   0048 0000              					Dc.l	HResPAL
03A1A   0048 0000              					Dc.l	VResPAL
03A1E   0000                   					Dc.w	defPixelType
03A20   0004                   					Dc.w	4
03A22   0001                   					Dc.w	defCmpCount
03A24   0004                   					Dc.w	4
03A26   0000 0000              					Dc.l	defmPlaneBytes
03A2A                          	_EndFBVParms_DAFB_PALFFconv
03A2A
03A2A   0000 002E              	_FBVParms_DAFB_19	DC.L	_EndFBVParms_DAFB_19-_FBVParms_DAFB_19
03A2E
03A2E   0000 1000              					DC.L	DAFBStdOffset
03A32   0200                   					DC.W	DAFB_512_RB
03A34   0000 0000 0300         					DC.W	defmBounds_T19,defmBounds_L19,defmBounds_B19,defmBounds_R19
03A3C   0000                   					DC.W	defVersion
03A3E   0000                   					DC.W	0									; packType not used
03A40   0000 0000              					DC.L	0									; packSize not used
03A44   0048 0000              					DC.L	HRes19
03A48   0048 0000              					DC.L	VRes19
03A4C   0000                   					DC.W	defPixelType
03A4E   0004                   					DC.W	4
03A50   0001                   					DC.W	defCmpCount
03A52   0004                   					DC.W	4
03A54   0000 0000              					DC.L	defmPlaneBytes
03A58                          	_EndFBVParms_DAFB_19
03A58
03A58                          	;-------------------------------------------------------------
03A58                          	;				Eight-Bit per pixel parameters
03A58                          	;-------------------------------------------------------------
03A58                          	;
03A58
03A58                          	_EBM_DAFB_2P	OSLstEntry	mVidParams,_EBVParms_DAFB_2P	;
03A58   0100 0100             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_2P-*)**$00FFFFFF)
03A5C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03A5C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03A60                          					DatLstEntry mDevType,defmDevType			;
03A60   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03A64                          					DatLstEntry	EndOfList,0						;
03A64   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03A68
03A68                          	_EBM_DAFB_FP	OSLstEntry	mVidParams,_EBVParms_DAFB_FP	;
03A68   0100 011E             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_FP-*)**$00FFFFFF)
03A6C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03A6C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03A70                          					DatLstEntry mDevType,defmDevType			;
03A70   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03A74                          					DatLstEntry	EndOfList,0						;
03A74   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03A78
03A78                          	_EBM_DAFB_GS	OSLstEntry	mVidParams,_EBVParms_DAFB_GS	;
03A78   0100 013C             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_GS-*)**$00FFFFFF)
03A7C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03A7C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03A80                          					DatLstEntry mDevType,defmDevType			;
03A80   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03A84                          					DatLstEntry	EndOfList,0						;
03A84   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03A88
03A88                          	_EBM_DAFB_NTSCST
03A88                          					OSLstEntry	mVidParams,_EBVParms_DAFB_NTSCST ;
03A88   0100 015A             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_NTSCST-*)**$00FFFFFF)
03A8C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03A8C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03A90                          					DatLstEntry mDevType,defmDevType			;
03A90   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03A94                          					DatLstEntry	EndOfList,0						;
03A94   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03A98
03A98                          	_EBM_DAFB_NTSCFF
03A98                          					OSLstEntry	mVidParams,_EBVParms_DAFB_NTSCFF ;
03A98   0100 0178             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_NTSCFF-*)**$00FFFFFF)
03A9C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03A9C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03AA0                          					DatLstEntry mDevType,defmDevType			;
03AA0   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03AA4                          					DatLstEntry	EndOfList,0						;
03AA4   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03AA8
03AA8                          	_EBM_DAFB_NTSCSTconv
03AA8                          					OSLstEntry	mVidParams,_EBVParms_DAFB_NTSCSTconv ;
03AA8   0100 0196             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_NTSCSTconv-*)**$00FFFFFF)
03AAC                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03AAC   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03AB0                          					DatLstEntry mDevType,defmDevType			;
03AB0   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03AB4                          					DatLstEntry	EndOfList,0						;
03AB4   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03AB8
03AB8                          	_EBM_DAFB_NTSCFFconv
03AB8                          					OSLstEntry	mVidParams,_EBVParms_DAFB_NTSCFFconv ;
03AB8   0100 01B4             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_NTSCFFconv-*)**$00FFFFFF)
03ABC                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03ABC   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03AC0                          					DatLstEntry mDevType,defmDevType			;
03AC0   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03AC4                          					DatLstEntry	EndOfList,0						;
03AC4   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03AC8
03AC8                          	_EBM_DAFB_HR	OSLstEntry	mVidParams,_EBVParms_DAFB_640by480 ;
03AC8   0100 01D2             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_640by480-*)**$00FFFFFF)
03ACC                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03ACC   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03AD0                          					DatLstEntry mDevType,defmDevType			;
03AD0   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03AD4                          					DatLstEntry	EndOfList,0						;
03AD4   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03AD8
03AD8                          	_EBM_DAFB_VGA	OSLstEntry	mVidParams,_EBVParms_DAFB_640by480	;
03AD8   0100 01C2             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_640by480-*)**$00FFFFFF)
03ADC                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03ADC   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03AE0                          					DatLstEntry mDevType,defmDevType			;
03AE0   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03AE4                          					DatLstEntry	EndOfList,0						;
03AE4   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03AE8
03AE8                          	_EBM_DAFB_SVGA	OSLstEntry	mVidParams,_EBVParms_DAFB_SVGA	;
03AE8   0100 01E0             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_SVGA-*)**$00FFFFFF)
03AEC                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03AEC   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03AF0                          					DatLstEntry mDevType,defmDevType			;
03AF0   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03AF4                          					DatLstEntry	EndOfList,0						;
03AF4   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03AF8
03AF8                          	_EBM_DAFB_GF	OSLstEntry	mVidParams,_EBVParms_DAFB_GF	;
03AF8   0100 01FE             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_GF-*)**$00FFFFFF)
03AFC                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03AFC   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03B00                          					DatLstEntry mDevType,defmDevType			;
03B00   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03B04                          					DatLstEntry	EndOfList,0						;
03B04   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03B08
03B08                          	_EBM_DAFB_PALST
03B08                          					OSLstEntry	mVidParams,_EBVParms_DAFB_PALST	;
03B08   0100 021C             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_PALST-*)**$00FFFFFF)
03B0C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03B0C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03B10                          					DatLstEntry mDevType,defmDevType			;
03B10   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03B14                          					DatLstEntry	EndOfList,0						;
03B14   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03B18
03B18                          	_EBM_DAFB_PALSTconv
03B18                          					OSLstEntry	mVidParams,_EBVParms_DAFB_PALSTconv	;
03B18   0100 0268             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_PALSTconv-*)**$00FFFFFF)
03B1C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03B1C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03B20                          					DatLstEntry mDevType,defmDevType			;
03B20   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03B24                          					DatLstEntry	EndOfList,0						;
03B24   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03B28
03B28                          	_EBM_DAFB_PALFF
03B28                          					OSLstEntry	mVidParams,_EBVParms_DAFB_PALFF	;
03B28   0100 022A             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_PALFF-*)**$00FFFFFF)
03B2C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03B2C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03B30                          					DatLstEntry mDevType,defmDevType			;
03B30   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03B34                          					DatLstEntry	EndOfList,0						;
03B34   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03B38
03B38                          	_EBM_DAFB_PALFFconv
03B38                          					OSLstEntry	mVidParams,_EBVParms_DAFB_PALFFconv	;
03B38   0100 0276             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_PALFFconv-*)**$00FFFFFF)
03B3C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03B3C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03B40                          					DatLstEntry mDevType,defmDevType			;
03B40   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03B44                          					DatLstEntry	EndOfList,0						;
03B44   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03B48
03B48                          	_EBM_DAFB_19	OSLstEntry	mVidParams,_EBVParms_DAFB_19	;
03B48   0100 0294             1	  				DC.L		(mVidParams<<24)++((_EBVParms_DAFB_19-*)**$00FFFFFF)
03B4C                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03B4C   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03B50                          					DatLstEntry mDevType,defmDevType			;
03B50   0400 0000             1	  				DC.L		(mDevType<<24)+defmDevType
03B54                          					DatLstEntry	EndOfList,0						;
03B54   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03B58
03B58   0000 002E              	_EBVParms_DAFB_2P	DC.L	_EndEBVParms_DAFB_2P-_EBVParms_DAFB_2P
03B5C
03B5C   0000 0A00              					DC.L	DAFB2POffset
03B60   0480                   					DC.W	DAFB_1152_RB
03B62   0000 0000 0366         					DC.W	defmBounds_T2P,defmBounds_L2P,defmBounds_B2P,defmBounds_R2P
03B6A   0000                   					DC.W	defVersion
03B6C   0000                   					DC.W	0									; packType not used
03B6E   0000 0000              					DC.L	0									; packSize not used
03B72   004D 0000              					DC.L	HRes2P
03B76   004D 0000              					DC.L	VRes2P
03B7A   0000                   					DC.W	defPixelType
03B7C   0008                   					DC.W	8
03B7E   0001                   					DC.W	defCmpCount
03B80   0008                   					DC.W	8
03B82   0000 0000              					DC.L	defmPlaneBytes
03B86                          	_EndEBVParms_DAFB_2P
03B86
03B86   0000 002E              	_EBVParms_DAFB_FP	DC.L	_EndEBVParms_DAFB_FP-_EBVParms_DAFB_FP
03B8A
03B8A   0000 1000              					DC.L	DAFBStdOffset
03B8E   0400                   					DC.W	DAFB_1024_RB
03B90   0000 0000 0366         					DC.W	defmBounds_TFP,defmBounds_LFP,defmBounds_BFP,defmBounds_RFP
03B98   0000                   					DC.W	defVersion
03B9A   0000                   					DC.W	0									; packType not used
03B9C   0000 0000              					DC.L	0									; packSize not used
03BA0   0050 0000              					DC.L	HResFP
03BA4   0050 0000              					DC.L	VResFP
03BA8   0000                   					DC.W	defPixelType
03BAA   0008                   					DC.W	8
03BAC   0001                   					DC.W	defCmpCount
03BAE   0008                   					DC.W	8
03BB0   0000 0000              					DC.L	defmPlaneBytes
03BB4                          	_EndEBVParms_DAFB_FP
03BB4
03BB4   0000 002E              	_EBVParms_DAFB_GS	DC.L	_EndEBVParms_DAFB_GS-_EBVParms_DAFB_GS
03BB8
03BB8   0000 1000              					DC.L	DAFBStdOffset
03BBC   0400                   					DC.W	DAFB_1024_RB
03BBE   0000 0000 0180         					DC.W	defmBounds_TGS,defmBounds_LGS,defmBounds_BGS,defmBounds_RGS
03BC6   0000                   					DC.W	defVersion
03BC8   0000                   					DC.W	0									; packType not used
03BCA   0000 0000              					DC.L	0									; packSize not used
03BCE   0048 0000              					DC.L	HResGS
03BD2   0048 0000              					DC.L	VResGS
03BD6   0000                   					DC.W	defPixelType
03BD8   0008                   					DC.W	8
03BDA   0001                   					DC.W	defCmpCount
03BDC   0008                   					DC.W	8
03BDE   0000 0000              					DC.L	defmPlaneBytes
03BE2                          	_EndEBVParms_DAFB_GS
03BE2
03BE2   0000 002E              	_EBVParms_DAFB_NTSCST	Dc.l	_EndEBVParms_DAFB_NTSCST-_EBVParms_DAFB_NTSCST
03BE6   0000 D060              					Dc.l	DAFBNTSCOffset+defmNTSCSTB8
03BEA   0400                   					Dc.w	DAFB_1024_RB
03BEC   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
03BF4   0000                   					Dc.w	defVersion
03BF6   0000                   					Dc.w	0									; packType not used
03BF8   0000 0000              					Dc.l	0									; packSize not used
03BFC   0048 0000              					Dc.l	HResNTSC
03C00   0048 0000              					Dc.l	VResNTSC
03C04   0000                   					Dc.w	defPixelType
03C06   0008                   					Dc.w	8
03C08   0001                   					Dc.w	defCmpCount
03C0A   0008                   					Dc.w	8
03C0C   0000 0000              					Dc.l	defmPlaneBytes
03C10                          	_EndEBVParms_DAFB_NTSCST
03C10
03C10   0000 002E              	_EBVParms_DAFB_NTSCFF	Dc.l	_EndEBVParms_DAFB_NTSCFF-_EBVParms_DAFB_NTSCFF
03C14   0000 1020              					Dc.l	DAFBNTSCOffset
03C18   0400                   					Dc.w	DAFB_1024_RB
03C1A   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
03C22   0000                   					Dc.w	defVersion
03C24   0000                   					Dc.w	0									; packType not used
03C26   0000 0000              					Dc.l	0									; packSize not used
03C2A   0048 0000              					Dc.l	HResNTSC
03C2E   0048 0000              					Dc.l	VResNTSC
03C32   0000                   					Dc.w	defPixelType
03C34   0008                   					Dc.w	8
03C36   0001                   					Dc.w	defCmpCount
03C38   0008                   					Dc.w	8
03C3A   0000 0000              					Dc.l	defmPlaneBytes
03C3E                          	_EndEBVParms_DAFB_NTSCFF
03C3E
03C3E   0000 002E              	_EBVParms_DAFB_NTSCSTconv	Dc.l	_EndEBVParms_DAFB_NTSCSTconv-_EBVParms_DAFB_NTSCSTconv
03C42   0000 D440              					Dc.l	DAFBNTSCConvOff+defmNTSCSTB8
03C46   0400                   					Dc.w	DAFB_1024_RB
03C48   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
03C50   0000                   					Dc.w	defVersion
03C52   0000                   					Dc.w	0									; packType not used
03C54   0000 0000              					Dc.l	0									; packSize not used
03C58   0048 0000              					Dc.l	HResNTSC
03C5C   0048 0000              					Dc.l	VResNTSC
03C60   0000                   					Dc.w	defPixelType
03C62   0008                   					Dc.w	8
03C64   0001                   					Dc.w	defCmpCount
03C66   0008                   					Dc.w	8
03C68   0000 0000              					Dc.l	defmPlaneBytes
03C6C                          	_EndEBVParms_DAFB_NTSCSTconv
03C6C
03C6C   0000 002E              	_EBVParms_DAFB_NTSCFFconv	Dc.l	_EndEBVParms_DAFB_NTSCFFconv-_EBVParms_DAFB_NTSCFFconv
03C70   0000 1400              					Dc.l	DAFBNTSCConvOff
03C74   0400                   					Dc.w	DAFB_1024_RB
03C76   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
03C7E   0000                   					Dc.w	defVersion
03C80   0000                   					Dc.w	0									; packType not used
03C82   0000 0000              					Dc.l	0									; packSize not used
03C86   0048 0000              					Dc.l	HResNTSC
03C8A   0048 0000              					Dc.l	VResNTSC
03C8E   0000                   					Dc.w	defPixelType
03C90   0008                   					Dc.w	8
03C92   0001                   					Dc.w	defCmpCount
03C94   0008                   					Dc.w	8
03C96   0000 0000              					Dc.l	defmPlaneBytes
03C9A                          	_EndEBVParms_DAFB_NTSCFFconv
03C9A
03C9A   0000 002E              	_EBVParms_DAFB_640by480		DC.L	_EndEBVParms_DAFB_640by480-_EBVParms_DAFB_640by480
03C9E
03C9E   0000 1000              					DC.L	DAFBStdOffset
03CA2   0400                   					DC.W	DAFB_1024_RB
03CA4   0000 0000 01E0         					DC.W	0,0,480,640							; who needs equates in a file of this size?
03CAC   0000                   					DC.W	defVersion
03CAE   0000                   					DC.W	0									; packType not used
03CB0   0000 0000              					DC.L	0									; packSize not used
03CB4   0048 0000              					DC.L	$00480000							; 72 hdpi
03CB8   0048 0000              					DC.L	$00480000							; 72 vdpi
03CBC   0000                   					DC.W	defPixelType
03CBE   0008                   					DC.W	8
03CC0   0001                   					DC.W	defCmpCount
03CC2   0008                   					DC.W	8
03CC4   0000 0000              					DC.L	defmPlaneBytes
03CC8                          	_EndEBVParms_DAFB_640by480
03CC8
03CC8   0000 002E              	_EBVParms_DAFB_SVGA		DC.L	_EndEBVParms_DAFB_SVGA-_EBVParms_DAFB_SVGA
03CCC
03CCC   0000 0E00              					DC.L	DAFBBSOffset
03CD0   0340                   					DC.W	DAFB_832_RB
03CD2   0000 0000 0258         					Dc.w	defmBounds_TSVGA,defmBounds_LSVGA,defmBounds_BSVGA,defmBounds_RSVGA
03CDA   0000                   					DC.W	defVersion
03CDC   0000                   					DC.W	0									; packType not used
03CDE   0000 0000              					DC.L	0									; packSize not used
03CE2   0048 0000              					DC.L	HResSVGA
03CE6   0048 0000              					DC.L	VResSVGA
03CEA   0000                   					DC.W	defPixelType
03CEC   0008                   					DC.W	8
03CEE   0001                   					DC.W	defCmpCount
03CF0   0008                   					DC.W	8
03CF2   0000 0000              					DC.L	defmPlaneBytes
03CF6                          	_EndEBVParms_DAFB_SVGA
03CF6
03CF6   0000 002E              	_EBVParms_DAFB_GF	DC.L	_EndEBVParms_DAFB_GF-_EBVParms_DAFB_GF
03CFA
03CFA   0000 0E00              					DC.L	DAFBBSOffset
03CFE   0340                   					DC.W	DAFB_832_RB
03D00   0000 0000 0270         					DC.W	defmBounds_TGF,defmBounds_LGF,defmBounds_BGF,defmBounds_RGF
03D08   0000                   					DC.W	defVersion
03D0A   0000                   					DC.W	0									; packType not used
03D0C   0000 0000              					DC.L	0									; packSize not used
03D10   0048 0000              					DC.L	HResGF
03D14   0048 0000              					DC.L	VResGF
03D18   0000                   					DC.W	defPixelType
03D1A   0008                   					DC.W	8
03D1C   0001                   					DC.W	defCmpCount
03D1E   0008                   					DC.W	8
03D20   0000 0000              					DC.L	defmPlaneBytes
03D24                          	_EndEBVParms_DAFB_GF
03D24
03D24   0000 002E              	_EBVParms_DAFB_PALST	Dc.l	_EndEBVParms_DAFB_PALST-_EBVParms_DAFB_PALST
03D28   0000 AA60              					Dc.l	DAFBPALOffset+defmPALSTB8
03D2C   0340                   					Dc.w	DAFB_832_RB
03D2E   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
03D36   0000                   					Dc.w	defVersion
03D38   0000                   					Dc.w	0									; packType not used
03D3A   0000 0000              					Dc.l	0									; packSize not used
03D3E   0048 0000              					Dc.l	HResPAL
03D42   0048 0000              					Dc.l	VResPAL
03D46   0000                   					Dc.w	defPixelType
03D48   0008                   					Dc.w	8
03D4A   0001                   					Dc.w	defCmpCount
03D4C   0008                   					Dc.w	8
03D4E   0000 0000              					Dc.l	defmPlaneBytes
03D52                          	_EndEBVParms_DAFB_PALST
03D52
03D52   0000 002E              	_EBVParms_DAFB_PALFF	Dc.l	_EndEBVParms_DAFB_PALFF-_EBVParms_DAFB_PALFF
03D56   0000 0E20              					Dc.l	DAFBPALOffset
03D5A   0340                   					Dc.w	DAFB_832_RB
03D5C   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
03D64   0000                   					Dc.w	defVersion
03D66   0000                   					Dc.w	0									; packType not used
03D68   0000 0000              					Dc.l	0									; packSize not used
03D6C   0048 0000              					Dc.l	HResPAL
03D70   0048 0000              					Dc.l	VResPAL
03D74   0000                   					Dc.w	defPixelType
03D76   0008                   					Dc.w	8
03D78   0001                   					Dc.w	defCmpCount
03D7A   0008                   					Dc.w	8
03D7C   0000 0000              					Dc.l	defmPlaneBytes
03D80                          	_EndEBVParms_DAFB_PALFF
03D80
03D80   0000 002E              	_EBVParms_DAFB_PALSTconv	Dc.l	_EndEBVParms_DAFB_PALSTconv-_EBVParms_DAFB_PALSTconv
03D84   0000 D460              					Dc.l	DAFBPALConvOff+defmPALSTB8Conv
03D88   0400                   					Dc.w	DAFB_1024_RB
03D8A   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
03D92   0000                   					Dc.w	defVersion
03D94   0000                   					Dc.w	0									; packType not used
03D96   0000 0000              					Dc.l	0									; packSize not used
03D9A   0048 0000              					Dc.l	HResPAL
03D9E   0048 0000              					Dc.l	VResPAL
03DA2   0000                   					Dc.w	defPixelType
03DA4   0008                   					Dc.w	8
03DA6   0001                   					Dc.w	defCmpCount
03DA8   0008                   					Dc.w	8
03DAA   0000 0000              					Dc.l	defmPlaneBytes
03DAE                          	_EndEBVParms_DAFB_PALSTconv
03DAE
03DAE   0000 002E              	_EBVParms_DAFB_PALFFconv	Dc.l	_EndEBVParms_DAFB_PALFFconv-_EBVParms_DAFB_PALFFconv
03DB2   0000 1420              					Dc.l	DAFBPALConvOff
03DB6   0400                   					Dc.w	DAFB_1024_RB
03DB8   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
03DC0   0000                   					Dc.w	defVersion
03DC2   0000                   					Dc.w	0									; packType not used
03DC4   0000 0000              					Dc.l	0									; packSize not used
03DC8   0048 0000              					Dc.l	HResPAL
03DCC   0048 0000              					Dc.l	VResPAL
03DD0   0000                   					Dc.w	defPixelType
03DD2   0008                   					Dc.w	8
03DD4   0001                   					Dc.w	defCmpCount
03DD6   0008                   					Dc.w	8
03DD8   0000 0000              					Dc.l	defmPlaneBytes
03DDC                          	_EndEBVParms_DAFB_PALFFconv
03DDC
03DDC   0000 002E              	_EBVParms_DAFB_19	DC.L	_EndEBVParms_DAFB_19-_EBVParms_DAFB_19
03DE0
03DE0   0000 1000              					DC.L	DAFBStdOffset
03DE4   0400                   					DC.W	DAFB_1024_RB
03DE6   0000 0000 0300         					DC.W	defmBounds_T19,defmBounds_L19,defmBounds_B19,defmBounds_R19
03DEE   0000                   					DC.W	defVersion
03DF0   0000                   					DC.W	0									; packType not used
03DF2   0000 0000              					DC.L	0									; packSize not used
03DF6   0048 0000              					DC.L	HRes19
03DFA   0048 0000              					DC.L	VRes19
03DFE   0000                   					DC.W	defPixelType
03E00   0008                   					DC.W	8
03E02   0001                   					DC.W	defCmpCount
03E04   0008                   					DC.W	8
03E06   0000 0000              					DC.L	defmPlaneBytes
03E0A                          	_EndEBVParms_DAFB_19
03E0A
03E0A                          	;-------------------------------------------------------------
03E0A                          	;				Sixteen-Bit per pixel parameters
03E0A                          	;-------------------------------------------------------------
03E0A                          	;
03E0A
03E0A                          	_D16BM_DAFB_2P	OSLstEntry	mVidParams,_D16BVParms_DAFB_2P	; offset to vid parameters for this c
03E0A   0100 00C0             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_2P-*)**$00FFFFFF)
03E0E                          					DatLstEntry	mPageCnt,defPages_DAFB			; number of video pages in this configuration
03E0E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E12                          					DatLstEntry mDevType,directType				; device type
03E12   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E16                          					DatLstEntry	EndOfList,0						;
03E16   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E1A
03E1A                          	_D16BM_DAFB_FP	OSLstEntry	mVidParams,_D16BVParms_DAFB_FP	; offset to vid parameters for this c
03E1A   0100 00DE             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_FP-*)**$00FFFFFF)
03E1E                          					DatLstEntry	mPageCnt,defPages_DAFB			; number of video pages in this configuration
03E1E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E22                          					DatLstEntry mDevType,directType				; device type
03E22   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E26                          					DatLstEntry	EndOfList,0						;
03E26   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E2A
03E2A                          	_D16BM_DAFB_GS	OSLstEntry	mVidParams,_D16BVParms_DAFB_GS	; offset to vid parameters for this c
03E2A   0100 00FC             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_GS-*)**$00FFFFFF)
03E2E                          					DatLstEntry	mPageCnt,defPages_DAFB			; number of video pages in this configuration
03E2E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E32                          					DatLstEntry mDevType,directType				; device type
03E32   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E36                          					DatLstEntry	EndOfList,0						;
03E36   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E3A
03E3A                          	_D16BM_DAFB_NTSCST
03E3A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_NTSCST	;
03E3A   0100 011A             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_NTSCST-*)**$00FFFFFF)
03E3E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E3E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E42                          					DatLstEntry mDevType,directType				;
03E42   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E46                          					DatLstEntry	EndOfList,0						;
03E46   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E4A
03E4A                          	_D16BM_DAFB_NTSCFF
03E4A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_NTSCFF ;
03E4A   0100 0138             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_NTSCFF-*)**$00FFFFFF)
03E4E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E4E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E52                          					DatLstEntry mDevType,directType				;
03E52   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E56                          					DatLstEntry	EndOfList,0						;
03E56   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E5A
03E5A                          	_D16BM_DAFB_HR
03E5A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_640by480 ;
03E5A   0100 0156             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_640by480-*)**$00FFFFFF)
03E5E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E5E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E62                          					DatLstEntry mDevType,directType				;
03E62   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E66                          					DatLstEntry	EndOfList,0						;
03E66   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E6A
03E6A                          	_D16BM_DAFB_VGA
03E6A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_640by480 ;
03E6A   0100 0146             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_640by480-*)**$00FFFFFF)
03E6E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E6E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E72                          					DatLstEntry mDevType,directType				;
03E72   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E76                          					DatLstEntry	EndOfList,0						;
03E76   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E7A
03E7A                          	_D16BM_DAFB_SVGA
03E7A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_SVGA ;
03E7A   0100 0164             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_SVGA-*)**$00FFFFFF)
03E7E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E7E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E82                          					DatLstEntry mDevType,directType				;
03E82   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E86                          					DatLstEntry	EndOfList,0						;
03E86   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E8A
03E8A                          	_D16BM_DAFB_GF
03E8A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_GF ;
03E8A   0100 0182             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_GF-*)**$00FFFFFF)
03E8E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E8E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03E92                          					DatLstEntry mDevType,directType				;
03E92   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03E96                          					DatLstEntry	EndOfList,0						;
03E96   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03E9A
03E9A                          	_D16BM_DAFB_PALST
03E9A                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_PALST ;
03E9A   0100 01A0             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_PALST-*)**$00FFFFFF)
03E9E                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03E9E   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03EA2                          					DatLstEntry mDevType,directType				;
03EA2   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03EA6                          					DatLstEntry	EndOfList,0						;
03EA6   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03EAA
03EAA                          	_D16BM_DAFB_PALFF
03EAA                          					OSLstEntry	mVidParams,_D16BVParms_DAFB_PALFF ;
03EAA   0100 01BE             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_PALFF-*)**$00FFFFFF)
03EAE                          					DatLstEntry	mPageCnt,defPages_DAFB			;
03EAE   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03EB2                          					DatLstEntry mDevType,directType				;
03EB2   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03EB6                          					DatLstEntry	EndOfList,0						;
03EB6   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03EBA
03EBA                          	_D16BM_DAFB_19	OSLstEntry	mVidParams,_D16BVParms_DAFB_19	; offset to vid parameters for this c
03EBA   0100 01DC             1	  				DC.L		(mVidParams<<24)++((_D16BVParms_DAFB_19-*)**$00FFFFFF)
03EBE                          					DatLstEntry	mPageCnt,defPages_DAFB			; number of video pages in this configuration
03EBE   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
03EC2                          					DatLstEntry mDevType,directType				; device type
03EC2   0400 0002             1	  				DC.L		(mDevType<<24)+directType
03EC6                          					DatLstEntry	EndOfList,0						;
03EC6   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
03ECA
03ECA                          	_D16BVParms_DAFB_2P
03ECA   0000 002E              					DC.L	_EndD16BVParms_DAFB_2P-_D16BVParms_DAFB_2P	; physical Block Size
03ECE   0000 0A00              					DC.L	DAFB2POffset
03ED2   0900                   					DC.W	DAFB_2304_RB						; physRowBytes
03ED4   0000 0000 0366         					DC.W	defmBounds_T2P,defmBounds_L2P,defmBounds_B2P,defmBounds_R2P
03EDC   0000                   					DC.W	defVersion							; bmVersion
03EDE   0000                   					DC.W	0									; packType not used
03EE0   0000 0000              					DC.L	0									; packSize not used
03EE4   004D 0000              					DC.L	HRes2P								; bmHRes
03EE8   004D 0000              					DC.L	VRes2P								; bmVRes
03EEC   0010                   					DC.W	ChunkyDirect						; bmPixelType
03EEE   0010                   					DC.W	16									; bmPixelSize
03EF0   0003                   					DC.W	3									; bmCmpCount
03EF2   0005                   					DC.W	5									; bmCmpSize
03EF4   0000 0000              					DC.L	defmPlaneBytes						; bmPlaneBytes
03EF8                          	_EndD16BVParms_DAFB_2P
03EF8
03EF8                          	_D16BVParms_DAFB_FP
03EF8   0000 002E              					DC.L	_EndD16BVParms_DAFB_FP-_D16BVParms_DAFB_FP	; physical Block Size
03EFC   0000 1000              					DC.L	DAFBStdOffset
03F00   0800                   					DC.W	DAFB_2048_RB						; physRowBytes
03F02   0000 0000 0366         					DC.W	defmBounds_TFP,defmBounds_LFP,defmBounds_BFP,defmBounds_RFP
03F0A   0000                   					DC.W	defVersion							; bmVersion
03F0C   0000                   					DC.W	0									; packType not used
03F0E   0000 0000              					DC.L	0									; packSize not used
03F12   0050 0000              					DC.L	HResFP								; bmHRes
03F16   0050 0000              					DC.L	VResFP								; bmVRes
03F1A   0010                   					DC.W	ChunkyDirect						; bmPixelType
03F1C   0010                   					DC.W	16									; bmPixelSize
03F1E   0003                   					DC.W	3									; bmCmpCount
03F20   0005                   					DC.W	5									; bmCmpSize
03F22   0000 0000              					DC.L	defmPlaneBytes						; bmPlaneBytes
03F26                          	_EndD16BVParms_DAFB_FP
03F26
03F26                          	_D16BVParms_DAFB_GS
03F26   0000 002E              					DC.L	_EndD16BVParms_DAFB_GS-_D16BVParms_DAFB_GS	; physical Block Size
03F2A   0000 1000              					DC.L	DAFBStdOffset
03F2E   0400                   					DC.W	DAFB_1024_RB						; physRowBytes
03F30   0000 0000 0180         					DC.W	defmBounds_TGS,defmBounds_LGS,defmBounds_BGS,defmBounds_RGS
03F38   0000                   					DC.W	defVersion							; bmVersion
03F3A   0000                   					DC.W	0									; packType not used
03F3C   0000 0000              					DC.L	0									; packSize not used
03F40   0048 0000              					DC.L	HResGS								; bmHRes
03F44   0048 0000              					DC.L	VResGS								; bmVRes
03F48   0010                   					DC.W	ChunkyDirect						; bmPixelType
03F4A   0010                   					DC.W	16									; bmPixelSize
03F4C   0003                   					DC.W	3									; bmCmpCount
03F4E   0005                   					DC.W	5									; bmCmpSize
03F50   0000 0000              					DC.L	defmPlaneBytes						; bmPlaneBytes
03F54                          	_EndD16BVParms_DAFB_GS
03F54
03F54   0000 002E              	_D16BVParms_DAFB_NTSCST	Dc.l	_EndD16BVParms_DAFB_NTSCST-_D16BVParms_DAFB_NTSCST
03F58   0001 90A0              					Dc.l	DAFBNTSCOffset+defmNTSCSTB16
03F5C   0800                   					Dc.w	DAFB_2048_RB
03F5E   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
03F66   0000                   					Dc.w	defVersion
03F68   0000                   					Dc.w	0									; packType not used
03F6A   0000 0000              					Dc.l	0									; packSize not used
03F6E   0048 0000              					Dc.l	HResNTSC
03F72   0048 0000              					Dc.l	VResNTSC
03F76   0010                   					Dc.w	ChunkyDirect
03F78   0010                   					Dc.w	16
03F7A   0003                   					Dc.w	3
03F7C   0005                   					Dc.w	5
03F7E   0000 0000              					Dc.l	defmPlaneBytes
03F82                          	_EndD16BVParms_DAFB_NTSCST
03F82
03F82   0000 002E              	_D16BVParms_DAFB_NTSCFF	Dc.l	_EndD16BVParms_DAFB_NTSCFF-_D16BVParms_DAFB_NTSCFF
03F86   0000 1020              					Dc.l	DAFBNTSCOffset
03F8A   0800                   					Dc.w	DAFB_2048_RB
03F8C   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
03F94   0000                   					Dc.w	defVersion
03F96   0000                   					Dc.w	0									; packType not used
03F98   0000 0000              					Dc.l	0									; packSize not used
03F9C   0048 0000              					Dc.l	HResNTSC
03FA0   0048 0000              					Dc.l	VResNTSC
03FA4   0010                   					Dc.w	ChunkyDirect
03FA6   0010                   					Dc.w	16
03FA8   0003                   					Dc.w	3
03FAA   0005                   					Dc.w	5
03FAC   0000 0000              					Dc.l	defmPlaneBytes
03FB0                          	_EndD16BVParms_DAFB_NTSCFF
03FB0
03FB0   0000 002E              	_D16BVParms_DAFB_640by480	DC.L	_EndD16BVParms_DAFB_640by480-_D16BVParms_DAFB_640by480
03FB4
03FB4   0000 1000              					DC.L	DAFBStdOffset
03FB8   0800                   					DC.W	DAFB_2048_RB
03FBA   0000 0000 01E0         					DC.W	0,0,480,640							; who needs equates in a file of this size?
03FC2   0000                   					DC.W	defVersion
03FC4   0000                   					DC.W	0									; packType not used
03FC6   0000 0000              					DC.L	0									; packSize not used
03FCA   0048 0000              					DC.L	$00480000							; 72 hdpi
03FCE   0048 0000              					DC.L	$00480000							; 72 vdpi
03FD2   0010                   					DC.W	ChunkyDirect
03FD4   0010                   					DC.W	16
03FD6   0003                   					DC.W	3
03FD8   0005                   					DC.W	5
03FDA   0000 0000              					DC.L	defmPlaneBytes
03FDE                          	_EndD16BVParms_DAFB_640by480
03FDE
03FDE   0000 002E              	_D16BVParms_DAFB_SVGA	DC.L	_EndD16BVParms_DAFB_SVGA-_D16BVParms_DAFB_SVGA
03FE2
03FE2   0000 0E00              					DC.L	DAFBBSOffset
03FE6   0680                   					DC.W	DAFB_1664_RB
03FE8   0000 0000 0258         					Dc.w	defmBounds_TSVGA,defmBounds_LSVGA,defmBounds_BSVGA,defmBounds_RSVGA
03FF0   0000                   					DC.W	defVersion
03FF2   0000                   					DC.W	0									; packType not used
03FF4   0000 0000              					DC.L	0									; packSize not used
03FF8   0048 0000              					Dc.l	HResSVGA
03FFC   0048 0000              					Dc.l	VResSVGA
04000   0010                   					DC.W	ChunkyDirect
04002   0010                   					DC.W	16
04004   0003                   					DC.W	3
04006   0005                   					DC.W	5
04008   0000 0000              					DC.L	defmPlaneBytes
0400C                          	_EndD16BVParms_DAFB_SVGA
0400C
0400C   0000 002E              	_D16BVParms_DAFB_GF	DC.L	_EndD16BVParms_DAFB_GF-_D16BVParms_DAFB_GF
04010
04010   0000 0E00              					DC.L	DAFBBSOffset
04014   0680                   					DC.W	DAFB_1664_RB
04016   0000 0000 0270         					Dc.w	defmBounds_TGF,defmBounds_LGF,defmBounds_BGF,defmBounds_RGF
0401E   0000                   					DC.W	defVersion
04020   0000                   					DC.W	0									; packType not used
04022   0000 0000              					DC.L	0									; packSize not used
04026   0048 0000              					Dc.l	HResGF
0402A   0048 0000              					Dc.l	VResGF
0402E   0010                   					DC.W	ChunkyDirect
04030   0010                   					DC.W	16
04032   0003                   					DC.W	3
04034   0005                   					DC.W	5
04036   0000 0000              					DC.L	defmPlaneBytes
0403A                          	_EndD16BVParms_DAFB_GF
0403A
0403A   0000 002E              	_D16BVParms_DAFB_PALST	Dc.l	_EndD16BVParms_DAFB_PALST-_D16BVParms_DAFB_PALST
0403E   0001 46A0              					Dc.l	DAFBPALOffset+defmPALSTB16
04042   0680                   					Dc.w	DAFB_1664_RB
04044   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
0404C   0000                   					Dc.w	defVersion
0404E   0000                   					Dc.w	0									; packType not used
04050   0000 0000              					Dc.l	0									; packSize not used
04054   0048 0000              					Dc.l	HResPAL
04058   0048 0000              					Dc.l	VResPAL
0405C   0010                   					Dc.w	ChunkyDirect
0405E   0010                   					Dc.w	16
04060   0003                   					Dc.w	3
04062   0005                   					Dc.w	5
04064   0000 0000              					Dc.l	defmPlaneBytes
04068                          	_EndD16BVParms_DAFB_PALST
04068
04068   0000 025C              	_D16BVParms_DAFB_PALFF	Dc.l	_EndD32BVParms_DAFB_PALFF-_D16BVParms_DAFB_PALFF
0406C   0000 0E20              					Dc.l	DAFBPALOffset
04070   0680                   					Dc.w	DAFB_1664_RB
04072   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
0407A   0000                   					Dc.w	defVersion
0407C   0000                   					Dc.w	0									; packType not used
0407E   0000 0000              					Dc.l	0									; packSize not used
04082   0048 0000              					Dc.l	HResPAL
04086   0048 0000              					Dc.l	VResPAL
0408A   0010                   					Dc.w	ChunkyDirect
0408C   0010                   					Dc.w	16
0408E   0003                   					Dc.w	3
04090   0005                   					Dc.w	5
04092   0000 0000              					Dc.l	defmPlaneBytes
04096                          	_EndD16BVParms_DAFB_PALFF
04096
04096                          	_D16BVParms_DAFB_19
04096   0000 002E              					DC.L	_EndD16BVParms_DAFB_19-_D16BVParms_DAFB_19 ; physical Block Size
0409A   0000 1000              					DC.L	DAFBStdOffset
0409E   0800                   					DC.W	DAFB_2048_RB						; physRowBytes
040A0   0000 0000 0300         					DC.W	defmBounds_T19,defmBounds_L19,defmBounds_B19,defmBounds_R19
040A8   0000                   					DC.W	defVersion							; bmVersion
040AA   0000                   					DC.W	0									; packType not used
040AC   0000 0000              					DC.L	0									; packSize not used
040B0   0048 0000              					DC.L	HRes19								; bmHRes
040B4   0048 0000              					DC.L	VRes19								; bmVRes
040B8   0010                   					DC.W	ChunkyDirect						; bmPixelType
040BA   0010                   					DC.W	16									; bmPixelSize
040BC   0003                   					DC.W	3									; bmCmpCount
040BE   0005                   					DC.W	5									; bmCmpSize
040C0   0000 0000              					DC.L	defmPlaneBytes						; bmPlaneBytes
040C4                          	_EndD16BVParms_DAFB_19
040C4
040C4                          	;-------------------------------------------------------------
040C4                          	;				ThirtyTwo-Bit per pixel parameters
040C4                          	;-------------------------------------------------------------
040C4                          	;
040C4
040C4                          	_D32BM_DAFB_GS	OSLstEntry	mVidParams,_D32BVParms_DAFB_GS	;
040C4   0100 0090             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_GS-*)**$00FFFFFF)
040C8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
040C8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
040CC                          					DatLstEntry mDevType,directType				;
040CC   0400 0002             1	  				DC.L		(mDevType<<24)+directType
040D0                          					DatLstEntry	EndOfList,0						;
040D0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
040D4
040D4                          	_D32BM_DAFB_NTSCST
040D4                          					OSLstEntry	mVidParams,_D32BVParms_DAFB_NTSCST ;
040D4   0100 00AE             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_NTSCST-*)**$00FFFFFF)
040D8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
040D8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
040DC                          					DatLstEntry mDevType,directType				;
040DC   0400 0002             1	  				DC.L		(mDevType<<24)+directType
040E0                          					DatLstEntry	EndOfList,0						;
040E0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
040E4
040E4                          	_D32BM_DAFB_NTSCFF
040E4                          					OSLstEntry	mVidParams,_D32BVParms_DAFB_NTSCFF ;
040E4   0100 00CC             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_NTSCFF-*)**$00FFFFFF)
040E8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
040E8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
040EC                          					DatLstEntry mDevType,directType				;
040EC   0400 0002             1	  				DC.L		(mDevType<<24)+directType
040F0                          					DatLstEntry	EndOfList,0						;
040F0   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
040F4
040F4                          	_D32BM_DAFB_HR	OSLstEntry	mVidParams,_D32BVParms_DAFB_640by480 ;
040F4   0100 00EA             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_640by480-*)**$00FFFFFF)
040F8                          					DatLstEntry	mPageCnt,defPages_DAFB			;
040F8   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
040FC                          					DatLstEntry mDevType,directType				;
040FC   0400 0002             1	  				DC.L		(mDevType<<24)+directType
04100                          					DatLstEntry	EndOfList,0						;
04100   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
04104
04104                          	_D32BM_DAFB_VGA	OSLstEntry	mVidParams,_D32BVParms_DAFB_640by480 ;
04104   0100 00DA             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_640by480-*)**$00FFFFFF)
04108                          					DatLstEntry	mPageCnt,defPages_DAFB			;
04108   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0410C                          					DatLstEntry mDevType,directType				;
0410C   0400 0002             1	  				DC.L		(mDevType<<24)+directType
04110                          					DatLstEntry	EndOfList,0						;
04110   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
04114
04114                          	_D32BM_DAFB_SVGA
04114                          					OSLstEntry	mVidParams,_D32BVParms_DAFB_SVGA ;
04114   0100 00F8             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_SVGA-*)**$00FFFFFF)
04118                          					DatLstEntry	mPageCnt,defPages_DAFB			;
04118   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0411C                          					DatLstEntry mDevType,directType				;
0411C   0400 0002             1	  				DC.L		(mDevType<<24)+directType
04120                          					DatLstEntry	EndOfList,0						;
04120   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
04124
04124                          	_D32BM_DAFB_GF	OSLstEntry	mVidParams,_D32BVParms_DAFB_GF	;
04124   0100 0116             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_GF-*)**$00FFFFFF)
04128                          					DatLstEntry	mPageCnt,defPages_DAFB			;
04128   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0412C                          					DatLstEntry mDevType,directType				;
0412C   0400 0002             1	  				DC.L		(mDevType<<24)+directType
04130                          					DatLstEntry	EndOfList,0						;
04130   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
04134
04134                          	_D32BM_DAFB_PALST
04134                          					OSLstEntry	mVidParams,_D32BVParms_DAFB_PALST ;
04134   0100 0134             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_PALST-*)**$00FFFFFF)
04138                          					DatLstEntry	mPageCnt,defPages_DAFB			;
04138   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0413C                          					DatLstEntry mDevType,directType				;
0413C   0400 0002             1	  				DC.L		(mDevType<<24)+directType
04140                          					DatLstEntry	EndOfList,0						;
04140   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
04144
04144                          	_D32BM_DAFB_PALFF
04144                          					OSLstEntry	mVidParams,_D32BVParms_DAFB_PALFF ;
04144   0100 0152             1	  				DC.L		(mVidParams<<24)++((_D32BVParms_DAFB_PALFF-*)**$00FFFFFF)
04148                          					DatLstEntry	mPageCnt,defPages_DAFB			;
04148   0300 0001             1	  				DC.L		(mPageCnt<<24)+defPages_DAFB
0414C                          					DatLstEntry mDevType,directType				;
0414C   0400 0002             1	  				DC.L		(mDevType<<24)+directType
04150                          					DatLstEntry	EndOfList,0						;
04150   FF00 0000             1	  				DC.L		(EndOfList<<24)+0
04154
04154   0000 002E              	_D32BVParms_DAFB_GS	DC.L	_EndD32BVParms_DAFB_GS-_D32BVParms_DAFB_GS
04158
04158   0000 1000              					DC.L	DAFBStdOffset
0415C   0800                   					DC.W	DAFB_2048_RB
0415E   0000 0000 0180         					DC.W	defmBounds_TGS,defmBounds_LGS,defmBounds_BGS,defmBounds_RGS
04166   0000                   					DC.W	defVersion
04168   0000                   					DC.W	0									; packType not used
0416A   0000 0000              					DC.L	0									; packSize not used
0416E   0048 0000              					DC.L	HResGS
04172   0048 0000              					DC.L	VResGS
04176   0010                   					DC.W	ChunkyDirect
04178   0020                   					DC.W	32
0417A   0003                   					DC.W	3
0417C   0008                   					DC.W	8
0417E   0000 0000              					DC.L	defmPlaneBytes
04182                          	_EndD32BVParms_DAFB_GS
04182
04182   0000 002E              	_D32BVParms_DAFB_NTSCST	Dc.l	_EndD32BVParms_DAFB_NTSCST-_D32BVParms_DAFB_NTSCST
04186   0003 1120              					Dc.l	DAFBNTSCOffset+defmNTSCSTB32
0418A   1000                   					Dc.w	DAFB_4096_RB
0418C   0000 0000 0180         					Dc.w	defmBounds_TNTSCST,defmBounds_LNTSCST,defmBounds_BNTSCST,defmBounds_RNTSCST
04194   0000                   					Dc.w	defVersion
04196   0000                   					Dc.w	0									; packType not used
04198   0000 0000              					Dc.l	0									; packSize not used
0419C   0048 0000              					Dc.l	HResNTSC
041A0   0048 0000              					Dc.l	VResNTSC
041A4   0010                   					Dc.w	ChunkyDirect
041A6   0020                   					Dc.w	32
041A8   0003                   					Dc.w	3
041AA   0008                   					Dc.w	8
041AC   0000 0000              					Dc.l	defmPlaneBytes
041B0                          	_EndD32BVParms_DAFB_NTSCST
041B0
041B0   0000 002E              	_D32BVParms_DAFB_NTSCFF	Dc.l	_EndD32BVParms_DAFB_NTSCFF-_D32BVParms_DAFB_NTSCFF
041B4   0000 1020              					Dc.l	DAFBNTSCOffset
041B8   1000                   					Dc.w	DAFB_4096_RB
041BA   0000 0000 01E0         					Dc.w	defmBounds_TNTSCFF,defmBounds_LNTSCFF,defmBounds_BNTSCFF,defmBounds_RNTSCFF
041C2   0000                   					Dc.w	defVersion
041C4   0000                   					Dc.w	0									; packType not used
041C6   0000 0000              					Dc.l	0									; packSize not used
041CA   0048 0000              					Dc.l	HResNTSC
041CE   0048 0000              					Dc.l	VResNTSC
041D2   0010                   					Dc.w	ChunkyDirect
041D4   0020                   					Dc.w	32
041D6   0003                   					Dc.w	3
041D8   0008                   					Dc.w	8
041DA   0000 0000              					Dc.l	defmPlaneBytes
041DE                          	_EndD32BVParms_DAFB_NTSCFF
041DE
041DE   0000 002E              	_D32BVParms_DAFB_640by480	DC.L	_EndD32BVParms_DAFB_640by480-_D32BVParms_DAFB_640by480
041E2
041E2   0000 1000              					DC.L	DAFBStdOffset
041E6   1000                   					DC.W	DAFB_4096_RB
041E8   0000 0000 01E0         					DC.W	0,0,480,640							; who needs equates in a file of this size?
041F0   0000                   					DC.W	defVersion
041F2   0000                   					DC.W	0									; packType not used
041F4   0000 0000              					DC.L	0									; packSize not used
041F8   0048 0000              					DC.L	$00480000							; 72 hdpi
041FC   0048 0000              					DC.L	$00480000							; 72 vdpi
04200   0010                   					DC.W	ChunkyDirect
04202   0020                   					DC.W	32
04204   0003                   					DC.W	3
04206   0008                   					DC.W	8
04208   0000 0000              					DC.L	defmPlaneBytes
0420C                          	_EndD32BVParms_DAFB_640by480
0420C
0420C   0000 002E              	_D32BVParms_DAFB_SVGA	DC.L	_EndD32BVParms_DAFB_SVGA-_D32BVParms_DAFB_SVGA
04210
04210   0000 0E00              					DC.L	DAFBBSOffset
04214   0D00                   					DC.W	DAFB_3328_RB
04216   0000 0000 0258         					Dc.w	defmBounds_TSVGA,defmBounds_LSVGA,defmBounds_BSVGA,defmBounds_RSVGA
0421E   0000                   					DC.W	defVersion
04220   0000                   					DC.W	0									; packType not used
04222   0000 0000              					DC.L	0									; packSize not used
04226   0048 0000              					DC.L	HResSVGA
0422A   0048 0000              					DC.L	VResSVGA
0422E   0010                   					DC.W	ChunkyDirect
04230   0020                   					DC.W	32
04232   0003                   					DC.W	3
04234   0008                   					DC.W	8
04236   0000 0000              					DC.L	defmPlaneBytes
0423A                          	_EndD32BVParms_DAFB_SVGA
0423A
0423A   0000 002E              	_D32BVParms_DAFB_GF	DC.L	_EndD32BVParms_DAFB_GF-_D32BVParms_DAFB_GF
0423E
0423E   0000 0E00              					DC.L	DAFBBSOffset
04242   0D00                   					DC.W	DAFB_3328_RB
04244   0000 0000 0270         					DC.W	defmBounds_TGF,defmBounds_LGF,defmBounds_BGF,defmBounds_RGF
0424C   0000                   					DC.W	defVersion
0424E   0000                   					DC.W	0									; packType not used
04250   0000 0000              					DC.L	0									; packSize not used
04254   0048 0000              					DC.L	HResGF
04258   0048 0000              					DC.L	VResGF
0425C   0010                   					DC.W	ChunkyDirect
0425E   0020                   					DC.W	32
04260   0003                   					DC.W	3
04262   0008                   					DC.W	8
04264   0000 0000              					DC.L	defmPlaneBytes
04268                          	_EndD32BVParms_DAFB_GF
04268
04268   0000 002E              	_D32BVParms_DAFB_PALST	Dc.l	_EndD32BVParms_DAFB_PALST-_D32BVParms_DAFB_PALST
0426C   0002 7F20              					Dc.l	DAFBPALOffset+defmPALSTB32
04270   0D00                   					Dc.w	DAFB_3328_RB
04272   0000 0000 01E0         					Dc.w	defmBounds_TPALST,defmBounds_LPALST,defmBounds_BPALST,defmBounds_RPALST
0427A   0000                   					Dc.w	defVersion
0427C   0000                   					Dc.w	0									; packType not used
0427E   0000 0000              					Dc.l	0									; packSize not used
04282   0048 0000              					Dc.l	HResPAL
04286   0048 0000              					Dc.l	VResPAL
0428A   0010                   					Dc.w	ChunkyDirect
0428C   0020                   					Dc.w	32
0428E   0003                   					Dc.w	3
04290   0008                   					Dc.w	8
04292   0000 0000              					Dc.l	defmPlaneBytes
04296                          	_EndD32BVParms_DAFB_PALST
04296
04296   0000 002E              	_D32BVParms_DAFB_PALFF	Dc.l	_EndD32BVParms_DAFB_PALFF-_D32BVParms_DAFB_PALFF
0429A   0000 0E20              					Dc.l	DAFBPALOffset
0429E   0D00                   					Dc.w	DAFB_3328_RB
042A0   0000 0000 0240         					Dc.w	defmBounds_TPALFF,defmBounds_LPALFF,defmBounds_BPALFF,defmBounds_RPALFF
042A8   0000                   					Dc.w	defVersion
042AA   0000                   					Dc.w	0									; packType not used
042AC   0000 0000              					Dc.l	0									; packSize not used
042B0   0048 0000              					Dc.l	HResPAL
042B4   0048 0000              					Dc.l	VResPAL
042B8   0010                   					Dc.w	ChunkyDirect
042BA   0020                   					Dc.w	32
042BC   0003                   					Dc.w	3
042BE   0008                   					Dc.w	8
042C0   0000 0000              					Dc.l	defmPlaneBytes
042C4                          	_EndD32BVParms_DAFB_PALFF
042C4
042C4                          	;-------------------------------------------------------------
042C4                          	;				Primary Init
042C4                          	;-------------------------------------------------------------
042C4                          	;
042C4
042C4                          	_sPInitRec
042C4   0000 08E0              					Dc.l	_EndsPInitRec-_sPInitRec
042C8                          					Include	'PrimaryInit.a'
042C8                          	;
042C8                          	;	File:		PrimaryInit.a
042C8                          	;
042C8                          	;	Contains:	The PrimaryInit code for the DAFB Õ040 PDS Display Card.
042C8                          	;
042C8                          	;	Written by: Mike Puckett, July 8, 1991.
042C8                          	;
042C8                          	;	Copyright:	© 1991 by Apple Computer, Inc., all rights reserved.
042C8                          	;
042C8                          	;	Change History (most recent first):
042C8                          	;
042C8                          	;		 <5>	11/11/91	jmp		Started defaulting to 8bpp where applicable.
042C8                          	;		 <4>	11/06/91	jmp		Added support for 19Ó displays.
042C8                          	;		 <3>	09/17/91	jmp		For mono-only devices, no longer drive the red & green channels
042C8                          	;									when graying the screen.  Also, added Òextended no-connectÓ
042C8                          	;									support.
042C8                          	;		 <2>	09/17/91	jmp		Added code to more intelligently handle PageMode.
042C8                          	;		 <1>	09/17/91	jmp		first checked in
042C8
042C8                          	;-------------------------------------------------------------
042C8                          	;				Header Block
042C8                          	;-------------------------------------------------------------
042C8                          	;
042C8   02                     					Dc.b	sExec2							; Code type.
042C9   02                     					Dc.b	sCPU68020						; CPU type.
042CA   00                     					Dc.b	0								; Reserved.
042CC   0000 0004              					Dc.l	DAFBInit-*						; Offset to code.
042D0
042D0                          	;-------------------------------------------------------------
042D0                          	;				Useful Info
042D0                          	;-------------------------------------------------------------
042D0                          	;
042D0
00000                          	LocalFrame		Record	{A6Link},Decrement
FFFFC                          	Return			Ds.l	1								; Return address.
FFFF8                          	A6Link			Ds.l	1								; Saved A6.
FFFC0                          	spBlk			Ds.b	SpBlock							; SpBlock.
FFFB8                          	sPRAMBlk		Ds.b	SizesPRAMRec					; SpRAMRec.
FFFB7                          	saveMMUMode		Ds.b	1								; Save entering MMU mode.
FFFB6                          	monID			Ds.b	1								; ID of sensed display.
FFFB5                          	spFlags			Ds.b	1								; Copy of Slot pRam flags.
FFFB4                          	isSlowClock		Ds.b	1								; Always set to false here, for compatibility.
FFFB0                          	vidParamsPtr	Ds.l	1								; Pointer to vidParams.
FFFB0   FFB0                   	LocalSize		Equ		*
FFFB0                          					Endr
042D0
00000                          	MiniGamma		Record	0								; Entries for mini gamma table used in DAFBInit.
00000                          	blackRed		Ds.b	1								; Red
00001                          	whiteRed		Ds.b	1								;
00002                          	blackGreen		Ds.b	1								; Green
00003                          	whiteGreen		Ds.b	1								;
00004                          	blackBlue		Ds.b	1								; Blue
00005                          	whiteBlue		Ds.b	1								;
00006                          					Ds.b	2								; <pad>
00008   0008                   	GT_Size			Equ		*
00008                          					Endr
042D0
042D0   0000 0008              	DT_Size			Equ		$08								; Size (in bytes) of entries in DAFB table.
042D0   0000 0002              	MT_Size			Equ		$02								; Size (in bytes) of entries in Mode table.
042D0
042D0                          	;-------------------------------------------------------------
042D0                          	;				Code Block
042D0                          	;-------------------------------------------------------------
042D0                          	;
042D0
042D0                          					With	seBlock,spBlock,LocalFrame
042D0
042D0                          	DAFBInit
042D0
042D0   4E56 FFB8              					Link	A6,#LocalSize								; Allocate some space for locals.
042D4
042D4                          	;
042D4                          	; Set initial vendor status to good, otherwise SecondaryInit will not run.
042D4                          	;
042D4
042D4   317C 0001 0002         					Move.w	#seSuccess,seStatus(A0)						; VendorStatus <- good.
042DA
042DA                          	;
042DA                          	; Get DAFBBase into A3.
042DA                          	;
042DA
042DA   223C F000 0000         					Move.l		#$F0000000,D1							; D1 <- $F0000000.
042E0   1010                   					Move.b		seSlot(A0),D0							; D0 <- Slot number, s.
042E2   EFC1 0104              					Bfins		D0,D1{4:4}								; D1 <- $Fs000000.
042E6 G 2641                   					Move.l		D1,A3									; A3 <- $Fs000000.
042E8
042E8   D7FC 0080 0000         					Adda.l		#DAFBBase,A3							; A3 <- $Fs800000.
042EE
042EE                          	;
042EE                          	; Perform some generic initializations.
042EE                          	;
042EE
042EE   51EE FFBC              					Sf			isSlowClock(A6)							; Pretend weÕre at 33Mhz.
042F2
042F2   1D40 FFF9              					Move.b		D0,spBlk.spSlot(A6)						; Save our slot number.
042F6   422E FFFB              					Clr.b		spBlk.spExtDev(A6)						; No external devices.
042FA
042FA                          	;
042FA                          	; DAFBÕs registers and frame buffer are 32-bit addressed, so letÕs just go there
042FA                          	;	nowÉ
042FA                          	;
042FA   7001                   					Moveq		#true32b,D0								; Set up to switch into 32-bit mode.
042FC   A05D                   					_SwapMMUMode										; Do switch.
042FE   1D40 FFBF              					Move.b		D0,saveMMUMode(A6)						; Save previous mode.
04302
04302                          	;
04302                          	; Do a preliminary DAFB setup so that we can test vRAM and read the sense lines.
04302                          	;
04302
04302   43FA 0858       04B5C  					Lea			PrelimInit,A1							; Point to minimal vidParams.
04306
04306                          	; Do the hardware setupÉ
04306                          	;
04306
04306   7000                   					Moveq		#0,D0									; Clear upper part of D0.
04308 G 244B                   					Move.l		A3,A2									; Copy DAFB base address.
0430A
0430A                          	; Setup Clock chipÉ
0430A                          	;
0430A
0430A                          					DAFBSpeedPI	A3										; Configure DAFB for right CPU speed.
0430A   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
0430C G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
0430E   4A2E FFBC             1						Tst.b	IsSlowClock(A6)						; If CPU is running at 25MHz,
04312   6608            0431C 1						Bne.s	@EndDAFBSpeedPI						;	then leave alone.
04314   00A8 0000 0800        1						Ori.l	#dafb33MhzConfig,DAFB_Config(A0)	; Otherwise, setup for 33Mhz operation.
             0010 
0431C G 205F                  1	@EndDAFBSpeedPI		Move.l	(Sp)+,A0							; Restore A0.
0431E
0431E G 45EA 0300              					ADDA		#Clk_BaseOffset,A2						; Advance to Clock chip base.
04322   323C 000F              					MOVE.W		#Clk_ParmSize-1,D1						; Get the counter for clock registers.
04326   1019                   	@ClockLoop		MOVE.B		(A1)+,D0								; Get the parameter.
04328   2480                   					MOVE.L		D0,(A2)									; Write it.
0432A G 45EA 0010              					ADDA		#$10,A2									; Increment to next register,
0432E G 51C9 FFF6       04326  					DBRA		D1,@ClockLoop							; 	for each register.
04332
04332 G 5C89                   					Adda.l		#Misc_ParmSize,A1						; Skip past misc params.
04334
04334                          	; DAFB setup
04334                          	;¥¥¥
04334 G 244B                   					MOVE.L		A3,A2									; Copy the DAFB base again.
04336                          	;¥¥¥
04336   323C 0004              					MOVE.W		#DAFB_ParmSize-1,D1						; Get the counter for the DAFB parameters.
0433A   3019                   	@DAFBLoop		MOVE.W		(A1)+,D0								; Get the parameter.
0433C   24C0                   					MOVE.L		D0,(A2)+								; Write the parameter and increment.
0433E G 51C9 FFFA       0433A  					DBRA		D1,@DAFBLoop
04342
04342                          					DAFBSpeedPI	A3										; Configure DAFB for right CPU speed.
04342   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
04344 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
04346   4A2E FFBC             1						Tst.b	IsSlowClock(A6)						; If CPU is running at 25MHz,
0434A   6608            04354 1						Bne.s	@EndDAFBSpeedPI						;	then leave alone.
0434C   00A8 0000 0800        1						Ori.l	#dafb33MhzConfig,DAFB_Config(A0)	; Otherwise, setup for 33Mhz operation.
             0010 
04354 G 205F                  1	@EndDAFBSpeedPI		Move.l	(Sp)+,A0							; Restore A0.
04356
04356                          	; Swatch setup
04356                          	;¥¥¥
04356 G 244B                   					MOVE.L		A3,A2									; Copy the DAFB base again.
04358                          	;¥¥¥
04358 G 45EA 0100              					ADDA		#Swatch_BaseOffset,A2					; Advance to Swatch first register.
0435C   3019                   					MOVE.W		(A1)+,D0								; Get the first register.
0435E   2480                   					MOVE.L		D0,(A2)									; Write first register.
04360
04360 G 45EA 0024              					ADDA		#Swatch_BaseOffset1-Swatch_BaseOffset,A2 ; Advance to register set.
04364   323C 0011              					MOVE.W		#Swatch_ParmSize1-1,D1					; Get the counter for Swatch setup.
04368   3019                   	@SwatchLoop		MOVE.W		(A1)+,D0								; Get the Swatch parameter.
0436A   24C0                   					MOVE.L		D0,(A2)+								; Set up Swatch.
0436C G 51C9 FFFA       04368  					DBRA		D1,@SwatchLoop							; Do them all.
04370
04370                          	; ACDC configuration setup
04370                          	;¥¥¥
04370 G 244B                   					MOVE.L		A3,A2									; Copy the DAFB base again.
04372                          	;¥¥¥
04372   42AB 0200              					Clr.l		ACDC_AddrReg(A3)						; Tell ACDC to use PCBR0.
04376 G 45EA 0220              					Adda		#ACDC_ConfigReg,A2						; Advance to ACDC config register.
0437A   3019                   					Move.w		(A1)+,D0								; Get the parameter.
0437C   2480                   					Move.l		D0,(A2)									; Write it.
0437E   4AAB 0200              					Tst.l		ACDC_AddrReg(A3)						; Read the addr reg to make it stick (AC842A).
04382
04382                          	; Everything's configured, so do the DAFB reset sequence			;
04382
04382                          					DAFBReset	A3										; Reset and
04382   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
04386 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
04388   2028 0120             1						Move.l	DAFBFlags(A0),D0					; Get the DAFBFlags.
0438C   08C0 000B             1						Bset	#videoEnabled,D0					; Set the video-is-enabled bit.
04390   2140 0120             1						Move.l	D0,DAFBFlags(A0)					; Write it out.
04394 G D0FC 0020             1						Adda.l	#DAFB_Reset,A0						; Add in offset to reset reg.
04398   20BC 0000 0003        1						Move.l	#dafbReleaseSwatch,(A0)				; Release swatch from reset.
0439E                         1						DAFBResetDelay &dafbBase					; Wait.
0439E   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
043A2 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
043A4 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
043A8   7003                  2						Moveq	#3,D0								; Set up loop counter.
043AA   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
043AC G 51C8 FFFC       043AA 2						Dbra	D0,@DelayLoop						;	and loop until done.
043B0   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
043B4   20BC 0000 0007        1						Move.l	#dafbReassertSwatch,(A0)			; Reset Swatch again.
043BA                         1						DAFBResetDelay &dafbBase					; Wait.
043BA   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
043BE G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
043C0 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
043C4   7003                  2						Moveq	#3,D0								; Set up loop counter.
043C6   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
043C8 G 51C8 FFFC       043C6 2						Dbra	D0,@DelayLoop						;	and loop until done.
043CC   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
043D0   20BC 0000 0003        1						Move.l	#dafbReleaseSwatch,(A0)				; Release swatch from reset.
043D6                         1						DAFBResetDelay &dafbBase					; Wait.
043D6   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
043DA G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
043DC G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
043E0   7003                  2						Moveq	#3,D0								; Set up loop counter.
043E2   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
043E4 G 51C8 FFFC       043E2 2						Dbra	D0,@DelayLoop						;	and loop until done.
043E8   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
043EC   20BC 0000 0002        1						Move.l	#dafbReleaseVRamSM,(A0)				; Reset VRam state machine.
043F2                         1						DAFBResetDelay &dafbBase					; Wait.
043F2   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
043F6 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
043F8 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
043FC   7003                  2						Moveq	#3,D0								; Set up loop counter.
043FE   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
04400 G 51C8 FFFC       043FE 2						Dbra	D0,@DelayLoop						;	and loop until done.
04404   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04408 G 4290                  1						Move.l	#dafbReleaseVideoSM,(A0)			; Reset Video refresh state machine.
0440A                         1						DAFBResetDelay &dafbBase					; Wait.
0440A   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
0440E G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
04410 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
04414   7003                  2						Moveq	#3,D0								; Set up loop counter.
04416   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
04418 G 51C8 FFFC       04416 2						Dbra	D0,@DelayLoop						;	and loop until done.
0441C   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04420   4CDF 0101             1						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04424                          					DAFBIdle	A3										;	idle DAFB.
04424   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
04428 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
0442A   2028 0120             1						Move.l	DAFBFlags(A0),D0					; Get the DAFBFlags.
0442E   0880 000B             1						Bclr	#videoEnabled,D0					; Reset the video-is-enabled bit.
04432   2140 0120             1						Move.l	D0,DAFBFlags(A0)					; Write it out.
04436   42A8 000C             1						Clr.l	DAFB_ClkCfg(A0)						; Shut off ACDC clock.
0443A   42A8 0010             1						Clr.l	DAFB_Config(A0)						; Shut off ACDC refresh.
0443E   217C 0000 0001        1						Move.l	#dafbDisableSwatch,Swatch_Mode(A0)	; Shut off Swatch.
             0100 
04446   42A8 0200             1						Clr.l	ACDC_AddrReg(A0)					; Tell ACDC to use PCBR0.
0444A   217C 0000 0006        1						Move.l	#6,ACDC_ConfigReg(A0)				; Put ACDC in indirect mode.
             0220 
04452   217C 0000 0001        1						Move.l	#1,ACDC_AddrReg(A0)					; Tell ACDC to use PCBR1.
             0200 
0445A   42A8 0220             1						Clr.l	ACDC_ConfigReg(A0)					; Put PCBR1 in compatible mode.
0445E   42A8 0200             1						Clr.l	ACDC_AddrReg(A0)					; Use PCBR0 again.
04462   42A8 0220             1						Clr.l	ACDC_ConfigReg(A0)					; Reset it.
04466   4CDF 0101             1						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
0446A
0446A                          	; Kill slot interrupts on DAFB.
0446A
0446A   42AB 0104              					CLR.L		Swatch_IntMsk(A3)						; Turn off all interrupts.
0446E
0446E                          	; Determine the frame buffer size.  For the DAFB Õ040 PDS Display Card, we support
0446E                          	;	two configurations:  1 & 2 Megs of vRam.  Prototype versions of the card
0446E                          	;	always have 2 Megs of vRam on them, though.
0446E                          	;
0446E
0446E G 204B                   					Move.l		A3,A0									; Get DAFBBase into A0.
04470   D1FC FF80 0000         					Adda.l		#FrameBase,A0							; Get the framebuffer base.
04476
04476   21BC 324D 4547         					MOVE.L		#'2MEG',(k2MvRAM-DAFBStdOffset-4,A0)	; Write a test value into alleged RAM.
             8170 001F
             EFFC 
04482   21BC 316D 6567         					MOVE.L		#'1meg',(k1MvRAM-DAFBStdOffset-4,A0)	; Write a different value at this point.
             8170 000F
             EFFC 
0448E
0448E   7401                   					Moveq		#1,D2									; Assume there is only 1Meg of vRam.
04490 G 0CB0 324D 4547         					Cmp.l		#'2MEG',(k2MvRAM-DAFBStdOffset-4,A0)	; If the 2 MB flag didnÕt stick,
             8170 001F
             EFFC 
0449C   6602            044A0  					Bne.s		@EndSize								;	then only 1 MB is possible.
0449E   5342                   					Subq		#1,D2									; Otherwise, 2 MBs exist.
044A0
044A0   202B 0120              	@EndSize		Move.l		DAFBFlags(A3),D0						; Get the DAFBFlags.
044A4   EFC0 2542              					Bfins		D2,D0{vRamBits,numVRamBits}				; Set the amount of vRam.
044A8   2740 0120              					Move.l		D0,DAFBFlags(A3)						; Write it back out.
044AC
044AC                          	; Read the monitor type into D4.
044AC
044AC   4244                   					Clr.w		D4										; Clear senseline register (.w for table below).
044AE                          					DAFBReadSenseLines A3,D4							; Read Õem!
044AE                         1						DAFBResetDelay &dafbBase					; Wait.
044AE   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
044B2 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
044B4 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
044B8   7003                  2						Moveq	#3,D0								; Set up loop counter.
044BA   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
044BC G 51C8 FFFC       044BA 2						Dbra	D0,@DelayLoop						;	and loop until done.
044C0   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
044C4   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
044C6   42A7                  1						Clr.l	-(Sp)								; Senseline scratch on stack.
044C8 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
044CA   2EA8 001C             1						Move.l	DAFB_Sense(A0),(Sp)					; Read the sense lines.
044CE   462F 0003             1						Not.b	3(Sp)								; Invert the lines and
044D2   022F 0007 0003        1						Andi.b	#7,3(Sp)							; 	 extract lo 3-bits.
044D8   182F 0003             1						Move.b	3(Sp),D4					; Return them to caller.
044DC                         1						DAFBResetSenseLines A0						; Reset the sense lines.
044DC   2F08                  2						Move.l	A0,-(Sp)							; Save A0.
044DE G 2048                  2						Move.l	A0,A0						; Get DAFBBase into A0.
044E0   217C 0000 0007        2						Move.l	#tristateDAFBSense,DAFB_SENSE(A0)	; Tristate DAFB sense lines.
             001C 
044E8                         2						DAFBResetDelay &dafbBase					; Wait.
044E8   48E7 8080             3						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
044EC G 2048                  3						Move.l	A0,A0						; Get DAFBBase into A0.
044EE G D0FC 002C             3						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
044F2   7003                  3						Moveq	#3,D0								; Set up loop counter.
044F4   4A90                  3	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
044F6 G 51C8 FFFC       044F4 3						Dbra	D0,@DelayLoop						;	and loop until done.
044FA   4CDF 0101             3						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
044FE G 205F                  2						Move.l	(Sp)+,A0							; Restore A0.
04500   4A9F                  1						Tst.l	(Sp)+								; Restore stack.
04502 G 205F                  1						Move.l	(Sp)+,A0							; Restore A0.
04504
04504 G 0C04 0007              					CMP.B		#doExtendedSense,D4						; If we already recognize the display,
04508   6600 01C6       046D0  					BNE			@EndSense								;	then continue.
0450C
0450C                          	;  Do Extended Sense since Òno connectÓ was detected.
0450C                          	;
0450C                          	; 		(The idea behind the extended-sense-line algorithm is as follows:  First, drive sense line
0450C                          	;		 read the values of ÒbÓ and Òc.Ó  Next, drive sense line ÒbÓ and read the values of ÒaÓ and
0450C                          	;		 Finally, drive sense line ÒcÓ and read the values of ÒaÓ and Òb.Ó  In this way, a six-bit
0450C                          	;		 number of the form bc/ac/ab is generated.)
0450C
0450C   4204                   					Clr.b		D4										; Clear Òno connectÓ signal from D4.
0450E   4200                   					Clr.b		D0										; Use D0 as temp from reads.
04510
04510                          	; Drive a, Read bc
04510                          	;
04510   277C 0000 0003         					Move.l		#dafbAMask,DAFB_Sense(A3)				; abc <- 011
             001C 
04518                          					DAFBReadSenseLines A3,D0							; abc -> ABC
04518                         1						DAFBResetDelay &dafbBase					; Wait.
04518   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
0451C G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
0451E G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
04522   7003                  2						Moveq	#3,D0								; Set up loop counter.
04524   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
04526 G 51C8 FFFC       04524 2						Dbra	D0,@DelayLoop						;	and loop until done.
0452A   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
0452E   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
04530   42A7                  1						Clr.l	-(Sp)								; Senseline scratch on stack.
04532 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
04534   2EA8 001C             1						Move.l	DAFB_Sense(A0),(Sp)					; Read the sense lines.
04538   462F 0003             1						Not.b	3(Sp)								; Invert the lines and
0453C   022F 0007 0003        1						Andi.b	#7,3(Sp)							; 	 extract lo 3-bits.
04542   102F 0003             1						Move.b	3(Sp),D0					; Return them to caller.
04546                         1						DAFBResetSenseLines A0						; Reset the sense lines.
04546   2F08                  2						Move.l	A0,-(Sp)							; Save A0.
04548 G 2048                  2						Move.l	A0,A0						; Get DAFBBase into A0.
0454A   217C 0000 0007        2						Move.l	#tristateDAFBSense,DAFB_SENSE(A0)	; Tristate DAFB sense lines.
             001C 
04552                         2						DAFBResetDelay &dafbBase					; Wait.
04552   48E7 8080             3						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
04556 G 2048                  3						Move.l	A0,A0						; Get DAFBBase into A0.
04558 G D0FC 002C             3						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
0455C   7003                  3						Moveq	#3,D0								; Set up loop counter.
0455E   4A90                  3	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
04560 G 51C8 FFFC       0455E 3						Dbra	D0,@DelayLoop						;	and loop until done.
04564   4CDF 0101             3						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04568 G 205F                  2						Move.l	(Sp)+,A0							; Restore A0.
0456A   4A9F                  1						Tst.l	(Sp)+								; Restore stack.
0456C G 205F                  1						Move.l	(Sp)+,A0							; Restore A0.
0456E   0200 0003              					Andi.b		#dafbAMask,D0							; 0BC
04572
04572   1800                   					Move.b		D0,D4									; 00 00 BC
04574   E50C                   					Lsl.b		#2,D4									; 00 BC 00
04576
04576                          	; Drive b, Read ac
04576                          	;
04576   277C 0000 0005         					Move.l		#dafbBMask,DAFB_Sense(A3)				; abc <- 101
             001C 
0457E                          					DAFBReadSenseLines A3,D0							; abc -> ABC
0457E                         1						DAFBResetDelay &dafbBase					; Wait.
0457E   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
04582 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
04584 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
04588   7003                  2						Moveq	#3,D0								; Set up loop counter.
0458A   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
0458C G 51C8 FFFC       0458A 2						Dbra	D0,@DelayLoop						;	and loop until done.
04590   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04594   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
04596   42A7                  1						Clr.l	-(Sp)								; Senseline scratch on stack.
04598 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
0459A   2EA8 001C             1						Move.l	DAFB_Sense(A0),(Sp)					; Read the sense lines.
0459E   462F 0003             1						Not.b	3(Sp)								; Invert the lines and
045A2   022F 0007 0003        1						Andi.b	#7,3(Sp)							; 	 extract lo 3-bits.
045A8   102F 0003             1						Move.b	3(Sp),D0					; Return them to caller.
045AC                         1						DAFBResetSenseLines A0						; Reset the sense lines.
045AC   2F08                  2						Move.l	A0,-(Sp)							; Save A0.
045AE G 2048                  2						Move.l	A0,A0						; Get DAFBBase into A0.
045B0   217C 0000 0007        2						Move.l	#tristateDAFBSense,DAFB_SENSE(A0)	; Tristate DAFB sense lines.
             001C 
045B8                         2						DAFBResetDelay &dafbBase					; Wait.
045B8   48E7 8080             3						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
045BC G 2048                  3						Move.l	A0,A0						; Get DAFBBase into A0.
045BE G D0FC 002C             3						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
045C2   7003                  3						Moveq	#3,D0								; Set up loop counter.
045C4   4A90                  3	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
045C6 G 51C8 FFFC       045C4 3						Dbra	D0,@DelayLoop						;	and loop until done.
045CA   4CDF 0101             3						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
045CE G 205F                  2						Move.l	(Sp)+,A0							; Restore A0.
045D0   4A9F                  1						Tst.l	(Sp)+								; Restore stack.
045D2 G 205F                  1						Move.l	(Sp)+,A0							; Restore A0.
045D4   0200 0005              					Andi.b		#dafbBMask,D0							; A0C
045D8
045D8   0880 0002              					Bclr		#dafbSenseLineA,D0						; A0C becomes
045DC   6704            045E2  					Beq.s		@OrIn									;  A0C or
045DE   08C0 0001              					Bset		#dafbSenseLineB,D0						;  A1C
045E2
045E2   8800                   	@OrIn			Or.b		D0,D4									; 00 BC AC
045E4   E50C                   					Lsl.b		#2,D4									; BC AC 00
045E6
045E6                          	; Drive c, Read ab
045E6                          	;
045E6   277C 0000 0006         					Move.l		#dafbCMask,DAFB_Sense(A3)				; abc -> 110
             001C 
045EE                          					DAFBReadSenseLines A3,D0							; abc <- ABC
045EE                         1						DAFBResetDelay &dafbBase					; Wait.
045EE   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
045F2 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
045F4 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
045F8   7003                  2						Moveq	#3,D0								; Set up loop counter.
045FA   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
045FC G 51C8 FFFC       045FA 2						Dbra	D0,@DelayLoop						;	and loop until done.
04600   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04604   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
04606   42A7                  1						Clr.l	-(Sp)								; Senseline scratch on stack.
04608 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
0460A   2EA8 001C             1						Move.l	DAFB_Sense(A0),(Sp)					; Read the sense lines.
0460E   462F 0003             1						Not.b	3(Sp)								; Invert the lines and
04612   022F 0007 0003        1						Andi.b	#7,3(Sp)							; 	 extract lo 3-bits.
04618   102F 0003             1						Move.b	3(Sp),D0					; Return them to caller.
0461C                         1						DAFBResetSenseLines A0						; Reset the sense lines.
0461C   2F08                  2						Move.l	A0,-(Sp)							; Save A0.
0461E G 2048                  2						Move.l	A0,A0						; Get DAFBBase into A0.
04620   217C 0000 0007        2						Move.l	#tristateDAFBSense,DAFB_SENSE(A0)	; Tristate DAFB sense lines.
             001C 
04628                         2						DAFBResetDelay &dafbBase					; Wait.
04628   48E7 8080             3						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
0462C G 2048                  3						Move.l	A0,A0						; Get DAFBBase into A0.
0462E G D0FC 002C             3						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
04632   7003                  3						Moveq	#3,D0								; Set up loop counter.
04634   4A90                  3	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
04636 G 51C8 FFFC       04634 3						Dbra	D0,@DelayLoop						;	and loop until done.
0463A   4CDF 0101             3						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
0463E G 205F                  2						Move.l	(Sp)+,A0							; Restore A0.
04640   4A9F                  1						Tst.l	(Sp)+								; Restore stack.
04642 G 205F                  1						Move.l	(Sp)+,A0							; Restore A0.
04644   0200 0006              					Andi.b		#dafbCMask,D0							; AB0
04648   E208                   					Lsr.b		#1,D0									; 0AB
0464A
0464A   8800                   					Or.b		D0,D4									; BC AC AB
0464C
0464C                          	; Now, see if what we got back anything we recognizeÉ
0464C                          	;
0464C G 0C04 003F              					Cmp.b		#extendedNoConnect,D4					; If there really is nothing connected,
04650   6748            0469A  					Beq.s		@NoConnect								;	then say so.
04652
04652 G 0C04 0017              					Cmp.b		#extendedSenseVGA,D4					; Otherwise, is it a VGA display?
04656   6606            0465E  					Bne.s		@TryPal									; Nope, try PAL.
04658   183C 0008              					Move.b		#indexedSenseVGA,D4
0465C   6072            046D0  					Bra.s		@EndSense
0465E
0465E G 0C04 0030              	@TryPal			Cmp.b		#extendedSensePAL,D4					; Is it a PAL display?
04662   6606            0466A  					Bne.s		@TryPALBox								; Nope, try PAL encoder box.
04664   183C 0009              					Move.b		#indexedSensePAL,D4
04668   6066            046D0  					Bra.s		@EndSense
0466A
0466A G 0C04 0000              	@TryPALBox		Cmp.b		#extendedSensePALBox,D4					; Is it a PAL encoder box?
0466E   6606            04676  					Bne.s		@TryNTSC								; Nope, try NTSC encoder box.
04670   183C 0009              					Move.b		#indexedSensePAL,D4
04674   605A            046D0  					Bra.s		@EndSense
04676
04676 G 0C04 0014              	@TryNTSC		Cmp.b		#extendedSenseNTSC,D4					; Is it an NTSC encoder box?
0467A   6606            04682  					Bne.s		@TryGF									; Nope, try GoldFish.
0467C   183C 0004              					Move.b		#indexedSenseNTSC,D4
04680   604E            046D0  					Bra.s		@EndSense
04682
04682 G 0C04 002D              	@TryGF			Cmp.b		#extendedSenseGF,D4						; Is it a GoldFish?
04686   6606            0468E  					Bne.s		@Try19									; Nope, try 19.
04688   183C 000A              					Move.b		#indexedSenseGF,D4
0468C   6042            046D0  					Bra.s		@EndSense
0468E
0468E G 0C04 003A              	@Try19			Cmp.b		#extendedSense19,D4						; Is it a 19Ó?
04692   6606            0469A  					Bne.s		@NoConnect								; Nope, so we donÕt recognize it.
04694   183C 000B              					Move.b		#indexedSense19,D4
04698   6036            046D0  					Bra.s		@EndSense
0469A
0469A                          	; If we donÕt recognize the no-connect code, then we set up to delete all the video
0469A                          	;	data structures and to turn DAFB off.
0469A
0469A                          					With		SP_Params
0469A
0469A                          	@NoConnect
0469A   41EE FFC8              					LEA			spBlk(A6),A0							; Point to spBlock.
0469E   45EE FFC0              					LEA			sPRAMBlk(A6),A2							; Point to sPRAM block.
046A2   208A                   					MOVE.L		A2,spResult(A0)							;
046A4                          					_sReadPRAMRec										; Read our slotÕs pRAM (spSlot set up above).
046A4   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
046A6   A06E                  1	  				_SlotManager
046A8
046A8   102A 0007              					Move.b		SP_NoConnect(A2),D0						; Get the no-connect pRam byte.
046AC   0200 0040              					Andi.b		#spNCValidMask,D0						; If it is valid,
046B0   6602            046B4  					Bne.s		@DoMonID								;	just pretend the monID monitor is attached.
046B2   600A            046BE  					Bra.s		@NoMon									; Otherwise, set up to shut things down.
046B4
046B4   182A 0007              	@DoMonID		Move.b		SP_NoConnect(A2),D4						; Get the no-connect pRam byte.
046B8   0204 003F              					Andi.b		#spNoConnectMask,D4						; Strip the validation code.
046BC   6012            046D0  					Bra.s		@EndSense
046BE
046BE   7E00                   	@NoMon			Moveq		#0,D7									; No family modes.
046C0   1A3C 00FE              					Move.b		#sRsrc_NeverMatch,D5					; Set the magic number for no active video.
046C4   183C 0007              					Move.b		#indexedNoConnect,D4					; Make the no-connect code indexed.
046C8   1D7C 0007 FFBE         					Move.b		#indexedNoConnect,monID(A6)				; Save it for pRAM.
046CE   6018            046E8  					Bra.s		@GetConfig								; And continue.
046D0
046D0                          					EndWith
046D0
046D0   1D44 FFBE              	@EndSense		Move.b		D4,monID(A6)							; Save the indexed monID so that we can put it
046D4                          																		;	into pRam later.
046D4
046D4                          	;
046D4                          	; Figure out what the favored configuration is.  After this routine, the favored spID is in D5
046D4                          	;	D7 contains the video mode family alternatives concatenated together (no configuration ever
046D4                          	;	has more than four family members).  In a little while, we'll have the current selected mode
046D4                          	;	D5 from pRAM.  It would be nice to be able to use a RECORD structure here for the DAFBTable
046D4                          	;	but it wouldn't allow us to index into the two mode entries, so we just fake it.
046D4                          	;
046D4                          	;	D6 maintains the indexed sense id.
046D4                          	;
046D4   41FA 03AE       04A84  					LEA			DAFBTable,A0							; Point to DAFB configuration table.
046D8   41F0 4600              					LEA			(A0,D4*DT_Size),A0						; Point to the entry set for this display.
046DC   2E28 0000              					MOVE.L		DT_Family(A0),D7						; Get the family alternatives.
046E0   1A30 2005              					MOVE.B		DT_Mode(A0,D2),D5						; Get the default spID.
046E4
046E4   7C00                   					Moveq		#0,D6									; Clear for safety.
046E6   1C04                   					Move.b		D4,D6									; Save indexed sense ID.
046E8
046E8                          	;
046E8                          	; Read the old configuration from slot pRAM to confirm that it's OK.  Here's how we format the
046E8                          	;	for DAFB: 0:1=boardID (as usual), 2=spID of depth (as set up by Monitors), 3=spID of last us
046E8                          	;	configuration, 4=spID of default configuration for this mode
046E8                          	;
046E8                          					With		SP_Params
046E8
046E8                          	@GetConfig
046E8
046E8   41EE FFC8              					LEA			spBlk(A6),A0							; Point to spBlock.
046EC   45EE FFC0              					LEA			sPRAMBlk(A6),A2							; Point to sPRAM block.
046F0   208A                   					MOVE.L		A2,spResult(A0)							;
046F2                          					_sReadPRAMRec										; Read slot zero's pRAM (spSlot set up above).
046F2   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
046F4   A06E                  1	  				_SlotManager
046F6
046F6   156E FFBE 0005         					Move.b		monID(A6),SP_MonID(A2)					; Set up to write out sensed monID.
046FC   1D6A 0006 FFBD         					Move.b		SP_Flags(A2),spFlags(A6)				; Make a local copy of the flags.
04702
04702                          	; If the last configuration matches, then D5 will be OK.  The actual mode (depth) may be diffe
04702                          	;	(and only if) the last configuration matches.  Note:  We do this so that the ÒWelcome to Mac
04702                          	;	looks right when switching from different configuration within the same family.
04702                          	;
04702                          	; Known problem:  If someone calls SetDefaultMode and writes junk to it, then SP_LastConfig
04702                          	;	probably wonÕt be correct for SP_DfltConfig.  As such, I should either cross-check the SP_La
04702                          	;	value here (which would be better since pRam can be written to in all sorts of ways), or be
04702                          	;	more rigid in the driver.
04702                          	;
04702
04702                          	@CheckConfig
04702   BA2A 0004              					CMP.B		SP_DfltConfig(A2),D5					; Compare to the default configuration.
04706   6738            04740  					Beq.s		@WritePRam								; If same, just update monID.
04708
04708                          	; Configuration has changed, so set up pRAM for next time.  Note:  We ALWAYS write out pRam be
04708                          	;	the monID might have changed even though spID might not have.  A good example of this
04708                          	;	is a NTSC or PAL encoder/decoder box vs. an NTSC or PAL display.
04708                          	;
04708
04708   1545 0004              					MOVE.B		D5,SP_DfltConfig(A2)					; Set identification configuration.
0470C   1545 0003              					MOVE.B		D5,SP_LastConfig(A2)					; Make this the current config as well.
04710
04710   41FA 0432       04B44  					Lea			ModeTable,A0							; Point to the table of modes.
04714   41F0 6200              					Lea			(A0,D6*MT_Size),A0						; Get offset to right entry per display.
04718   1570 2000 0002         					Move.b		(A0,D2),SP_Depth(A2)					; Write out the default mode per vRam.
0471E
0471E G 0C05 0084              					Cmp.b		#sRsrc_Vid_DAFB_GS,D5					; If weÕre on a Rubik,
04722   6702            04726  					Beq.s		@DisableSyncOnGreen						;	then disable sync-on-green.
04724   600E            04734  					Bra.s		@EnableSyncOnGreen						; Otherwise, enable sync-on-green.
04726
04726                          	@DisableSyncOnGreen
04726   08AA 0000 0006         					Bclr		#spSyncOnGreen,SP_Flags(A2)				; Clear the sync-on-green flag (to disable).
0472C   08AE 0000 FFBD         					Bclr		#spSyncOnGreen,spFlags(A6)				; Local copy, too.
04732   600C            04740  					Bra.s		@WritePRam
04734
04734                          	@EnableSyncOnGreen
04734   08EA 0000 0006         					Bset		#spSyncOnGreen,SP_Flags(A2)				; Set the sync-on-green flag (to enable).
0473A   08EE 0000 FFBD         					Bset		#spSyncOnGreen,spFlags(A6)				; Local copy, too.
04740
04740                          	@WritePRam
04740   41EE FFC8              					LEA			spBlk(A6),A0							; Point back to spBlock.
04744   214A 0004              					MOVE.L		A2,spsPointer(A0)						; Set up parameter block.
04748                          					_sPutPRAMRec										; Write the new record out
04748   7012                  1	  				MOVEQ   	#sPutPRAMRec,D0
0474A   A06E                  1	  				_SlotManager
0474C
0474C                          	;
0474C                          	; Prune the video sResources.
0474C                          	;
0474C
0474C                          	DAFBPruneVidSRsrcs
0474C
0474C   1A2A 0003              					MOVE.B		SP_LastConfig(A2),D5					; Get current mode in D5.
04750   4A87                   					TST.L		D7										; Are there family modes?
04752   670A            0475E  					BEQ.S		@NoFamilies								; If zero, then none.
04754
04754                          					EndWith
04754
04754                          	;
04754                          	; If there are family modes, adjust for memory size.  For interlaced displays, the family mode
04754                          	;	is constructed such that the high word holds the IDs for convolved modes.  Also, the low wor
04754                          	;	the full-function spIDs (rather than the reduced vRam versions).  For VGA, we use the family
04754                          	;	mode mechanism to swap between VGA and SuperVGA.
04754                          	;
04754   4A02                   					TST.B		D2										; If D2=0, then 2MB vRAM,
04756   6706            0475E  					BEQ.S		@NoFamilies								; 	so no need to adjust.
04758 G 0287 FFFF FEFE         					And.l		#$FFFFFEFE,D7							; Otherwise, keep convolved and convert 'b' to 'a'.
0475E
0475E   43FA 0304       04A64  	@NoFamilies		LEA			ModeList,A1								; Point to all the video modes.
04762   3219                   					MOVE.W		(A1)+,D1								; Get count of modes.
04764
04764   1159 0032              	@BeginLoop		MOVE.B		(A1)+,spID(A0)							; Get a mode from the list and put in spBlock.
04768   BA28 0032              					CMP.B		spID(A0),D5								; Is this the current one (the keeper)?
0476C   6716            04784  					BEQ.S		@EndLoop								;
0476E
0476E   4A87                   					TST.L		D7										; Test for family modes.
04770   670E            04780  					BEQ.S		@SkipFamilies							;
04772
04772   7603                   					MOVEQ		#4-1,D3									; Test for four family mode matches.
04774                          	@LoopFamilies
04774   BE28 0032              					CMP.B		spID(A0),D7								; Is this a match?
04778   6710            0478A  					BEQ.S		@disableIt								; If it is, then disable rather than delete.
0477A   E19F                   					ROL.L		#8,D7									; Shift next value into low-byte.
0477C G 51CB FFF6       04774  					DBRA		D3,@LoopFamilies						; If it exits from the bottom, then delete this mode.
04780
04780                          	@SkipFamilies
04780                          	 				_sDeleteSRTRec										; Delete it.
04780   7031                  1	  				MOVEQ   	#sDeleteSRTRec,D0
04782   A06E                  1	  				_SlotManager
04784 G 51C9 FFDE       04764  	@EndLoop		DBRA		D1,@BeginLoop
04788   6012            0479C  					BRA.S		ChkDAFBVidActive						; Continue
0478A
0478A                          	@DisableIt
0478A   217C 0000 0001         					MOVE.L		#1,spParamData(A0)						; Setup to disable this mode.
             0018 
04792   42A8 0004              					CLR.L		spsPointer(A0)							; Not a RAM sRsrc.
04796                          					_SetsRsrcState										; Set it.
04796   7009                  1	  				MOVEQ   	#sSetSRsrcState,D0
04798   A06E                  1	  				_SlotManager
0479A   60E8            04784  					BRA.S		@EndLoop
0479C
0479C                          	;
0479C                          	; Now that everything is set up, we need to determine whether a known configuration is out the
0479C                          	;	If so, we continue with the normal PrimaryInit process.  Otherwise, we shut things down and
0479C                          	;	leave.
0479C                          	;
0479C
0479C                          	ChkDAFBVidActive
0479C
0479C G 0C05 00FE              					CMP.B		#sRsrc_NeverMatch,D5					; If a known display is connected, then
047A0   6604            047A6  					BNE.S		DAFBSetup								;	start the ball rolling.
047A2
047A2   6000 02B4       04A58  					BRA			DAFBExit								; Otherwise, just leave as DAFB is already
047A6                          																		;	idle.
047A6
047A6                          	;
047A6                          	; OK, we've done all the bookkeeping.  Now, load and set the DAFB parameters.
047A6                          	;
047A6
047A6                          	DAFBSetup
047A6
047A6   41EE FFC8              					LEA			spBlk(A6),A0							; Point back the spBlock on th stack.
047AA   117C 0001 0032         					MOVE.B		#sRsrcBoard,spID(A0)					; Find the board sRsrc.
047B0                          					_sRsrcInfo											;
047B0   7016                  1	  				MOVEQ   	#sRsrcInfo,D0
047B2   A06E                  1	  				_SlotManager
047B4
047B4   117C 007E 0032         					MOVE.B		#sVidParmDir,spID(A0)					; Look for the video parameters dir.
047BA                          					_sFindStruct										;
047BA   7006                  1	  				MOVEQ   	#sFindStruct,D0
047BC   A06E                  1	  				_SlotManager
047BE
047BE   1145 0032              					MOVE.B		D5,spID(A0)								; Look in the directory for this config's parameters.
047C2                          					_sGetBlock											;
047C2   7005                  1	  				MOVEQ   	#sGetBlock,D0
047C4   A06E                  1	  				_SlotManager
047C6
047C6 G 2250                   					MOVE.L		spResult(A0),A1							; Get pointer to it.  Use firstVidMode set of parameters.
047C8   2D49 FFB8              					Move.l		A1,vidParamsPtr(A6)						; Save for later disposal.
047CC
047CC                          	; Do the hardware setup.
047CC
047CC   7000                   					MOVEQ		#0,D0									; Clear the upper part of D0.
047CE G 244B                   					MOVE.L		A3,A2									; Copy DAFB base address.
047D0
047D0                          	; National Clock chip setup
047D0
047D0                          					DAFBSpeedPI	A3										; Configure DAFB for right CPU speed.
047D0   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
047D2 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
047D4   4A2E FFBC             1						Tst.b	IsSlowClock(A6)						; If CPU is running at 25MHz,
047D8   6608            047E2 1						Bne.s	@EndDAFBSpeedPI						;	then leave alone.
047DA   00A8 0000 0800        1						Ori.l	#dafb33MhzConfig,DAFB_Config(A0)	; Otherwise, setup for 33Mhz operation.
             0010 
047E2 G 205F                  1	@EndDAFBSpeedPI		Move.l	(Sp)+,A0							; Restore A0.
047E4
047E4 G 45EA 0300              					ADDA		#Clk_BaseOffset,A2						; Advance to Clock chip base.
047E8   323C 000F              					MOVE.W		#Clk_ParmSize-1,D1						; Get counter for Clock registers.
047EC   1019                   	@ClockLoop		MOVE.B		(A1)+,D0								; Get the parameter.
047EE   2480                   					MOVE.L		D0,(A2)									; Write it.
047F0 G 45EA 0010              					ADDA		#$10,A2									; Increment to next register,
047F4 G 51C9 FFF6       047EC  					DBRA		D1,@ClockLoop							; 	for each register.
047F8
047F8 G 5C89                   					Adda.l		#Misc_ParmSize,A1						; Skip past misc params.
047FA
047FA                          	; DAFB setup
047FA                          	;¥¥¥
047FA G 244B                   					MOVE.L		A3,A2									; Copy the DAFB base again.
047FC                          	;¥¥¥
047FC   323C 0004              					MOVE.W		#DAFB_ParmSize-1,D1						; Get counter for the DAFB parameters.
04800   3019                   	@DAFBLoop		MOVE.W		(A1)+,D0								; Get parameter.
04802   24C0                   					MOVE.L		D0,(A2)+								; Write it, and increment.
04804 G 51C9 FFFA       04800  					DBRA		D1,@DAFBLoop
04808
04808                          					DAFBSpeedPI	A3										; Configure DAFB for right CPU speed.
04808   2F08                  1						Move.l	A0,-(Sp)							; Save A0.
0480A G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
0480C   4A2E FFBC             1						Tst.b	IsSlowClock(A6)						; If CPU is running at 25MHz,
04810   6608            0481A 1						Bne.s	@EndDAFBSpeedPI						;	then leave alone.
04812   00A8 0000 0800        1						Ori.l	#dafb33MhzConfig,DAFB_Config(A0)	; Otherwise, setup for 33Mhz operation.
             0010 
0481A G 205F                  1	@EndDAFBSpeedPI		Move.l	(Sp)+,A0							; Restore A0.
0481C
0481C                          	; Swatch setup
0481C                          	;¥¥¥
0481C G 244B                   					MOVE.L		A3,A2									; Copy the DAFB base again.
0481E                          	;¥¥¥
0481E G 45EA 0100              					ADDA		#Swatch_BaseOffset,A2					; Advance to Swatch first register.
04822   3019                   					MOVE.W		(A1)+,D0								; Get the first register.
04824   2480                   					MOVE.L		D0,(A2)									; Write first register.
04826
04826 G 45EA 0024              					ADDA		#Swatch_BaseOffset1-Swatch_BaseOffset,A2	; Advance to register set.
0482A   323C 0011              					MOVE.W		#Swatch_ParmSize1-1,D1						; Get the counter for Swatch setup.
0482E   3019                   	@SwatchLoop		MOVE.W		(A1)+,D0									; Get the Swatch parameter.
04830   24C0                   					MOVE.L		D0,(A2)+									; Set up Swatch.
04832 G 51C9 FFFA       0482E  					DBRA		D1,@SwatchLoop								; All of them.
04836
04836                          	; ACDC configuration setup
04836                          	;¥¥¥
04836 G 244B                   					MOVE.L		A3,A2									; Copy the DAFB base again.
04838                          	;¥¥¥
04838   42AB 0200              					Clr.l		ACDC_AddrReg(A3)						; Tell ACDC to use PCBR0.
0483C G 45EA 0220              					Adda		#ACDC_ConfigReg,A2						; Advance to ACDC config register.
04840   3019                   					Move.w		(A1)+,D0								; Get the parameter.
04842   2480                   					Move.l		D0,(A2)									; Write it.
04844   4E71                   					Nop													; (DAFBÕs address space is non-serial.)
04846   4AAB 0200              					Tst.l		ACDC_AddrReg(A3)						; Read the addr reg to make it stick (AC842A).
0484A
0484A                          	; Sync On GreenÉ
0484A                          	;
0484A
0484A   202B 000C              					Move.l		DAFB_ClkCfg(A3),D0						; Get the current Clock config value.
0484E   082E 0000 FFBD         					Btst		#spSyncOnGreen,spFlags(A6)				; If weÕre supposed to put sync on green,
04854   6604            0485A  					Bne.s		@EnableSyncOnGreen						;	then hop to it.
04856   7200                   					Moveq		#0,D1									; Otherwise, set up for disabling.
04858   6002            0485C  					Bra.s		@SyncOnGreenCommon
0485A
0485A                          	@EnableSyncOnGreen
0485A   7201                   					Moveq		#1,D1									; Set up for enabling.
0485C
0485C                          	@SyncOnGreenCommon
0485C   EFC0 1581              					Bfins		D1,D0{dafbSyncOnGreen:1}				; Toggle the sync-on-green bit appropriately,
04860   2740 000C              					Move.l		D0,DAFB_ClkCfg(A3)						;	apply it.
04864
04864                          	; Page ModeÉ
04864                          	;
04864                          	@DoPageMode
04864   202B 0010              					Move.l		DAFB_Config(A3),D0						; Read the DAFBConfig register.
04868   E9C0 07C1              					Bfextu		D0{dafbWrdIntBit:1},D0					; If word-interleave is on,
0486C   660C            0487A  					Bne.s		@DisableIt								;	then ALWAYS disable page mode.
0486E   082E 0001 FFBD         					Btst		#spPageMode,spFlags(A6)					; If weÕre not supposed to enable page mode,
04874   670A            04880  					Beq.s		@DoReset								;	then just go on since the hardware comes that way.
04876   7001                   					Moveq		#1,D0									; Otherwise, set up to enable page mode,
04878   6002            0487C  					Bra.s		@HitPageMode							;	and do it.
0487A   7000                   	@DisableIt		Moveq		#0,D0									; Set up to disable page mode,
0487C   2740 0018              	@HitPageMode	Move.l		D0,DAFB_PgMdEn(A3)						; 	and do it.
04880
04880                          	; Everything's configured, so now reset DAFB
04880                          	;
04880                          	@DoReset
04880                          					DAFBReset	A3
04880   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
04884 G 204B                  1						Move.l	A3,A0						; Get DAFBBase into A0.
04886   2028 0120             1						Move.l	DAFBFlags(A0),D0					; Get the DAFBFlags.
0488A   08C0 000B             1						Bset	#videoEnabled,D0					; Set the video-is-enabled bit.
0488E   2140 0120             1						Move.l	D0,DAFBFlags(A0)					; Write it out.
04892 G D0FC 0020             1						Adda.l	#DAFB_Reset,A0						; Add in offset to reset reg.
04896   20BC 0000 0003        1						Move.l	#dafbReleaseSwatch,(A0)				; Release swatch from reset.
0489C                         1						DAFBResetDelay &dafbBase					; Wait.
0489C   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
048A0 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
048A2 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
048A6   7003                  2						Moveq	#3,D0								; Set up loop counter.
048A8   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
048AA G 51C8 FFFC       048A8 2						Dbra	D0,@DelayLoop						;	and loop until done.
048AE   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
048B2   20BC 0000 0007        1						Move.l	#dafbReassertSwatch,(A0)			; Reset Swatch again.
048B8                         1						DAFBResetDelay &dafbBase					; Wait.
048B8   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
048BC G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
048BE G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
048C2   7003                  2						Moveq	#3,D0								; Set up loop counter.
048C4   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
048C6 G 51C8 FFFC       048C4 2						Dbra	D0,@DelayLoop						;	and loop until done.
048CA   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
048CE   20BC 0000 0003        1						Move.l	#dafbReleaseSwatch,(A0)				; Release swatch from reset.
048D4                         1						DAFBResetDelay &dafbBase					; Wait.
048D4   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
048D8 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
048DA G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
048DE   7003                  2						Moveq	#3,D0								; Set up loop counter.
048E0   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
048E2 G 51C8 FFFC       048E0 2						Dbra	D0,@DelayLoop						;	and loop until done.
048E6   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
048EA   20BC 0000 0002        1						Move.l	#dafbReleaseVRamSM,(A0)				; Reset VRam state machine.
048F0                         1						DAFBResetDelay &dafbBase					; Wait.
048F0   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
048F4 G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
048F6 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
048FA   7003                  2						Moveq	#3,D0								; Set up loop counter.
048FC   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
048FE G 51C8 FFFC       048FC 2						Dbra	D0,@DelayLoop						;	and loop until done.
04902   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04906 G 4290                  1						Move.l	#dafbReleaseVideoSM,(A0)			; Reset Video refresh state machine.
04908                         1						DAFBResetDelay &dafbBase					; Wait.
04908   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
0490C G 204B                  2						Move.l	A3,A0						; Get DAFBBase into A0.
0490E G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
04912   7003                  2						Moveq	#3,D0								; Set up loop counter.
04914   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
04916 G 51C8 FFFC       04914 2						Dbra	D0,@DelayLoop						;	and loop until done.
0491A   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
0491E   4CDF 0101             1						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
04922
04922                          	; Do screen and CLUT setupÉ
04922                          	;
04922
04922 G 244B                   					Move.l		A3,A2									; Get DAFBBase into A2.
04924   D5FC FF80 0000         					Adda.l		#FrameBase,A2							; Offset to start of the framebuffer.
0492A
0492A G 206E FFB8              					Move.l		vidParamsPtr(A6),A0						; Get start of vidParams.
0492E G D0FC 0012              					Adda.l		#MiscBaseAddr,A0						; Skip over  MaxMode(a,b) params.
04932   D5D0                   					Adda.l		(A0),A2									; Get video base of framebuffer.
04934
04934                          	; Do top of screenÉ
04934                          	;
04934                          	;	Note that SC_BorderHeight is adjusted to work correctly for both bordered and non-bordered s
04934                          	;	Specifically, this constant is not Ò-1Ó-adjusted for Dbra, so we jump into the tail end of t
04934                          	;	loop and therefore have the ÒrightÓ thing happen.  My head hurts now, and yours should, too!
04934                          	;
04934                          	;	Note:  This routine only works for screens whose boundaries are even multiples of 64 (due to
04934                          	;		   use of Òdoublelongs).  Real PALST mode is 614x460, but we use 640x480 for for now.  This
04934                          	;		   keeps things fast.  If we have to add ÒrunsÓ to fix this problem, we will.
04934                          	;
04934                          	;	This code is used in the driverÕs GrayScreen (DAFBGrayScreen), as well.  Fixes should be app
04934                          	;	to both places.  WouldnÕt it be neat if there was some sort of video ÒtoolboxÓ for code that
04934                          	;	is shared among the drivers and primary inits?  Sure is easy to miss things when the
04934                          	;	same code is spread across multiple files.
04934                          	;
04934
04934                          					With		SC_Params
04934
04934   76FF                   					Moveq		#IndexedBlack,D3						; Get black into a convenient register.
04936
04936 G 0C05 0084              					Cmp.b		#sRsrc_Vid_DAFB_GS,D5					; If weÕre on a Rubik display, then
0493A   6718            04954  					Beq.s		@FixRubik1bpp							;	apply fix.
0493C
0493C G 0C05 008C              					Cmp.b		#sRsrc_Vid_DAFB_NTSCconvST,D5			; If weÕre on an NTSC convolved display,
04940   6718            0495A  					Beq.s		@FixNTSCPALTop							;	then apply fix.
04942 G 0C05 008E              					Cmp.b		#sRsrc_Vid_DAFB_NTSCconvFF,D5
04946   6712            0495A  					Beq.s		@FixNTSCPALTop
04948
04948 G 0C05 009E              					Cmp.b		#sRsrc_Vid_DAFB_PALconvST,D5			; If weÕre on a PAL convolved display,
0494C   670C            0495A  					Beq.s		@FixNTSCPALTop							;	then apply fix.
0494E G 0C05 00A0              					Cmp.b		#sRsrc_Vid_DAFB_PALconvFF,D5
04952   6016            0496A  					Bra.s		@ScreenStart
04954
04954   303C 0200              	@FixRubik1bpp	Move.w		#DAFB_512_RB,D0							; Fix first-line problem on Rubik displays.
04958   6004            0495E  					Bra.s		@FixRow
0495A
0495A   303C 0400              	@FixNTSCPALTop	Move.w		#DAFB_1024_RB,D0						; Create ÒfalseÓ first line on NTSC/PAL convolved
0495E                          																		;	displays.
0495E
0495E   94C0                   	@FixRow			Suba		D0,A2									; Point back one full line.
04960   E448                   					Lsr.w		#2,D0									; Make loop counter long-word based.
04962   5340                   					Subq		#1,D0									; Subtract 1 for Dbra.
04964   24C3                   	@BlastRow		Move.l		D3,(A2)+								; Blast black to screen.
04966 G 51C8 FFFC       04964  					Dbra		D0,@BlastRow
0496A
0496A   3229 0004              	@ScreenStart	Move.w		SC_BorderHeight(A1),D1					; Get number of rows (not -1) to blast back on
0496E   600E            0497E  					Bra.s		@TopSecPrime							;
04970
04970   3029 0006              	@TopSecFill_V	Move.w		SC_BorderWidth(A1),D0					; Get number of longs (-1) to blast black in r
04974   24C3                   	@TopSecFill_H	Move.l		D3,(A2)+								; Blast black to screen.
04976 G 51C8 FFFC       04974  					Dbra		D0,@TopSecFill_H
0497A
0497A   D4E9 000A              					Adda.w		SC_SkipFactor(A1),A2					; Skip to start of next row.
0497E G 51C9 FFF0       04970  	@TopSecPrime	Dbra		D1,@TopSecFill_V
04982
04982
04982                          	; Do middle of screenÉ
04982                          	;
04982                          	;	Unlike the top part, there is always a Òmiddle.Ó  However, there might be a left and right s
04982                          	;	border is appropriate), so the not Ò-1Ó-adjusted for Dbra comments that are listed above app
04982                          	;	here.
04982                          	;
04982   283C AAAA AAAA         					Move.l		#OneBitGray,D4							; Get the gray pattern (for the active middle).
04988   3211                   					Move.w		SC_ActiveHeight(A1),D1					; Get number of rows (-1) in middle of screen.
0498A
0498A                          	@MidSecFill_V
0498A   3029 0008              					Move.w		SC_BorderSide(A1),D0					; Get number of longs (not -1) to blast black in row.
0498E   6002            04992  					Bra.s		@MidSecPrime_L
04990   24C3                   	@MidSecFill_L	Move.l		D3,(A2)+								; Blast black to screen.
04992 G 51C8 FFFC       04990  	@MidSecPrime_L	Dbra		D0,@MidSecFill_L
04996
04996   3029 0002              					Move.w		SC_ActiveWidth(A1),D0					; Get the number of doublelongs (-1) for active middle
0499A   24C4                   	@MidActFill_H	Move.l		D4,(A2)+								; Fill the active section with gray.
0499C G 0C05 0096              					Cmp.b		#sRsrc_Vid_DAFB_SVGAa,D5				; Skip if SuperVGA (800x600 is not an
049A0   6708            049AA  					Beq.s		@SkipDouble								;	even multiple of 64, but it is an)
049A2 G 0C05 0097              					Cmp.b		#sRsrc_Vid_DAFB_SVGAb,D5				;	even multiple of 32).
049A6   6702            049AA  					Beq.s		@SkipDouble
049A8   24C4                   					Move.l		D4,(A2)+								; Do second half where applicable.
049AA G 51C8 FFEE       0499A  	@SkipDouble		Dbra		D0,@MidActFill_H
049AE   4684                   					Not.l		D4										; Invert for NEXT line.
049B0
049B0   3029 0008              					Move.w		SC_BorderSide(A1),D0					; Get number of longs (not -1) to blast black in row.
049B4   6002            049B8  					Bra.s		@MidSecPrime_R
049B6   24C3                   	@MidSecFill_R	Move.l		D3,(A2)+								; Blast black to screen
049B8 G 51C8 FFFC       049B6  	@MidSecPrime_R	Dbra		D0,@MidSecFill_R
049BC
049BC   D4E9 000A              					Adda.w		SC_SkipFactor(A1),A2					; Move to NEXT line.
049C0 G 51C9 FFC8       0498A  					Dbra		D1,@MidSecFill_V
049C4
049C4                          	; Do bottom of screenÉ
049C4                          	;
049C4   3229 0004              					Move.w		SC_BorderHeight(A1),D1					; Get number of rows (not -1) to blast back on bottom.
049C8
049C8 G 0C05 008C              					Cmp.b		#sRsrc_Vid_DAFB_NTSCconvST,D5			; If weÕre on an NTSC convolved display,
049CC   6712            049E0  					Beq.s		@FixNTSCPALBot							;	then apply fix.
049CE G 0C05 008E              					Cmp.b		#sRsrc_Vid_DAFB_NTSCconvFF,D5
049D2   670C            049E0  					Beq.s		@FixNTSCPALBot
049D4
049D4 G 0C05 009E              					Cmp.b		#sRsrc_Vid_DAFB_PALconvST,D5			; If weÕre on a PAL convolved display,
049D8   6706            049E0  					Beq.s		@FixNTSCPALBot							;	then apply fix.
049DA G 0C05 00A0              					Cmp.b		#sRsrc_Vid_DAFB_PALconvFF,D5
049DE   6002            049E2  					Bra.s		@BotStart
049E0
049E0   5241                   	@FixNTSCPALBot	Addq		#1,D1									; For convolved interlace displays, we need to
049E2                          																		;	blacken the ÒfalseÓ bottom.
049E2   600E            049F2  	@BotStart		Bra.s		@BotSecPrime							;
049E4   3029 0006              	@BotSecFill_V	Move.w		SC_BorderWidth(A1),D0					; Get number of longs (-1) to blast black in r
049E8   24C3                   	@BotSecFill_H	Move.l		D3,(A2)+								; Blast black to screen.
049EA G 51C8 FFFC       049E8  					Dbra		D0,@BotSecFill_H
049EE
049EE   D4E9 000A              					Adda.w		SC_SkipFactor(A1),A2					; Skip to start of next row.
049F2 G 51C9 FFF0       049E4  	@BotSecPrime	Dbra		D1,@BotSecFill_V
049F6
049F6                          					EndWith												; SC_Parms
049F6
049F6                          	; Set up a [white, black] gamma-corrected color table.
049F6                          	;
049F6                          					With		MiniGamma
049F6
049F6   42AB 0200              					Clr.l		ACDC_AddrReg(A3)						; Start at position zero in the CLUT.
049FA G 47EB 0210              					Adda		#ACDC_DataReg,A3						; Point to CLUT data register directly.
049FE   7000                   					Moveq		#0,D0									; Clear write value.
04A00
04A00   41FA 00E2       04AE4  					Lea			MiniGammaTable,A0						; Point to start of the mini gamma table.
04A04   41F0 6600              					Lea			(A0,D6*GT_Size),A0						; Get offset to right entry.
04A08
04A08                          	; Write gamma-correct white entry to CLUTÉ
04A08                          	;
04A08
04A08 G 0C05 0082              					Cmp.b		#sRsrc_Vid_DAFB_FP,D5					; If this is a Portrait,
04A0C   6708            04A16  					Beq.s		@DoMonoWhite							;	then set up for a mono-only display.
04A0E G 0C05 0086              					Cmp.b		#sRsrc_Vid_DAFB_2P,D5					; If this is a Kong,
04A12   6702            04A16  					Beq.s		@DoMonoWhite							;	then set up for a mono-only display.
04A14   6006            04A1C  					Bra.s		@DoWhiteRGB								; Otherwise, do RGB setup.
04A16
04A16   4293                   	@DoMonoWhite	Clr.l		(A3)
04A18   4293                   					Clr.l		(A3)
04A1A   600C            04A28  					Bra.s		@WriteBlueWhite
04A1C
04A1C   1028 0001              	@DoWhiteRGB		Move.b		whiteRed(A0),D0
04A20   2680                   					Move.l		D0,(A3)
04A22   1028 0003              					Move.b		whiteGreen(A0),D0
04A26   2680                   					Move.l		D0,(A3)
04A28
04A28   1028 0005              	@WriteBlueWhite	Move.b		whiteBlue(A0),D0
04A2C   2680                   					Move.l		D0,(A3)
04A2E
04A2E                          	; Write gamma-correct black entry to CLUTÉ
04A2E                          	;
04A2E
04A2E G 0C05 0082              					Cmp.b		#sRsrc_Vid_DAFB_FP,D5					; If this is a Portrait,
04A32   6708            04A3C  					Beq.s		@DoMonoBlack							;	then set up for a mono-only display.
04A34 G 0C05 0086              					Cmp.b		#sRsrc_Vid_DAFB_2P,D5					; If this is a Kong,
04A38   6702            04A3C  					Beq.s		@DoMonoBlack							;	then set up for a mono-only display.
04A3A   6006            04A42  					Bra.s		@DoBlackRGB								; Otherwise, do RGB setup.
04A3C
04A3C   4293                   	@DoMonoBlack	Clr.l		(A3)
04A3E   4293                   					Clr.l		(A3)
04A40   600A            04A4C  					Bra.s		@WriteBlueBlack
04A42
04A42   1010                   	@DoBlackRGB		Move.b		blackRed(A0),D0
04A44   2680                   					Move.l		D0,(A3)
04A46   1028 0002              					Move.b		blackGreen(A0),D0
04A4A   2680                   					Move.l		D0,(A3)
04A4C
04A4C   1028 0004              	@WriteBlueBlack	Move.b		blackBlue(A0),D0
04A50   2680                   					Move.l		D0,(A3)
04A52
04A52                          					EndWith
04A52
04A52                          	; Dispose of vidParams and restore addressing modeÉ
04A52                          	;
04A52 G 206E FFB8              					Move.l		vidParamsPtr(A6),A0						; Dispose of video parameter block.
04A56   A01F                   					_DisposPtr
04A58
04A58                          	;
04A58                          	; Restore the previous addressing mode and leave.
04A58                          	;
04A58
04A58                          	DAFBExit
04A58   102E FFBF              					Move.b		saveMMUmode(A6),D0						; Get the previous mode into D0.
04A5C   A05D                   					_SwapMMUMode										; Swap back.
04A5E
04A5E   4E5E                   					Unlk		A6										; Restore the stack, and
04A60   4E75                   					Rts													; 	leave.
04A62
04A62                          	;-------------------------------------------------------------
04A62                          	;				Data
04A62                          	;-------------------------------------------------------------
04A62                          	;
04A62   0000 4A64              					Align		4
04A64                          	;
04A64                          	; Video spID mode list.  Here they all are in byte size.  The first word of the table is the c
04A64                          	;	of legal modes on all machines, followed by a list of all functional spIDs.
04A64                          	;
04A64
04A64   001D                   	ModeList		Dc.w		MLEnd-MLStart-1																	; Block size.
04A66                          	MLStart
04A66   80 81                  					Dc.b		sRsrc_Vid_DAFB_RGB2Pa,sRsrc_Vid_DAFB_RGB2Pb
04A68   82                     					Dc.b		sRsrc_Vid_DAFB_FP
04A69   84                     					Dc.b		sRsrc_Vid_DAFB_GS
04A6A   86                     					Dc.b		sRsrc_Vid_DAFB_2P
04A6B   88 89                  					Dc.b		sRsrc_Vid_DAFB_NTSCSTa,sRsrc_Vid_DAFB_NTSCSTb
04A6D   8A 8B                  					Dc.b		sRsrc_Vid_DAFB_NTSCFFa,sRsrc_Vid_DAFB_NTSCFFb
04A6F   8C 8E                  					Dc.b		sRsrc_Vid_DAFB_NTSCconvST,sRsrc_Vid_DAFB_NTSCconvFF
04A71   90 91                  					Dc.b		sRsrc_Vid_DAFB_RGBFPa,sRsrc_Vid_DAFB_RGBFPb
04A73   92 93                  					Dc.b		sRsrc_Vid_DAFB_HRa,sRsrc_Vid_DAFB_HRb
04A75   94 95                  					Dc.b		sRsrc_Vid_DAFB_VGAa,sRsrc_Vid_DAFB_VGAb
04A77   96 97                  					Dc.b		sRsrc_Vid_DAFB_SVGAa,sRsrc_Vid_DAFB_SVGAb
04A79   98 99                  					Dc.b		sRsrc_Vid_DAFB_GFa,sRsrc_Vid_DAFB_GFb
04A7B   9A 9B                  					Dc.b		sRsrc_Vid_DAFB_PALSTa,sRsrc_Vid_DAFB_PALSTb
04A7D   9C 9D                  					Dc.b		sRsrc_Vid_DAFB_PALFFa,sRsrc_Vid_DAFB_PALFFb
04A7F   9E A0                  					Dc.b		sRsrc_Vid_DAFB_PALconvST,sRsrc_Vid_DAFB_PALconvFF
04A81   A2 A3                  					Dc.b		sRsrc_Vid_DAFB_19a,sRsrc_Vid_DAFB_19b
04A83
04A83   FE                     					Dc.b		sRsrc_NeverMatch
04A84                          	MLEnd
04A84
04A84   0000 4A84              					Align		4
04A84
04A84                          	;
04A84                          	; This is the table that translates monitor and memory configuration information to the approp
04A84                          	;	DAFB spID.  Here's the format - the table is grouped by monitor type.  For each monitor type
04A84                          	;	there's a longword which calls out the video mode family members of this mode.  If there are
04A84                          	;	any alternate modes, then this value is zero.  The next byte is a set of flags for propertie
04A84                          	;	this display.  No flags are defined at this time. The next two bytes are the 2MB & 1MB defau
04A84                          	;	spIDs, respectively.
04A84                          	;
04A84
04A84   0000 0000              	DT_Family		EQU			0					; [4 bytes] concatenated spIDs of alternate video mode family members.
04A84   0000 0004              	DT_Misc			EQU			4					; [1 byte] miscellaneous modal flag word.
04A84   0000 0005              	DT_Mode			EQU			5					; [2 bytes] spID of the preferred mode, one for each memory configuratio
04A84
04A84                          	DAFBTable
04A84                          	;							Family 	 		 Misc  	Modes: 2MB, 1MB
04A84                          	;---------------------------------------------------------------------------------------------
04A84   00 00 00 00 00         					DC.B		0,0,0,0,			0,	sRsrc_Vid_DAFB_RGB2Pb,sRsrc_Vid_DAFB_RGB2Pa,0				; Vesuvio
04A8C   00 00 00 00 00         					DC.B		0,0,0,0, 			0,	sRsrc_Vid_DAFB_FP,sRsrc_Vid_DAFB_FP,0						; Mono Full-Page
04A94   00 00 00 00 00         					DC.B		0,0,0,0,			0,	sRsrc_Vid_DAFB_GS,sRsrc_Vid_DAFB_GS,0						; Rubik
04A9C   00 00 00 00 00         					DC.B		0,0,0,0,			0,	sRsrc_Vid_DAFB_2P,sRsrc_Vid_DAFB_2P,0						; Two-Page
04AA4   8C 8E 89 8B 00         					DC.B		sRsrc_Vid_DAFB_NTSCconvST,	\														;
        89 88 00               								sRsrc_Vid_DAFB_NTSCconvFF,	\														;
                               								sRsrc_Vid_DAFB_NTSCSTb,		\														;
                               								sRsrc_Vid_DAFB_NTSCFFb,		\														;
                               													0,	sRsrc_Vid_DAFB_NTSCSTb,sRsrc_Vid_DAFB_NTSCSTa,0				; NTSC
04AAC
04AAC   00 00 00 00 00         					DC.B		0,0,0,0,			0,	sRsrc_Vid_DAFB_RGBFPb,sRsrc_Vid_DAFB_RGBFPa,0				; RGB Full-Page
04AB4   00 00 00 00 00         					DC.B		0,0,0,0,			0,	sRsrc_Vid_DAFB_HRb,sRsrc_Vid_DAFB_HRa,0						; High-Res RGB/Mono
04ABC
04ABC   00 00 00 00 00         					DC.B		0,0,0,0,			0,	0,0,0														; <skip for no connect>
04AC4
04AC4   00 00 95 97 00         					DC.B		0,0,						\
        95 94 00               								sRsrc_Vid_DAFB_VGAb,		\
                               								sRsrc_Vid_DAFB_SVGAb,		\
                               													0,	sRsrc_Vid_DAFB_VGAb,sRsrc_Vid_DAFB_VGAa,0					; VGA
04ACC   9E A0 9B 9D 00         					DC.B		sRsrc_Vid_DAFB_PALconvST,	\														;
        9B 9A 00               								sRsrc_Vid_DAFB_PALconvFF,	\														;
                               								sRsrc_Vid_DAFB_PALSTb,		\														;
                               	 							sRsrc_Vid_DAFB_PALFFb,		\														;
                               													0,	sRsrc_Vid_DAFB_PALSTb,sRsrc_Vid_DAFB_PALSTa,0				; PAL
04AD4   00 00 00 00 00         					DC.B		0,0,0,0,			0,	sRsrc_Vid_DAFB_GFb,sRsrc_Vid_DAFB_GFa,0						; Goldfish
04ADC   00 00 00 00 00         					Dc.b		0,0,0,0,			0,	sRsrc_Vid_DAFB_19b,sRsrc_Vid_DAFB_19a,0						; 19Ó
04AE4
04AE4   0000 4AE4              					Align		4
04AE4
04AE4                          	MiniGammaTable
04AE4                          	;							 bR  wR  bG  wG  bB  wB
04AE4                          	;---------------------------------------------------------------------------------------------
04AE4   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; Vesuvio
04AEC   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; Mono Full-Page
04AF4   05 FF 05 FF 05         					Dc.b		$05,$FF,$05,$FF,$05,$FF,0,0								; Rubik
04AFC   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; Two-Page
04B04   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; NTSC
04B0C   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; RGB Full-Page
04B14   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; High-Res RGB/Mono
04B1C   00 00 00 00 00         					Dc.b		$00,$00,$00,$00,$00,$00,0,0								;
04B24   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; VGA
04B2C   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; PAL
04B34   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; GoldFish
04B3C   00 FF 00 FF 00         					Dc.b		$00,$FF,$00,$FF,$00,$FF,0,0								; 19Ó
04B44
04B44   0000 4B44              					Align		4
04B44
04B44                          	ModeTable
04B44                          	;							2Meg,1Meg
04B44                          	;---------------------------------------------------------------------------------------------
04B44   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; Vesuvio
04B46   80 80                  					Dc.b		FirstVidMode,FirstVidMode								; Mono Full-Page
04B48   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; Rubik
04B4A   80 80                  					Dc.b		FirstVidMode,FirstVidMode								; Two-Page
04B4C   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; NTSC
04B4E   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; RGB Full-Page
04B50   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; High-Res RGB/Mono
04B52   00 00                  					Dc.b		0,0														;
04B54   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; VGA
04B56   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; PAL
04B58   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; GoldFish
04B5A   83 83                  					Dc.b		FourthVidMode,FourthVidMode								; 19Ó
04B5C
04B5C   0000 4B5C              					Align		4
04B5C
04B5C                          	PrelimInit
04B5C
04B5C                          	; Clock chip parms
04B5C                          	;
04B5C   0F 01 01 00 09         					DC.B		$0F,$01,$01,$00,$09,$03,$00,$00							; Clock chip parms
04B64   00 02 05 06 04         					DC.B		$00,$02,$05,$06,$04,$01,$00,$00							;
04B6C
04B6C                          	; Misc params
04B6C                          	;
04B6C   00 00                  					Dc.b		$00,$00													; (Just filler here)
04B6E   0000 0000              					Dc.l		$0														;
04B72
04B72                          	; One bit mode parameters
04B72                          	;
04B72   0008 0000 0100         					DC.W		$0008,$0000,$0100,$061E,$0030							; DAFB parms
04B7C   0FF2 026E 0190         					DC.W		$0FF2,$026E,$0190,$0030,$031F,$005F,$006B				; Swatch parms
04B8A   007E 0083 0303         					DC.W		$007E,$0083,$0303,$031E,$041A,$0418,$0002,$0007			;
04B9A   0044 0404 0408         					DC.W		$0044,$0404,$0408,$0025									;
04BA2   0080                   					DC.W		$0080													; ACDC parms
04BA4                          	_EndsPInitRec
04BA4
04BA4   0000 4BA4              					Align	2
04BA4
04BA4                          	;-------------------------------------------------------------
04BA4                          	;				Drivers
04BA4                          	;-------------------------------------------------------------
04BA4                          	;
04BA4
04BA4                          	_sMacOSDAFB
04BA4   0000 1048              					Dc.l	_EndDAFBDrvr-_sMacOSDAFB
04BA8                          					Include	'Driver.a'
04BA8                          	;
04BA8                          	;	File:		Driver.a
04BA8                          	;
04BA8                          	;	Contains:	The Driver code for the DAFB Õ040 PDS Display Card.
04BA8                          	;
04BA8                          	;	Written by: Mike Puckett, July 8, 1991.
04BA8                          	;
04BA8                          	;	Copyright:	© 1991 by Apple Computer, Inc., all rights reserved.
04BA8                          	;
04BA8                          	;	Change History (most recent first):
04BA8                          	;
04BA8                          	;		 <8>	12/18/91	jmp		Eliminated some code in GrayScreen that handled base addresses
04BA8                          	;									that moved across depths, as it is no longer needed.
04BA8                          	;		 <7>	11/11/91	jmp		Cleaned up the SetDefaultMode call.
04BA8                          	;		 <6>	11/06/91	jmp		Added support for 19Ó displays.
04BA8                          	;		 <5>	09/18/91	jmp		Added support for disabling the ECL clock signals in software
04BA8                          	;									when appropriate.
04BA8                          	;		 <4>	09/17/91	jmp		Removed the ÒGoodbye KissÓ stuff, added support for the
04BA8                          	;									Òextended no-connectÓ, and fixed a PAL 16bpp typo.
04BA8                          	;		 <3>	09/17/91	jmp		Updated the screen-graying code for 16bpp PAL.
04BA8                          	;		 <2>	09/17/91	jmp		Added support for graying the screen in 16bpp and added code for
04BA8                          	;									more intelligently handling  PageMode.
04BA8                          	;		 <1>	09/17/91	jmp		first checked in
04BA8
04BA8                          					BLANKS		ON
04BA8                          					STRING		ASIS
04BA8                          					MACHINE		MC68020
04BA8
04BA8                          	; This is device storage which is stored in the dCtlStorage field of the AuxDCE.
04BA8
00000                          	DAFBVidPrivates	RECORD		0
00000                          	saveBaseAddr 	DS.L		1								; the screen base address (NOT ST corrected!)
00004                          	saveScreenBase	DS.L		1								; ST corrected version of saveBaseAddr.
00008                          	saveSQElPtr 	DS.L		1								; the SQ element pointer (for _SIntRemove)
0000C                          	saveGammaPtr 	DS.L		1								; the pointer to the Gamma correction table
00010                          	saveGamDispPtr	DS.L		1								; the pointer to the Gamma block
00014                          	saveVDACBase	DS.L		1								; the base addr of the VDAC
00018                          	saveDAFBBase	DS.L		1								; the base addr of the DAFB
0001C                          	saveVidPtr		DS.L		1								; pointer to a big block of DAFB video parameters
00020                          	GFlags			DS.W		1								; flags word
00022                          	pageModeSet		Ds.w		1								; true if the pRam PageMode enable bit is set
00024                          	saveMode		DS.W		1								; the current mode setting
00026                          	saveMonID		DS.W		1								; monitor type ID (indexed, not extended).
00028                          	saveSlotId		DS.W		1								; spID of video sRsrc (hi-order byte only!)
0002A   002A                   	DAFBVidPrivSize	EQU			*
0002A                          					ENDR
04BA8
04BA8                          	;-------------------------------------------------------------------
04BA8                          	;	Video Driver Header
04BA8                          	;-------------------------------------------------------------------
04BA8                          	;
04BA8                          	DAFBDrvr
04BA8   4C00                   					DC.W	$4C00								; ctl,status,needsLock
04BAA   0000 0000 0000         					DC.W	0,0,0								; not an ornament
04BB0
04BB0                          	; Entry point offset table
04BB0
04BB0   0066                   					DC.W	DAFBVidOpen-DAFBDrvr 				; open routine
04BB2   0000                   					DC.W	DAFBDrvr-DAFBDrvr					; no prime in normal video drivers
04BB4   025E                   					DC.W	DAFBVidCtl-DAFBDrvr					; control
04BB6   09A4                   					DC.W	DAFBVidStatus-DAFBDrvr				; status
04BB8   092C                   					DC.W	DAFBVidClose-DAFBDrvr				; close
04BBA
04BBA                          					STRING	Pascal
04BBA                          	DAFBVidTitle
04BBA                          	;jwh				DC.B	'.Display_Video_Apple_DAFB_PDS'
04BBA   232E446973706C         					DC.B	'.Display_Video_Apple_RasterOps24MxQ'		; jwh
04BDE
04BDE   0000 4BDE              					ALIGN	2									; make sure we're aligned
04BDE   0101                   					DC.W	CurDAFBDrvrVersion					; current version
04BE0
04BE0                          					STRING	ASIS
04BE0
04BE0                          	;
04BE0                          	; This table simply contains the zero-based maximum index value for each of the depths.  It is
04BE0                          	;	set up to be indexed via the modeID.
04BE0                          	;
04BE0
04BE0   01 03 0F FF 1F         	DAFBClutTbl		Dc.b	$01,$03,$0F,$FF,$1F,$FF
04BE6
04BE6                          	;
04BE6                          	; These are the bit patterns for grays in each depth, except the last one which is the black
04BE6                          	;	Òhalf-patternÓ in 32-bit/pixel mode.
04BE6
04BE6   AAAA AAAA CCCC         	DAFBPats		Dc.l	OneBitGray,TwoBitGray,FourBitGray,EightBitGray,SixteenBitGray,ThirtyTwoBitGray
04BFE
04BFE                          	;
04BFE                          	; Normally, if no monitor is detected on boot, PrimaryInit just shuts video down.  However,
04BFE                          	;	if the no-connect pRam code is valid, then we things up as if the monitor code
04BFE                          	;	specified in pRam were actually connected.  The DAFBMonIDs table (below) is composed
04BFE                          	;	of the valid monitor IDs supported by DAFB.
04BFE                          	;
04BFE
04BFE   000D                   	DAFBMonIDs		Dc.w	MonIDSEnd-MonIDsBegin-1
04C00
04C00                          	MonIDsBegin
04C00   00 01 02 03            					Dc.b	indexedSenseRGB2P,indexedSenseFP,indexedSenseRubik,indexedSense2P
04C04   04 05 06               					Dc.b	indexedSenseNTSC,indexedSenseRGBFP,indexedSenseHR
04C07   00 14 17               					Dc.b	extendedSensePALBox,extendedSenseNTSC,extendedSenseVGA
04C0A   2D 30 3A               					Dc.b	extendedSenseGF,extendedSensePAL,extendedSense19
04C0E                          	MonIDSEnd
04C0E
04C0E                          	**********************************************************************
04C0E                          	*
04C0E                          	* DAFBVidOpen allocates private storage for the device in the AuxDCE and locks
04C0E                          	*	it down for perpetuity. Also, install the interrupt handler and enable
04C0E                          	*	the interrupts.
04C0E                          	*
04C0E                          	* Entry:	A0 = param block pointer
04C0E                          	*			A1 = AuxDCE pointer
04C0E                          	*
04C0E                          	* Locals:	A3 = pointer to private storage
04C0E                          	*
04C0E                          	**********************************************************************
04C0E
04C0E                          					WITH	VDPageInfo,SlotIntQElement,DAFBVidPrivates
04C0E
04C0E                          	DAFBVidOpen
04C0E                          	;
04C0E                          	; Allocate private storage (since block is CLEAR, GFlags are zeroed) and get
04C0E                          	;	a pointer to it in A3
04C0E                          	;
04C0E
04C0E   702A                   					MOVEQ	#DAFBVidPrivSize,D0					; get size of parameters
04C10   A440                   					_ResrvMem ,SYS 								; make room as low as possible
04C12   702A                   					MOVEQ	#DAFBVidPrivSize,D0					; get size of parameters
04C14   A722                   					_NewHandle ,SYS,CLEAR						; get some memory for private storage
04C16   6600 01EA       04E02  					BNE   	@OpError1							; => return an error in open
04C1A   2348 0014              					MOVE.L	A0,dCtlStorage(A1)					; save returned handle in AuxDCE
04C1E   A029                   					_HLock										; and lock it down forever
04C20
04C20   2010                   					MOVE.L	(A0),D0								; get a pointer to it
04C22   A055                   					_StripAddress								; clean it up
04C24 G 2640                   					MOVE.L	D0,A3								; get pointer to privates in A3
04C26
04C26                          	;
04C26                          	; Remember the VDAC and DAFB base addresses since they're hard to look up.
04C26                          	;
04C26
04C26   223C F000 0000         					Move.l	#$F0000000,D1						; D1 <- $F0000000.
04C2C   1029 0028              					Move.b	dCtlSlot(A1),D0						; D0 <- Slot number, s.
04C30   EFC1 0104              					Bfins	D0,D1{4:4}							; D1 <- $Fs000000.
04C34
04C34 G 2041                   					Move.l	D1,A0								; Copy hardware base.
04C36   D1FC 0080 0000         					Adda.l	#DAFBBase,A0						; Get DAFBBase.
04C3C   2748 0018              					Move.l	A0,saveDAFBBase(A3)					; Save it, and
04C40   2748 0014              					Move.l	A0,saveVDACBase(A3)					; VDAC, too.
04C44
04C44                          	;
04C44                          	; Also, save the raw base address for the frame buffer.  WeÕll correct it a little
04C44                          	;	later.
04C44                          	;
04C44
04C44   2681                   					Move.l	D1,saveBaseAddr(A3)					; Save the framebase.
04C46
04C46                          	;
04C46                          	; Get and install the interrupt handler.  Call the EnableVGuts utility code to do
04C46                          	;	this.  This utility also starts the interrupts going.  If there is an error
04C46                          	;	condition, EnableVGuts returns with Z-bit cleared.
04C46
04C46   7010                   					MOVEQ	#sqHDSize,D0						; allocate a slot queue element
04C48   A71E                   					_NewPtr	,SYS,CLEAR							; get it from system heap cleared
04C4A   6600 01B0       04DFC  					BNE   	@OpError2							; if not allocated, return bad
04C4E   2748 0008              					MOVE.L	A0,saveSQElPtr(A3)					; save the SQ element pointer.
04C52
04C52   6100 05FA       0524E  					BSR		DAFBEnableVGuts						; do it
04C56   6600 01A4       04DFC  					BNE 	@OpError2							;
04C5A
04C5A                          	;
04C5A                          	; Load the default gamma table from the slot resource list.
04C5A                          	;
04C5A
04C5A                          					WITH	spBlock
04C5A
04C5A G 9EFC 0038              					SUBA	#spBlockSize,SP						; make a slot parameter block
04C5E G 204F                   					MOVE.L	SP,A0								; get pointer to block in A0
04C60   1169 0028 0031         					MOVE.B	dCtlSlot(A1),spSlot(A0)				; copy the slot number
04C66   1169 0029 0032         					MOVE.B	dCtlSlotId(A1),spID(A0)				; copy the spID of the video sRsrc
04C6C   4228 0033              					CLR.B	spExtDev(A0)						;
04C70                          					_sRsrcInfo									; get the spsPointer
04C70   7016                  1	  				MOVEQ   	#sRsrcInfo,D0
04C72   A06E                  1	  				_SlotManager
04C74   6600 0182       04DF8  					BNE		@OpError3							; if failed, then quit.
04C78
04C78   117C 0040 0032         					MOVE.B	#sGammaDir,spID(A0)					; look for the gamma directory
04C7E                          					_sFindStruct								; get that baby
04C7E   7006                  1	  				MOVEQ   	#sFindStruct,D0
04C80   A06E                  1	  				_SlotManager
04C82   6626            04CAA  					BNE.S	@DoLinear							; if failed, then do linear
04C84
04C84   117C 0080 0032         					MOVE.B	#128,spID(A0)						; get the default gamma table, (always 128)
04C8A                          					_sGetBlock									; we can use this since we want it on the sys heap
04C8A   7005                  1	  				MOVEQ   	#sGetBlock,D0
04C8C   A06E                  1	  				_SlotManager
04C8E   661A            04CAA  					BNE.S	@DoLinear							; if failed, then do linear
04C90
04C90                          	; Skip over gamma header.
04C90
04C90 G 2050                   					MOVE.L	spResult(A0),A0						; point to head of the block
04C92   2748 0010              					MOVE.L	A0,saveGamDispPtr(A3)				; save the ptr to the gamma block
04C96 G 5448                   					ADDA	#2,A0								; skip resID
04C98   4A18                   	@Name			TST.B	(A0)+								; skip over gamma name
04C9A   66FC            04C98  					BNE.S	@Name								;
04C9C   2008                   					MOVE.L	A0,D0								; get in d-reg
04C9E   5240                   					ADDQ	#1,D0								; word align pointer
04CA0   0880 0000              					BCLR	#0,D0								; round it off
04CA4
04CA4   2740 000C              					MOVE.L	D0,saveGammaPtr(A3)					; put it in private storage
04CA8   603A            04CE4  					Bra.s	@VidParams							; Jump around linear code.
04CAA
04CAA                          	;
04CAA                          	; Build a linear default gamma table if necessary.
04CAA                          	;
04CAA
04CAA                          	@DoLinear
04CAA   700C                   					Moveq	#gFormulaData,D0					; Get gamma table header size.
04CAC G 0640 0100              					Add		#256,D0								; Add in one-byte per entry.
04CB0   A71E                   					_NewPtr	,SYS,CLEAR							; Clear it.
04CB2   6600 0144       04DF8  					Bne		@OpError3							; If failed, quit.
04CB6
04CB6   2748 0010              					Move.l	A0,saveGamDispPtr(A3)				; Save head of gamma table for disposal.
04CBA   2748 000C              					Move.l	A0,saveGammaPtr(A3)					; Head and top are same here.
04CBE   317C 001F 0002         					Move.w	#drHwRasterOps24MxQ,gType(A0)		; Set up gType.		jwh
04CC4   317C 0001 0006         					Move.w	#1,gChanCnt(A0)						; Set up gChanCnt.
04CCA   317C 0100 0008         					Move.w	#256,gDataCnt(A0)					; Set up gDataCnt.
04CD0   317C 0008 000A         					Move.w	#8,gDataWidth(A0)					; Set up gDataWidth.
04CD6 G 41E8 010C              					Adda	#gFormulaData+256,A0				; Point to end of data table.
04CDA   303C 00FF              					Move.w	#255,D0								; Set up loop counter.
04CDE   1100                   	@Loop			Move.b	D0,-(A0)							; Write out value.
04CE0 G 51C8 FFFC       04CDE  					Dbra	D0,@Loop							; Loop.
04CE4
04CE4                          	;
04CE4                          	; Get a pointer to the video hardware setup parameter block.  Use this functional spID's spsPo
04CE4                          	;	found above in the gamma section.
04CE4                          	;
04CE4
04CE4                          	@VidParams
04CE4
04CE4 G 204F                   					MOVE.L	SP,A0								; point to the spBlock on the stack
04CE6   1169 0028 0031         					MOVE.B	dCtlSlot(A1),spSlot(A0)				; copy the slot number
04CEC   117C 0001 0032         					MOVE.B	#sRsrcBoard,spID(A0)				; copy the spID of the video sRsrc
04CF2   4228 0033              					CLR.B	spExtDev(A0)						;
04CF6                          					_sRsrcInfo									; Get the spsPointer.
04CF6   7016                  1	  				MOVEQ   	#sRsrcInfo,D0
04CF8   A06E                  1	  				_SlotManager
04CFA   6600 00F6       04DF2  					Bne		@OpError4							; If failed, quit.
04CFE
04CFE   117C 007E 0032         					MOVE.B	#sVidParmDir,spID(A0)				; look for the video parameters dir
04D04                          					_sFindStruct								; Try to load it.
04D04   7006                  1	  				MOVEQ   	#sFindStruct,D0
04D06   A06E                  1	  				_SlotManager
04D08   6600 00E8       04DF2  					Bne		@OpError4							; If failed, quit.
04D0C
04D0C   1169 0029 0032         					MOVE.B	dCtlSlotId(A1),spID(A0)				; look in the directory for this config's parameters
04D12                          					_sGetBlock									; Try to load it.
04D12   7005                  1	  				MOVEQ   	#sGetBlock,D0
04D14   A06E                  1	  				_SlotManager
04D16   6600 00DA       04DF2  					Bne		@OpError4							; If failed, quit.
04D1A
04D1A   2750 001C              					MOVE.L	spResult(A0),saveVidPtr(A3)			; save pointer to it
04D1E
04D1E G 2050                   					Move.l	spResult(A0),A0						; Get vidParams pointer.
04D20 G D0FC 0012              					Adda.l	#MiscBaseAddr,A0					; Skip past MaxMode(a,b) params.
04D24   2010                   					Move.l	(A0),D0								; Get the frame buffer baseoffset,
04D26   D193                   					Add.l	D0,saveBaseAddr(A3)					;	and add it to the framebase.
04D28
04D28                          	;
04D28                          	; At PrimaryInit time, we used the sense lines to determine the type of attached display.  For
04D28                          	;	sense displays, we just mapped them to the end of indexed-sense displays.  Since the gamma-c
04D28                          	;	code uses the monitor ID to determine if the passed-in table is applicable, we need to know
04D28                          	;	monitor ID.  At PrimaryInit time, we store the real monitor ID in slot pRAM.  So, we extract
04D28                          	;	information out here.  Also, it should be noted that it would actually be inappropriate for
04D28                          	;	to re-read the sense-lines now, in that someone could potentially change/unplug the attached
04D28                          	;	display between PrimaryInit and VidOpen, and that would cause us all sorts of havoc.
04D28                          	;
04D28                          					With	SP_Params
04D28
04D28 G 204F                   					Move.l	Sp,A0								; Point to spBlock on the stack.
04D2A   1169 0028 0031         					Move.b	dCtlSlot(A1),spSlot(A0)				; Put slot into spBlock.
04D30
04D30 G 514F                   					Suba	#sizeSPRamRec,Sp					; Allocate an SPRam block on the stack.
04D32   208F                   					Move.l	Sp,spResult(A0)						; Point to it.
04D34                          					_SReadPRAMRec								; Read Slot PRam.
04D34   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
04D36   A06E                  1	  				_SlotManager
04D38   6600 00B6       04DF0  					Bne		@OpError5							; If failed quit.
04D3C
04D3C   7600                   					Moveq	#0,D3								; Clear D3.w.
04D3E   7400                   					Moveq	#0,D2								; Clear D2.w.
04D40   162F 0002              					Move.b	SP_Depth(Sp),D3						; Get the mode (itÕs byte sized).
04D44   142F 0005              					Move.b	SP_MonID(Sp),D2						; Get the monID (itÕs byte sized).
04D48   122F 0006              					Move.b	SP_Flags(Sp),D1						; Get the flags.
04D4C
04D4C G 4FEF 0040              					Adda	#sizeSPRamRec+spBlockSize,Sp		; Clean up the stack.
04D50
04D50                          					EndWith
04D50
04D50                          	;
04D50                          	; Do a little bookkeepingÉ
04D50                          	;
04D50   3743 0024              					Move.w	D3,saveMode(A3)						; Save the mode for later.
04D54   3742 0026              					Move.w	D2,saveMonID(A3)					; Save the monID for later.
04D58   1769 0029 0028         					Move.b	dCtlSlotId(A1),saveSlotId(A3)		; Also save the spID.
04D5E
04D5E   0801 0000              					Btst	#spSyncOnGreen,D1					; If weÕre not supposed to put sync on green,
04D62   6706            04D6A  					Beq.s	@CheckPageMode						;	then just go on.
04D64   08EB 0008 0020         					Bset	#syncOnGreen,GFlags(A3)				; Otherwise, set the flag.
04D6A
04D6A G 286B 0018              	@CheckPageMode	Move.l	saveDAFBBase(A3),A4					; Get DAFBBase into A4 for below.
04D6E   0801 0001              					Btst	#spPageMode,D1						; If PageMode is supposed to be enabled,
04D72   6604            04D78  					Bne.s	@EnablePageMode						;	then say so.
04D74 G 422B 0022              					Move.b	#0,pageModeSet(A3)					; Otherwise, say page mode is disaabled.
04D78
04D78   177C 0001 0022         	@EnablePageMode	Move.b	#1,pageModeSet(A3)					; Say page mode is enabled.
04D7E
04D7E   103C 0001              					Move.b	#true32b,D0							; Set up to swap into 32-bit addressing mode.
04D82   A05D                   					_SwapMMuMode								; Do swap, and
04D84   1F00                   					Move.b	D0,-(Sp)							; 	save the previous mode.
04D86
04D86   202C 0010              					Move.l	DAFB_Config(A4),D0					; Read the DAFBConfig register.
04D8A   E9C0 07C1              					Bfextu	D0{dafbWrdIntBit:1},D0				; If word-interleave is on
04D8E   660A            04D9A  					Bne.s	@DisablePageMode					;	then ALWAYS disable page mode.
04D90   4A2B 0022              					Tst.b	pageModeSet(A3)						; If weÕre not supposed to enable page mode,
04D94   6704            04D9A  					Beq.s	@DisablePageMode					;	then disable it.
04D96   7001                   					Moveq	#1,D0								; Otherwise, set up to enable page mode,
04D98   6002            04D9C  					Bra.s	@HitPageMode						;	and do it.
04D9A                          	@DisablePageMode
04D9A   7000                   					Moveq	#0,D0								; Set up to disable page mode, and
04D9C   2940 0018              	@HitPageMode	Move.l	D0,DAFB_PgMdEn(A4)					;	and do it.
04DA0
04DA0   202C 0120              					Move.l	DAFBFlags(A4),D0					; Get the DAFBFlags.
04DA4   0800 000B              					Btst	#videoEnabled,D0					; If video is still enabled,
04DA8   6616            04DC0  					Bne.s	@CalcScrnBase						;	then just go on.
04DAA
04DAA   322B 0024              					Move.w	saveMode(A3),D1						; Otherwise, get the mode into D1.
04DAE G 0441 0080              					Sub.w	#firstVidMode,D1					; Make it an index.
04DB2   6100 0AA2       05856  					Bsr		DAFBSetDepth						; Set the depth.
04DB6   6100 09DE       05796  					Bsr		DAFBCalcScreenBaseAddr				; Calculate the new ST-corrected screen baseAddr.
04DBA   6100 0C50       05A0C  					Bsr		DAFBGrayScreen						; Paint the screen gray.
04DBE   600A            04DCA  					Bra.s	@SwapBack							; Go on.
04DC0
04DC0                          	@CalcScrnBase
04DC0   377C 0080 0024         					Move.w	#firstVidMode,saveMode(A3)			; From PrimaryInit, weÕre still at 1bpp.
04DC6   6100 09CE       05796  					Bsr		DAFBCalcScreenBaseAddr				; Save the ST-corrected screen baseAddr.
04DCA                          	@SwapBack
04DCA   101F                   					Move.b	(Sp)+,D0							; Set up to switch back into previous mode,
04DCC   A05D                   					_SwapMMUMode								;	and do it.
04DCE
04DCE                          	;
04DCE                          	; Set GFlags to reflect monochrome-only displays.
04DCE                          	;
04DCE
04DCE G 0C6B 0001 0026         					Cmp.w	#indexedSenseFP,saveMonID(A3)		; If this is a Mono-Only Full Page,
04DD4   670A            04DE0  					Beq.s	@SetMonoFlags						;	then say so.
04DD6 G 0C6B 0003 0026         					Cmp.w	#indexedSense2P,saveMonID(A3)		; If this is a Mono-Only Two-Page,
04DDC   6702            04DE0  					Beq.s	@SetMonoFlags						;	then say so.
04DDE   600C            04DEC  					Bra.s	@AllDone							; Otherwise, skip.
04DE0
04DE0   08EB 000D 0020         	@SetMonoFlags	Bset	#IsMono,GFlags(A3)					; Turn on the IsMono and
04DE6   08EB 000F 0020         					Bset	#GrayFlag,GFlags(A3)				;	 GrayFlag flags.
04DEC
04DEC                          	;
04DEC                          	; All done!
04DEC                          	;
04DEC
04DEC   7000                   	@AllDone		MOVEQ	#noErr,D0							; no error
04DEE   4E75                   	@EndOpen		RTS 										; return
04DF0
04DF0 G 504F                   	@OpError5		Adda	#sizeSPRamRec,Sp					; Release the SPRam block.
04DF2 G 206B 0010              	@OpError4		Move.l	saveGamDispPtr(A3),A0				; Set up to dispose of gamma table.
04DF6   A01F                   					_DisposPtr									; Dispose it.
04DF8 G 4FEF 0038              	@OpError3		ADDA	#spBlockSize,SP						; release the spBlock
04DFC G 2069 0014              	@OpError2		MOVE.L	dCtlStorage(A1),A0					; get the private storage back
04E00   A023                   					_DisposHandle								; release the driver private storage
04E02 G 70E9                   	@OpError1		MOVE.L	#OpenErr,D0							; say can't open driver
04E04   60E8            04DEE  					BRA.S	@EndOpen
04E06
04E06                          					ENDWITH
04E06
04E06                          	**********************************************************************
04E06                          	*
04E06                          	* Video Driver Control Call Handler.  There are 10 standard calls:
04E06                          	*
04E06                          	*	($00) Reset (VAR mode, page: INTEGER; VAR BaseAddr: Ptr);
04E06                          	*	($01) KillIO
04E06                          	*	($02) SetMode(mode, page: INTEGER; VAR BaseAddr: Ptr);
04E06                          	*	($03) SetEntries (Table: Ptr; Start,Count : integer );
04E06                          	*	($04) SetGamma (Table : Ptr );
04E06                          	*   ($05) GrayPage (page);
04E06                          	*   ($06) SetGray (csMode = 0 for color, 1 for gray)
04E06                          	*	($07) SetInterrupt (csMode = 0 for enable, non-zero for disable);
04E06                          	*	($08) DirectSetEntries (Table: Ptr; Start,Count : integer );
04E06                          	*	($09) SetDefaultMode (csMode = mode to set);
04E06                          	*
04E06                          	* The following calls are DAFB-specific:
04E06                          	*
04E06                          	*	($80) SetSyncOnGreen(csMode = 0 for enable, non-zero for disable);
04E06                          	*	($82) SetPageMode(csMode = 0 for enable, non-zero for disable);
04E06                          	*	($83) SetNoConnect(csMode = monitor ID to set)
04E06                          	*
04E06                          	*   Entry: 	A0 		= param block pointer
04E06                          	*			A1 		= AuxDCE pointer
04E06                          	*	Uses:	A2		= cs parameters (ie. A2 <- csParam(A0))  (must be preserved)
04E06                          	*			A3 		= ptr to our privates/scrarch (doesnÕt need to be preserved)
04E06                          	*			A4		= scratch (must be preserved)
04E06                          	*			D0-D3 	= scratch (don't need to be preserved)
04E06                          	*
04E06                          	*	Exit:	D0	  	= error code
04E06                          	*
04E06                          	**********************************************************************
04E06
04E06                          	;
04E06                          	; Decode the callÉ
04E06                          	;
04E06
04E06                          	DAFBVidCtl
04E06
04E06   48E7 00C0              					MOVEM.L	A0/A1,-(SP)							; Save exit registers.
04E0A
04E0A G 2468 001C              					MOVE.L	csParam(A0),A2						; A2 <- Ptr to control parameters
04E0E
04E0E G 2669 0014              					MOVE.L	dCtlStorage(A1),A3					; A3 <- Ptr to private storage
04E12   2013                   					MOVE.L	(A3),D0								;
04E14   A055                   					_StripAddress								;
04E16 G 2640                   					MOVE.L	D0,A3								;
04E18
04E18   3028 001A              					MOVE.W	csCode(A0),D0						; get routine selector
04E1C
04E1C G 0C40 0080              					Cmp.w	#cscSyncOnGreen,D0					; If we got the SetSyncOnGreen call,
04E20   6700 051E       05340  					Beq		DAFBSetSyncOnGreen					;	hop to it.
04E24 G 0C40 0082              					Cmp.w	#cscPageMode,D0						; If we go the PageMode call,
04E28   6700 0592       053BC  					Beq		DAFBSetPageMode						;	hop to it.
04E2C G 0C40 0083              					Cmp.w	#cscNoConnect,D0					; If we got the NoConnect call,
04E30   6700 05F6       05428  					Beq		DAFBSetNoConnect					;	hop to it.
04E34
04E34 G 0C40 0009              					CMP.W	#9,D0								; IF csCode NOT IN [0..9] THEN
04E38   621C            04E56  					BHI.S	DAFBCtlBad							;   Error, csCode out of bounds.
04E3A   303B 0206       04E42  					MOVE.W	DAFBCtlJumpTbl(PC,D0.W*2),D0		; Get the relative offset to the routine.
04E3E   4EFB 0002       04E42  					JMP		DAFBCtlJumpTbl(PC,D0.W)				; GOTO the proper routine.
04E42
04E42                          	DAFBCtlJumpTbl
04E42   0022                   					DC.W	DAFBVidReset-DAFBCtlJumpTbl			; $00 => VidReset
04E44   0018                   					DC.W	DAFBCtlGood-DAFBCtlJumpTbl			; $01 => CtlGood (no async routines here)
04E46   0048                   					DC.W	DAFBSetVidMode-DAFBCtlJumpTbl		; $02 => SetVidMode
04E48   0114                   					DC.W	DAFBSetEntries-DAFBCtlJumpTbl		; $03 => SetEntries
04E4A   02A8                   					DC.W	DAFBSetGamma-DAFBCtlJumpTbl			; $04 => SetGamma
04E4C   0388                   					DC.W	DAFBGrayPage-DAFBCtlJumpTbl			; $05 => GrayPage
04E4E   03B0                   					DC.W	DAFBSetGray-DAFBCtlJumpTbl			; $06 => SetGray
04E50   03CE                   					DC.W	DAFBSetInterrupt-DAFBCtlJumpTbl		; $07 => SetInterrupt
04E52   0458                   					DC.W	DAFBDirectSetEntries-DAFBCtlJumpTbl	; $08 => DirectSetEntries
04E54   0466                   					DC.W	DAFBSetDefaultMode-DAFBCtlJumpTbl	; $09 => SetDefaultMode
04E56
04E56   70EF                   	DAFBCtlBad		MOVEQ	#controlErr,D0						; else say we don't do this one
04E58   6002            04E5C  					BRA.S	DAFBCtlDone							; and return
04E5A
04E5A   7000                   	DAFBCtlGood		MOVEQ	#noErr,D0							; return no error
04E5C
04E5C   4CDF 0300              	DAFBCtlDone		MOVEM.L	(SP)+,A0/A1							; Restore Exit registers.
04E60   6000 0924       05786  					BRA		DAFBExitDrvr
04E64
04E64                          	DAFBVidReset
04E64                          	;---------------------------------------------------------------------
04E64                          	;
04E64                          	;	Reset the card to its default
04E64                          	;
04E64                          	;---------------------------------------------------------------------
04E64
04E64                          					WITH	DAFBVidPrivates
04E64
04E64   34BC 0080              					MOVE	#FirstVidMode,csMode(A2)			; return default mode
04E68   377C 0080 0024         					MOVE	#FirstVidMode,saveMode(A3)			; remember FirstVidMode as the requested mode
04E6E   7200                   					MOVEQ	#0,D1								; get default depth in D1 (#firstVidMode-#firstVidMode)
04E70   7000                   					MOVEQ	#0,D0								; get page in D0
04E72   3540 0006              					MOVE	D0,csPage(A2)						; return the page
04E76   6100 09DE       05856  					BSR		DAFBSetDepth						; set the depth	from D1
04E7A
04E7A   6100 091A       05796  					Bsr		DAFBCalcScreenBaseAddr				; Calculate the new ST-corrected screen baseAddr,
04E7E   256B 0004 0008         					Move.l	saveScreenBase(A3),csBaseAddr(A2)	;	and return it.
04E84
04E84   6100 0B86       05A0C  					BSR		DAFBGrayScreen						; paint the screen gray
04E88   60D0            04E5A  					BRA.S	DAFBCtlGood							; => no error
04E8A
04E8A                          					ENDWITH
04E8A
04E8A                          	DAFBSetVidMode
04E8A                          	;---------------------------------------------------------------------
04E8A                          	;
04E8A                          	;  Set the card to the specified mode.  Only page zero is possible,
04E8A                          	;	 so we need to check that the request was OK.
04E8A                          	;
04E8A                          	;  If the card is already set to the specified mode, then do nothing.
04E8A                          	;
04E8A                          	;---------------------------------------------------------------------
04E8A
04E8A                          					WITH	DAFBVidPrivates
04E8A
04E8A   3212                   					MOVE.W	csMode(A2),D1						; D1 = mode
04E8C   6100 0940       057CE  					BSR		DAFBChkMode							; check mode and convert
04E90   66C4            04E56  					BNE.S	DAFBCtlBad							; => not a valid mode
04E92
04E92   4A6A 0006              					TST.W	csPage(A2)							; only page zero is valid
04E96   66BE            04E56  					BNE.S	DAFBCtlBad							; => not a valid page
04E98
04E98                          	; Only set if mode has changed.
04E98
04E98   3412                   					MOVE.W	csMode(A2),D2						; get the mode spID (D1 has the zero-based mode)
04E9A   B46B 0024              					CMP		saveMode(A3),D2						; has the mode changed?
04E9E   6700 00A8       04F48  					BEQ		@ModeOK1							; if not, then skip graying
04EA2
04EA2                          	; Remember the newly requested mode.
04EA2
04EA2   3742 0024              					MOVE.W	D2,saveMode(A3)						; remember requested mode
04EA6
04EA6                          	; Set the entire color table to gray before switching to avoid screen anomalies.
04EA6
04EA6   48E7 040E              					Movem.l	A4-A6/D5,-(Sp)						; Save gamma-table registers.
04EAA
04EAA G 206B 000C              					Move.l	saveGammaPtr(A3),A0					; Get pointer to gamma data structure.
04EAE   49E8 000C              					Lea		gFormulaData(A0),A4					; Point to first gamma table.
04EB2   D8E8 0004              					Adda.w	gFormulaSize(A0),A4					;
04EB6 G 2A4C                   					Move.l	A4,A5								; Point to green data (assuming gChanCnt = 1).
04EB8 G 2C4C                   					Move.l	A4,A6								; Point to red data (assuming gChanCnt = 1).
04EBA
04EBA G 0C68 0001 0006         					Cmp.w	#1,gChanCnt(A0)						; If thereÕs only one table,
04EC0   6714            04ED6  					Beq.s	@OnlyOneTable						;	then weÕre set.
04EC2
04EC2   3428 000A              					Move.w	gDataWidth(A0),D2					; Get width of each entry (in bits).
04EC6   3028 0008              					Move.w	gDataCnt(A0),D0						; Get # of entries in table.
04ECA   5E42                   					Addq	#7,D2								; Round to nearest byte.
04ECC   E64A                   					Lsr.w	#3,D2								; Get bytes per entry.
04ECE   C0C2                   					Mulu	D2,D0								; Get size of table in bytes.
04ED0
04ED0   DAC0                   					Adda.w	D0,A5								; Calc base of green (red base + D0).
04ED2   DCC0                   					Adda.w	D0,A6								; Calc baseÉ
04ED4   DCC0                   					Adda.w	D0,A6								;	Éof blue (red base + D0 + D0).
04ED6
04ED6                          	@OnlyOneTable
04ED6
04ED6   3628 0008              					Move.w	gDataCnt(A0),D3						; Save number of gamma entries.
04EDA
04EDA   7001                   					MOVEQ	#true32b,D0							; flip to 32-bit addressing mode
04EDC   A05D                   					_SwapMMUMode								;
04EDE   1F00                   					MOVE.B	D0,-(SP)							; save current addressing mode
04EE0
04EE0 G 206B 0014              					MOVE.L	saveVDACBase(A3),A0					; get the VDAC base addr
04EE4 G 41E8 0210              					ADDA	#ACDC_DataReg,A0					; point to data register
04EE8   42A8 FFF0              					CLR.L	ACDC_AddrReg-ACDC_DataReg(A0)		; start at the beginning of CLUT
04EEC
04EEC P 40E7                   					MOVE.W	SR,-(SP)							; preserve the status register
04EEE   6100 0916       05806  					BSR		DAFBWaitVSync						; wait for next blanking period (preserves A0)
04EF2
04EF2                          	; Write out gamma-corrected gray CLUTÉ
04EF2                          	;
04EF2   3003                   					Move.w	D3,D0								; Init loop counter.
04EF4   5340                   					Subq	#1,D0								; Zero base it.
04EF6
04EF6   E24B                   					Lsr.w	#1,D3								; Get midpoint of table(s).
04EF8   7400                   					Moveq	#0,D2								; Clear write register.
04EFA
04EFA   3A2B 0020              					Move.w	GFlags(A3),D5						; Get the GFlags into a convient register.
04EFE
04EFE   0805 000D              	@Repeat			Btst	#IsMono,D5							; If this is not a mono-only display
04F02   6706            04F0A  					Beq.s	@DoRGB								;	then just do the standard RGB stuff.
04F04   4290                   					Clr.l	(A0)								; Otherwise, just write black out
04F06   4290                   					Clr.l	(A0)								;	to the red & green channels.
04F08   600C            04F16  					Bra.s	@DoMono								;
04F0A
04F0A   1434 3000              	@DoRGB			Move.b	(A4,D3),D2							; Set up to write
04F0E   2082                   					Move.l	D2,(A0)								;	red.
04F10   1435 3000              					Move.b	(A5,D3),D2							; Set up to write
04F14   2082                   					Move.l	D2,(A0)								;	green.
04F16   1436 3000              	@DoMono			Move.b	(A6,D3),D2							; Set up to write
04F1A   2082                   					Move.l	D2,(A0)								; 	blue.
04F1C G 51C8 FFE0       04EFE  					Dbra	D0,@Repeat
04F20
04F20 P 46DF                   					MOVE	(SP)+,SR							; restore the status reg
04F22   101F                   					MOVE.B	(SP)+,D0							; get the MMU mode back
04F24   A05D                   					_SwapMMUMode								;
04F26
04F26   4CDF 7020              					Movem.l	(Sp)+,A4-A6/D5						; Restore gamma-table registers.
04F2A   6100 092A       05856  					BSR		DAFBSetDepth						; set the depth from D1
04F2E
04F2E                          	; Finish up the bookkeeping.
04F2E
04F2E   3752 0024              					MOVE.W	csMode(A2),saveMode(A3) 			; save mode number
04F32 G 0C6B 0084 0024         					CMP.W	#FifthVidMode,saveMode(A3)			; was it a direct mode?
04F38   6D08            04F42  					BLT.S	@BitOff								; no, so turn flag off
04F3A
04F3A   08EB 000A 0020         					BSET	#IsDirect,GFlags(A3)				; turn on bit
04F40   6006            04F48  					BRA.S	@ModeOK1							;
04F42                          	@BitOff
04F42   08AB 000A 0020         					BCLR	#IsDirect,GFlags(A3)				; turn off bit
04F48
04F48                          	@ModeOK1
04F48   6100 084C       05796  					Bsr		DAFBCalcScreenBaseAddr				; Calculate the new ST-corrected screen baseAddr,
04F4C   256B 0004 0008         					Move.l	saveScreenBase(A3),csBaseAddr(A2)	;	and return it.
04F52
04F52   6000 FF06       04E5A  					BRA 	DAFBCtlGood							; return no error
04F56
04F56                          					ENDWITH
04F56
04F56                          	DAFBSetEntries
04F56                          	;---------------------------------------------------------------------
04F56                          	;
04F56                          	;	Input :
04F56                          	;			csParam -> datablock
04F56                          	;			datablock = csTable -> table of colorSpecs (not colortable)
04F56                          	;						csStart -> where to start setting, or -1
04F56                          	;						csCount -> # of entries to change
04F56                          	;
04F56                          	;  	This call has two modes.  In SEQUENCE mode, csCount entries are changed
04F56                          	;	in the CLUT, starting at csStart.  In INDEX mode, csCount entries are
04F56                          	;	installed into the CLUT at the positions specified by their .value fields.
04F56                          	;	This mode is selected by passing csStart = -1.  In both cases, entries are
04F56                          	;	range-checked to the dynamic range of the video mode (bits/pixel).
04F56                          	;
04F56                          	;---------------------------------------------------------------------
04F56                          	;
04F56                          	;	Set the CLUT
04F56                          	;		A0 = Ptr to the table
04F56                          	;		A1 = Ptr to AuxDCE
04F56                          	;		A2 = Ptr to cs parameter record
04F56                          	;		A3 = Ptr to private data, later to CLUT constants table
04F56                          	;		A4 = Ptr to gamma red table
04F56                          	;		A5 = Ptr to gamma green table
04F56                          	;		A6 = Ptr to gamma blue table
04F56                          	;
04F56                          	;		D0-D3 = Scratch
04F56                          	;		D4 = Size of stack color table buffer
04F56                          	;       D5 = GFlags word
04F56                          	;		D6 = Index range [0..n]
04F56                          	;		D7 = gamma channel size in bits
04F56                          	;
04F56                          	;---------------------------------------------------------------------
04F56
04F56                          	; Initialize loop.
04F56
04F56                          					WITH 	DAFBVidPrivates
04F56
04F56   082B 000A 0020         					BTST	#IsDirect,GFlags(A3)				; are we in a direct mode?
04F5C   6600 FEF8       04E56  					BNE		DAFBCtlBad							; error if so
04F60
04F60                          	DAFBSEGuts
04F60   4A92                   					TST.L	csTable(A2)							; Check for a nil pointer
04F62   6700 FEF2       04E56  					BEQ 	DAFBCtlBad							;
04F66
04F66   48E7 0F4E              					MOVEM.L	A1/A4-A6/D4-D7,-(SP)				; save registers for gamma
04F6A
04F6A   3A2B 0020              					MOVE.W	GFlags(A3),D5						; get GFlags word in D5
04F6E
04F6E G 0C6A FFFF 0004         					CMP.W	#indexEntries,csStart(A2)			; was it indexed mode?
04F74   6704            04F7A  					BEQ.S	@SkipSeq							; if so, then leave bit off (it's never turned on in GFlags)
04F76   08C5 000C              					BSET	#UseSeq,D5							; if not, turn on sequential mode bit
04F7A                          	@SkipSeq
04F7A G 206B 000C              					MOVE.L	saveGammaPtr(A3),A0					; get pointer to gamma data structure
04F7E   3028 0004              					MOVE.W	gFormulaSize(A0),D0					; get the size of formula data
04F82   49F0 000C              					LEA		gFormulaData(A0,D0),A4				; red correction table starts here
04F86 G 2A4C                   					MOVE.L	A4,A5								; get default pointer to green data
04F88 G 2C4C                   					MOVE.L	A4,A6								; get default pointer to blue data
04F8A   3E28 000A              					MOVE	gDataWidth(A0),D7					; get width of each entry in bits
04F8E G 0C68 0001 0006         					CMP		#1,gChanCnt(A0)						; if only only one table, we're set
04F94   6712            04FA8  					BEQ.S	@OneTbl								; => just one table
04F96
04F96   3028 0008              					MOVE	gDataCnt(A0),D0						; get # entries in table
04F9A   3207                   					MOVE	D7,D1								; copy it to goof around
04F9C   5E41                   					ADDQ	#7,D1								; round to nearest byte
04F9E   E649                   					LSR		#3,D1								; get bytes per entry
04FA0   C0C1                   					MULU	D1,D0								; get size of table in bytes
04FA2
04FA2   DAC0                   					ADDA	D0,A5								; calc base of green
04FA4   DCC0                   					ADDA	D0,A6								; calc base of blue
04FA6   DCC0                   					ADDA	D0,A6								; calc base of blue
04FA8
04FA8                          	@OneTbl
04FA8
04FA8                          	;
04FA8                          	; Get the maximum number of entries, zero based from a convenient table.
04FA8                          	;
04FA8
04FA8   322B 0024              					MOVE.W	saveMode(A3),D1						; get the current video mode
04FAC G 0441 0080              					SUB.W	#FirstVidMode,D1					; convert to index
04FB0
04FB0   41FA FC2E       04BE0  					LEA		DAFBClutTbl,A0						; point to little table of counts
04FB4
04FB4   7C00                   					MOVEQ	#0,D6								; clear all of D6
04FB6   1C30 1000              					MOVE.B	(A0,D1),D6							; get entry from table for this mode
04FBA
04FBA                          	;
04FBA                          	; Allocate a temporary color table on the stack.  We'll pre-process all the entries that will
04FBA                          	;	change here so we can hit the hardware as quickly as possible.
04FBA                          	;
04FBA
04FBA   382A 0006              					MOVE.W	csCount(A2),D4						; get the number of entries to change
04FBE   B846                   					CMP.W	D6,D4								; is it in the allowable range
04FC0   6200 0120       050E2  					BHI		DAFBSEBadExit						; if out of range, then exit w/bad result
04FC4
04FC4   302A 0004              					Move.w	csStart(A2),D0						; Get the start number to range check.
04FC8   5240                   					Addq.w	#1,D0								; If csStart < -1, then itÕs out of
04FCA   6B00 0116       050E2  					Bmi		DAFBSEBadExit						;	range.
04FCE
04FCE                          	;
04FCE                          	; In order to support 16bpp modes, we ALWAYS use indexed mode for SetEntries, since the real e
04FCE                          	;	be translated from a 5-bit value into an 8-bit index.  Note:  The UseTrans & UseSeq are actu
04FCE                          	;	same bit so that the indexed write routine works correctly.
04FCE                          	;
04FCE
04FCE   2012                   					MOVE.L	csTable(A2),D0						; Some (bad) people pass in an offset
04FD0   A055                   					_StripAddress								;	CTabHandleÕs MasterPointer here,
04FD2 G 2240                   					Move.l	D0,A1								;	so we clean them up.  Ugh!
04FD4
04FD4   3204                   					Move.w	D4,D1								; Make a copy of the number of entries, and
04FD6   5244                   					Addq	#1,D4								; 	make it counting for now.
04FD8
04FD8   7C00                   					Moveq	#0,D6								; Assume that we arenÕt doing 16bpp translations.
04FDA                          																;	(i.e., #UseTrans in D6 is clear).
04FDA
04FDA   302B 0024              					Move.w	saveMode(A3),D0						; Get the current mode.
04FDE G 0C40 0084              					Cmp.w	#FifthVidMode,D0					; If weÕre not doing 16bpp,
04FE2   661C            05000  					Bne.s	@IndexTest							;	then just go on.
04FE4   08C6 000C              					Bset	#UseTrans,D6						; Otherwise, remember that weÕre translating.
04FE8
04FE8   0885 000C              					Bclr	#UseSeq,D5							; If weÕre already indexed,
04FEC   6720            0500E  					Beq.s	@isIndex							;	then just go on.
04FEE   3401                   					Move.w	D1,D2								; Otherwise, sequence thru table from
04FF0   D46A 0004              					Add.w	csStart(A2),D2						; 	csStart thru csCount entries.
04FF4
04FF4                          	; The following code is BAD, BAD, BAD!  We should build our own table here so
04FF4                          	;	as to NOT mess up the userÕs data.  But all the previous Apple video drivers
04FF4                          	;	have done the same thing here, so weÕll continue the trend for now.
04FF4
04FF4   3382 1600              	@TableLoop		Move.w	D2,value(A1,D1*colorSpecSize)		; Write the index into the table.
04FF8   5342                   					Subq	#1,D2								; Decrement index.
04FFA G 51C9 FFF8       04FF4  					Dbra	D1,@TableLoop						;
04FFE   600E            0500E  					Bra.s	@isIndex
05000
05000   5244                   	@IndexTest		ADDQ	#1,D4								; make number of entries a counting number
05002   0805 000C              					BTST	#UseSeq,D5							; are we in sequential mode?
05006   6706            0500E  					BEQ.S	@isIndex							; if equal, we're indexed
05008   C8FC 0003              	@isSeq			MULU	#3,D4								; room for R,G,B in sequential mode
0500C   6002            05010  					BRA.S	@allocIt							; and continue
0500E   E544                   	@isIndex		ASL		#2,D4								; multiply times 4 for index,R,G,B
05010 G 9EC4                   	@allocIt		SUB.W	D4,SP								; allocate the buffer and save size in D4
05012
05012                          	;
05012                          	; Construct the stack version of the color table. It looks like a color table, but each of the
05012                          	;	components is only eight bits (rather than 16).  These will be expanded to longs when they
05012                          	;	are written to the hardware
05012                          	;
05012
05012 G 204F                   					MOVE.L	SP,A0								; copy the stack buffer pointer
05014   362A 0006              					MOVE.W	csCount(A2),D3						; get the number of entries again
05018
05018                          	;
05018                          	; Write the index if in indexed mode.  If in sequential mode, blow it off completely,
05018                          	;	since it won't be needed.
05018
05018                          	@SetupLoop
05018   3219                   					MOVE.W	(A1)+,D1							; get index
0501A
0501A   0805 000C              					BTST	#UseSeq,D5							; is it sequence mode?
0501E   660C            0502C  					BNE.S	@SLSeq								; yup, so go there
05020
05020   0806 000C              					Btst	#UseTrans,D6						; If weÕre not supposed to do the 5-to-8 translations,
05024   6704            0502A  					Beq.s	@WriteIndex							;	then just write out the index to the stack.
05026   6100 0796       057BE  					Bsr		DAFBTrans5to8						; Otherwise, do the translation.
0502A
0502A   10C1                   	@WriteIndex		MOVE.B	D1,(A0)+							; Write out index to stack table.
0502C
0502C                          	@SLSeq
0502C   3019                   					MOVE.W	(A1)+,D0							; get red
0502E   3219                   					MOVE.W	(A1)+,D1							; get green
05030   3419                   					MOVE.W	(A1)+,D2							; get blue
05032
05032   4A45                   					TST		D5									; test hi bit of the flags
05034   6A20            05056  					BPL.S	@NoGray								; if not set, don't luminence map
05036
05036   0805 000A              					BTST	#IsDirect,D5						; test for direct mode as well
0503A   661A            05056  					BNE.S	@NoGray								; don't allow luminence mapping in direct mode
0503C
0503C
0503C                          	; We're luminence mapping here.
0503C
0503C   C0FC 4CCC              					MULU	#$4CCC,D0							; multiply by red weight (0.30)
05040   C2FC 970A              					MULU	#$970A,D1							; multiply by green weight (0.59)
05044   C4FC 1C29              					MULU	#$1C29,D2							; multiply by blue weight (0.11)
05048   D081                   					ADD.L	D1,D0								; sum red and green
0504A   D082                   					ADD.L	D2,D0								; blue also
0504C   E9C0 0027              					BFEXTU	D0{0:D7},D0							; get gChanWidth bits for gamma table lookup
05050   3200                   					MOVE.W	D0,D1								; copy into green register
05052   3400                   					MOVE.W	D0,D2								; copy into blue register
05054
05054   600C            05062  					BRA.S	@WriteSP							; go on and write it in the stack buffer
05056
05056                          	@NoGray
05056   E9C0 0427              					BFEXTU	D0{16:D7},D0						; get gChanWidth bits of red
0505A   E9C1 1427              					BFEXTU	D1{16:D7},D1						; get gChanWidth bits of green
0505E   E9C2 2427              					BFEXTU	D2{16:D7},D2						; get gChanWidth bits of blue
05062
05062                          	@WriteSP
05062   0805 000D              					BTST	#IsMono,D5							; if monochrome display, write black to red & green
05066   6706            0506E  					BEQ.S	@Brighter							; if not, then set all three channels
05068   4218                   					CLR.B	(A0)+								; write black for red
0506A   4218                   					CLR.B	(A0)+								;	and green
0506C   6008            05076  					BRA.S	@Looper								; write out normal blue
0506E
0506E                          	@Brighter
0506E   10F4 0000              					MOVE.B	(A4,D0),(A0)+						; write gamma corrected red
05072   10F5 1000              					MOVE.B	(A5,D1),(A0)+						; write gamma corrected green
05076
05076                          	@Looper
05076   10F6 2000              					MOVE.B	(A6,D2),(A0)+						; write gamma corrected blue
0507A G 51CB FF9C       05018  					DBRA	D3,@SetupLoop						; and loop for each entry
0507E
0507E                          	;
0507E                          	; OK, the stack table is set up.  Now let's load the hardware.
0507E                          	;
0507E
0507E   362A 0006              					MOVE.W	csCount(A2),D3						; get the count again
05082 G 286B 0014              					MOVE.L	saveVDACBase(A3),A4					; get VDAC base
05086   49EC 0210              					LEA		ACDC_DataReg(A4),A4					; point to VDAC data register
0508A
0508A   7001                   					MOVEQ	#true32b,D0							; flip to 32-bit addressing mode
0508C   A05D                   					_SwapMMUMode								;
0508E   1F00                   					MOVE.B	D0,-(SP)							; save current addressing mode
05090
05090   41EF 0002              					LEA		2(SP),A0							; point to the stack buffer again
05094 G 7200                   					CLR.L	D1									; get the high 3 bytes of D1 clear
05096
05096 P 40E7                   					MOVE.W	SR,-(SP)							; preserve the status register
05098   6100 076C       05806  					BSR		DAFBWaitVSync						; wait for next blanking period (preserves A0/D0)
0509C
0509C   0805 000C              					BTST	#UseSeq,D5							; is it sequence mode?
050A0   6618            050BA  					BNE.S	DAFBSeqWrite						; yup, sequence mode, so go
050A2
050A2                          	;
050A2                          	; Here's the loop that actually writes to the hardware when in indexed mode.
050A2                          	;
050A2
050A2                          	DAFBIndexWrite
050A2   1218                   					MOVE.B	(A0)+,D1							; get the index
050A4   2941 FFF0              					MOVE.L	D1,ACDC_AddrReg-ACDC_DataReg(A4) 	; write the index value to the CLUT address
050A8   1218                   					MOVE.B	(A0)+,D1							; get red
050AA   2881                   					MOVE.L	D1,(A4)								; write red
050AC   1218                   					MOVE.B	(A0)+,D1							; get green
050AE   2881                   					MOVE.L	D1,(A4)								; write green
050B0   1218                   					MOVE.B	(A0)+,D1							; get blue
050B2   2881                   					MOVE.L	D1,(A4)								; write blue
050B4 G 51CB FFEC       050A2  					DBRA	D3,DAFBIndexWrite					; and loop
050B8   6018            050D2  					BRA.S	DAFBSEDone							;
050BA
050BA                          	;
050BA                          	; Write the translated starting position for sequence mode.
050BA                          	;
050BA
050BA                          	DAFBSeqWrite
050BA   322A 0004              					MOVE.W	csStart(A2),D1						; get sequence start address
050BE   2941 FFF0              					MOVE.L	D1,ACDC_AddrReg-ACDC_DataReg(A4)	; write the sequence start position
050C2
050C2                          	;
050C2                          	; Here's the loop that actually writes to the hardware when in sequence mode.
050C2                          	;
050C2
050C2                          	@SeqLoop
050C2   1218                   					MOVE.B	(A0)+,D1							; get red
050C4   2881                   					MOVE.L	D1,(A4)								; write red
050C6   1218                   					MOVE.B	(A0)+,D1							; get green
050C8   2881                   					MOVE.L	D1,(A4)								; write green
050CA   1218                   					MOVE.B	(A0)+,D1							; get blue
050CC   2881                   					MOVE.L	D1,(A4)								; write blue
050CE G 51CB FFF2       050C2  					DBRA	D3,@SeqLoop							; and loop
050D2
050D2                          	;
050D2                          	; Clean up and go home.
050D2                          	;
050D2
050D2                          	DAFBSEDone
050D2 P 46DF                   					MOVE	(SP)+,SR							; restore status register
050D4   101F                   					MOVE.B	(SP)+,D0							; get the previous mode back
050D6   A05D                   					_SwapMMUMode								;
050D8
050D8 G DEC4                   					ADD		D4,SP								; release stack buffer
050DA   4CDF 72F0              					MOVEM.L	(SP)+,A1/A4-A6/D4-D7				; restore registers
050DE   6000 FD7A       04E5A  					BRA		DAFBCtlGood							; return O-Tay!
050E2
050E2                          	DAFBSEBadExit
050E2   4CDF 72F0              					MOVEM.L	(SP)+,A1/A4-A6/D4-D7				; restore registers
050E6   6000 FD6E       04E56  					BRA		DAFBCtlBad							; return an error code
050EA
050EA                          					ENDWITH
050EA
050EA                          	DAFBSetGamma
050EA                          	;---------------------------------------------------------------------
050EA                          	;
050EA                          	;	Set the gamma table.  This call copies the supplied gTable so the
050EA                          	;		caller does not have to put the source on the system heap.  It
050EA                          	;		tests if the gamma table is exactly a match to the currently
050EA                          	;		connected monitor, or always allows it if the monitor number in
050EA                          	;		the FormulaData is -1.  If supplied gamma table ptr is NIL, then
050EA                          	;		it loads a linear gamma table into the private table
050EA                          	;
050EA                          	;		A0 = Ptr to private storage
050EA                          	;		A1 = Ptr to AuxDCE
050EA                          	;		A2 = Ptr to cs parameter record
050EA                          	;
050EA                          	;---------------------------------------------------------------------
050EA
050EA                          					WITH	DAFBVidPrivates
050EA
050EA                          	; Get new gamma table and check that we know how to handle it.
050EA
050EA   2012                   					MOVE.L	csGTable(A2),D0						; test for a NIL pointer
050EC   6700 00A4       05192  					BEQ		@LinearTab							; if so, then set up a linear gamma table
050F0 G 2440                   					MOVE.L	D0,A2								; get pointer to new gamma table
050F2
050F2   4A52                   					TST.W	gVersion(A2)						; version = 0?
050F4   6600 FD60       04E56  					BNE		DAFBCtlBad							; => no, return error
050F8   4A6A 0002              					Tst.w	gType(A2)							; Test the hardwareID.
050FC   6720            0511E  					Beq.s	@ChangeTable						; If 0, then accept a TFB-style gamma table.
050FE G 0C6A 001F 0002         					CMP.W	#drHwRasterOps24MxQ,gType(A2)		; type = DAFB?		jwh
05104   6600 FD50       04E56  					BNE		DAFBCtlBad							; => no, return error
05108   4A6A 0004              					TST.W	gFormulaSize(A2)					; if gType=DAFB, then check for monID in gFormulaData
0510C   6710            0511E  					BEQ.S	@ChangeTable						; if zero, then generic, so continue
0510E
0510E   302A 000C              					MOVE.W	gFormulaData(A2),D0					; get the monitor ID this table was intended for
05112   B06B 0026              					CMP.W	saveMonID(A3),D0					; is this the monitor?
05116   6706            0511E  					BEQ.S	@ChangeTable						; yes, so do it
05118   5240                   					ADDQ	#1,D0								; was it -1?
0511A   6600 FD3A       04E56  					BNE 	DAFBCtlBad							; nope, so must be wrong monitor
0511E
0511E                          	; If new table is a different size, reallocate memory.
0511E
0511E                          	@ChangeTable
0511E
0511E G 206B 000C              					MOVE.L	saveGammaPtr(A3),A0					; get current gamma in A0
05122   302A 0004              					MOVE	gFormulaSize(A2),D0					; get size of formula in new
05126   B068 0004              					CMP		gFormulaSize(A0),D0					; same as current gamma table
0512A   6616            05142  					BNE.S	@GetNew								; =>no, resize pointer
0512C   302A 0006              					MOVE	gChanCnt(A2),D0						; get number of tables in new
05130   B068 0006              					CMP		gChanCnt(A0),D0						; same as current gamma table?
05134   673A            05170  					BEQ.S	@SizeOK								; => yes, data size ok
05136   6E0A            05142  					BGT.S	@GetNew								; => new one is bigger, save old one
05138 G 206B 0010              	@NewSize		Move.l	saveGamDispPtr(A3),A0				; if new one is smaller,
0513C   A01F                   					_DisposPtr									;	dispose old one
0513E   42AB 0010              					CLR.L	saveGamDispPtr(A3)					; flag it's been disposed
05142
05142   302A 0008              	@GetNew			MOVE	gDataCnt(A2),D0						; get number of entries
05146   C0EA 0006              					MULU	gChanCnt(A2),D0						; multiply by number of tables
0514A   D06A 0004              					ADD		gFormulaSize(A2),D0					; add size of formula data
0514E G 0640 000C              					ADD		#gFormulaData,D0					; add gamma table header size
05152   A51E                   					_NewPtr ,Sys								; and allocate a new pointer
05154   6600 FD00       04E56  					BNE		DAFBCtlBad							; => unable to allocate storage
05158
05158   202B 0010              					MOVE.L	saveGamDispPtr(A3),D0				; get old gamma table
0515C   2748 000C              					MOVE.L	A0,saveGammaPtr(A3)					; save new gamma table
05160   4A80                   					TST.L	D0									; was there an old one?
05162   670C            05170  					BEQ.S	@SizeOK								; => no, already disposed
05164 G 2040                   					MOVE.L	D0,A0								; else get old table
05166   A01F                   					_DisposPtr									; and dispose of old gamma table
05168
05168 G 206B 000C              					MOVE.L	saveGammaPtr(A3),A0					; get new gamma table back
0516C   2748 0010              					Move.l	A0,saveGamDispPtr(A3)				; save it for disposal
05170
05170                          	; Copy the gamma table header.
05170
05170   302A 0006              	@SizeOK			MOVE	gChanCnt(A2),D0						; get number of tables
05174   322A 0004              					MOVE	gFormulaSize(A2),D1					; get size of formula data
05178   342A 0008              					MOVE	gDataCnt(A2),D2						; get number of entries
0517C   20DA                   					MOVE.L	(A2)+,(A0)+							; copy gamma header
0517E   20DA                   					MOVE.L	(A2)+,(A0)+							; which is
05180   20DA                   					MOVE.L	(A2)+,(A0)+							; 	12 bytes long
05182
05182                          	; Copy the data.
05182
05182   C4C0                   					MULU	D0,D2								; multiply by number of tables
05184   D441                   					ADD		D1,D2								; add in size of formula data
05186   5342                   					SUBQ	#1,D2								; get count - 1
05188   101A                   	@NxtByte		MOVE.B	(A2)+,D0							; get a byte
0518A   10C0                   					MOVE.B	D0,(A0)+							; move a byte
0518C G 51CA FFFA       05188  					DBRA	D2,@NxtByte							; => repeat for all bytes
05190
05190   6028            051BA  					Bra.s	@GammaDone							; Check to see if itÕs a direct device.
05192
05192                          	;
05192                          	; Set up a linear gamma table.  To prevent memory thrash, build this new one
05192                          	;	the same size as the existing one (one or three channel).
05192                          	;
05192
05192                          	@LinearTab
05192
05192 G 206B 000C              					MOVE.L	saveGammaPtr(A3),A0					; get current gamma in A0
05196   3028 0004              					MOVE.W	gFormulaSize(A0),D0					; get size of formula in new
0519A   3428 0006              					MOVE.W	gChanCnt(A0),D2						; get the number of tables
0519E   5342                   					SUBQ	#1,D2								; zero based, of course
051A0   3628 0008              					Move.w	gDataCnt(A0),D3						; get the number of entries
051A4   5343                   					Subq	#1,D3								; zero base
051A6 G 41E8 000C              					ADDA	#gFormulaData,A0					; point to tables
051AA   D0C0                   					ADDA	D0,A0								; point past monID, if present
051AC   3003                   	@ChanLoop		MOVE.W	D3,D0								; loop count within each channel
051AE   1080                   	@entryLoop		MOVE.B	D0,(A0)								; write this value out
051B0   4618                   					Not.b	(A0)+								; invert to make table ramp properly
051B2 G 51C8 FFFA       051AE  					DBRA	D0,@entryLoop						; for each entry in channel
051B6 G 51CA FFF4       051AC  					DBRA	D2,@ChanLoop						; and each channel
051BA
051BA                          	@GammaDone
051BA   082B 000A 0020         					BTST	#IsDirect,GFlags(A3)				; are we in a direct mode?
051C0   6704            051C6  					BEQ.S	@Out								; if not, then we're done
051C2   6100 0950       05B14  					BSR		DAFBDirectCLUTSet					; if so, then set up direct CLUT ramps
051C6
051C6                          	@Out
051C6   6000 FC92       04E5A  					BRA		DAFBCtlGood							; => return no error
051CA
051CA                          					ENDWITH
051CA
051CA                          	DAFBGrayPage
051CA                          	;---------------------------------------------------------------------
051CA                          	;
051CA                          	;	Clear the specified page in the current mode to gray
051CA                          	;
051CA                          	;		A0 = Ptr to private storage
051CA                          	;		A1 = Ptr to AuxDCE
051CA                          	;		A2 = Ptr to cs parameter record
051CA                          	;		A3 = Ptr to driver privates
051CA                          	;
051CA                          	;---------------------------------------------------------------------
051CA
051CA                          					WITH DAFBVidPrivates
051CA
051CA   322B 0024              					MOVE	saveMode(A3),D1						; D1 = mode
051CE   6100 05FE       057CE  					BSR		DAFBChkMode							; convert mode to depth in D1
051D2   6600 FC82       04E56  					BNE		DAFBCtlBad							; => not a valid depth
051D6
051D6   302A 0006              					MOVE	csPage(A2),D0						; D0 = page
051DA   6600 FC7A       04E56  					BNE 	DAFBCtlBad							; => not a valid page
051DE
051DE   6100 082C       05A0C  					BSR		DAFBGrayScreen						; paint the screen gray
051E2
051E2   082B 000A 0020         					BTST	#IsDirect,GFlags(A3)				; are we in a direct mode?
051E8   6704            051EE  					BEQ.S	@Out								; if not, then we're done
051EA   6100 0928       05B14  					BSR		DAFBDirectCLUTSet					; if so, then set up direct CLUT ramps
051EE                          	@Out
051EE   6000 FC6A       04E5A  					BRA		DAFBCtlGood							; => return no error
051F2
051F2                          					ENDWITH
051F2
051F2                          	DAFBSetGray
051F2                          	;---------------------------------------------------------------------
051F2                          	;
051F2                          	;	Set luminance mapping on (csMode = 1) or off (csMode = 0)
051F2                          	;
051F2                          	;   When luminance mapping is on, RGB values passed to setEntries are mapped
051F2                          	; 	to grayscale equivalents before they are written to the CLUT.
051F2                          	;
051F2                          	;		A1 = Ptr to AuxDCE
051F2                          	;		A2 = Ptr to cs parameter record
051F2                          	;
051F2                          	;---------------------------------------------------------------------
051F2
051F2                          					WITH	DAFBVidPrivates
051F2
051F2   082B 000D 0020         					BTST	#IsMono,GFlags(A3)					; is this a mono-only monitor?
051F8   6704            051FE  					BEQ.S	@1									; if not, then go ahead
051FA   14BC 0001              					MOVE.B	#1,csMode(A2)						; always turn on for mono devices
051FE   7200                   	@1				MOVEQ	#0,D1								; set up for BFEXTU to point to GrayFlag
05200   6104            05206  					BSR.S	DAFBSetIntCom						; call common code
05202   6000 FC56       04E5A  					BRA		DAFBCtlGood							; all done
05206
05206                          	;
05206                          	; This shared routine setup up a flag in GFlags.  It takes a pointer to
05206                          	;	private storage in A3, and the bit field start location in D1.
05206                          	;
05206
05206                          	DAFBSetIntCom
05206   1012                   					MOVE.B	csMode(A2),D0						; get boolean
05208   EFEB 0841 0020         					BFINS	D0,GFlags(A3){D1:1}					; set flag bit
0520E   4E75                   					RTS											; and return
05210
05210                          					ENDWITH
05210
05210                          	DAFBSetInterrupt
05210                          	;---------------------------------------------------------------------
05210                          	;
05210                          	;	Enable (csMode = 0) or disable (csMode = 1) VBL interrupts
05210                          	;
05210                          	;   As a future performance enhancement, interrupts on the card can be
05210                          	;	disabled or enabled from software. For instance, if the cursor is
05210                          	;	not on a screen, and there is nothing in the Slot Interrupt Queue
05210                          	;	for that device, interrupts may be disabled reducing interrupt
05210                          	;	overhead for the system.
05210                          	;
05210                          	;	The slot interrupt queue element is always allocated by the Open call.
05210                          	;	This routine just inserts and removes it from the slot interrupt task queue.
05210                          	;
05210                          	;		A1 = Ptr to AuxDCE
05210                          	;		A2 = Ptr to cs parameter record
05210                          	;		A3 = Ptr to private storage
05210                          	;
05210                          	;---------------------------------------------------------------------
05210
05210                          					WITH	VDPageInfo,SlotIntQElement,DAFBVidPrivates
05210
05210   7201                   					MOVEQ	#1,D1								; set up for BFEXTU to point to IntDisFlag
05212   61F2            05206  					BSR.S 	DAFBSetIntCom						; call common code
05214   660A            05220  					BNE.S	@DAFBDisableThem					; if zero, then enable
05216
05216                          	; This code enables interrupts and installs the interrupt handler.
05216                          	;
05216   6136            0524E  					BSR.S	DAFBEnableVGuts						; call common code
05218   6600 FC3C       04E56  					BNE		DAFBCtlBad							; error, flag problem
0521C   6000 FC3C       04E5A  					BRA		DAFBCtlGood							; and go home
05220
05220                          	; This code disables VBL interrupts, then removes the interrupt handler.
05220                          	;
05220                          	@DAFBDisableThem
05220   6104            05226  					BSR.S	DAFBDisableVGuts					; jump to the disabling utility
05222   6000 FC36       04E5A  					BRA		DAFBCtlGood							; all done
05226
05226                          	; The following two routines are common code shared between the Open/Close calls
05226                          	;	and the SetInterrupt control call.
05226                          	;
05226                          	DAFBDisableVGuts
05226
05226   7001                   					MOVEQ	#true32b,D0							; flip to 32-bit addressing mode
05228   A05D                   					_SwapMMUMode								;
0522A   1F00                   					MOVE.B	D0,-(SP)							; save current addressing mode
0522C
0522C P 40E7                   					MOVE.W	SR,-(SP)							; preserve the status register
0522E   6100 05D6       05806  					BSR		DAFBWaitVSync						; to be safe, wait for the next VBL
05232
05232 G 206B 0018              					MOVE.L	saveDAFBBase(A3),A0					; point to the DAFB base
05236   42A8 0104              					CLR.L	Swatch_IntMsk(A0)					; set slot 0 interrupt disabled
0523A P 46DF                   					MOVE	(SP)+,SR							; re-enable cursor interrupts
0523C
0523C   101F                   					MOVE.B	(SP)+,D0							; get back addressing mode
0523E   A05D                   					_SwapMMUMode								;
05240
05240   7000                   					MOVEQ	#0,D0								; parameter size to SInstall is not byte sized so clr whole long
05242   1029 0028              					MOVE.B	dctlSlot(A1),D0						; setup slot # for _SIntRemove
05246 G 206B 0008              					MOVE.L	saveSQElPtr(A3),A0					; get the SQ element pointer
0524A   A076                   					_SIntRemove									; remove the interrupt handler
0524C   4E75                   					RTS
0524E
0524E                          	DAFBEnableVGuts												;
0524E
0524E G 206B 0008              					MOVE.L	saveSQElPtr(A3),A0					; get the queue element
05252   45FA 095E       05BB2  					LEA		DAFBBeginIH,A2						; save Pointer to interrupt handler
05256   317C 0006 0004         					MOVE.W	#SIQType,SQType(A0)					; setup queue ID
0525C   214A 0008              					MOVE.L	A2,SQAddr(A0)						; setup int routine address
05260   214B 000C              					MOVE.L	A3,SQParm(A0)						; pass pointer to privates as the parameter
05264   7000                   					MOVEQ	#0,D0								; parameter size to SInstall is not byte sized so clr whole long
05266   1029 0028              					MOVE.B	dctlSlot(A1),D0						;
0526A   A075                   					_SIntInstall								; and do install
0526C   662A            05298  					BNE.S 	@IntBad
0526E
0526E   7001                   					MOVEQ	#true32b,D0							; flip to 32-bit addressing mode
05270   A05D                   					_SwapMMUMode								;
05272   1F00                   					MOVE.B	D0,-(SP)							; save current addressing mode
05274
05274 G 206B 0018              					MOVE.L	saveDAFBBase(A3),A0					; point to the DAFB base
05278
05278                          	; DAFBÕs vertical timing generator is driven from a clock which is only half the frequency of
05278                          	;	timing generator clock.  Therefore, all the vertical timing registers are double-sized.  How
05278                          	;	CrsrLine register is specified in whole lines.  So, in order to get VBL happening at just th
05278                          	;	time, we must divide VFP by 2.
05278                          	;
05278   2028 0160              					Move.l	Swatch_VFP(A0),D0					; Get current VFP.
0527C   0280 0000 0FFF         					Andi.l	#$FFF,D0							; 	Strip off junk.
05282   E288                   					Lsr.l	#1,D0								;	Divide by 2.
05284   5240                   					Addq	#1,D0								; 	Add 1.
05286   2140 0118              					Move.l	D0,Swatch_CrsrLine(A0)				; Set interrupt to occur AFTER VFP, and
0528A   217C 0000 0004         					Move.l	#dafbEnableVInts,Swatch_IntMsk(A0)	; turn on interrupt.
             0104 
05292
05292   101F                   					MOVE.B	(SP)+,D0							; get addressing mode back
05294   A05D                   					_SwapMMUMode								;
05296
05296   B040                   					CMP		D0,D0								; clear z-bit for good result
05298   4E75                   	@IntBad			RTS											; return home (if bad, z-bit is set above, so just leave) <8>
0529A
0529A                          					ENDWITH
0529A
0529A                          	DAFBDirectSetEntries
0529A                          	;---------------------------------------------------------------------
0529A                          	;
0529A                          	;	Change the CLUT in a direct mode.
0529A                          	;
0529A                          	;		A1 = Ptr to AuxDCE
0529A                          	;		A2 = Ptr to cs parameter record
0529A                          	;		A3 = Ptr to private storage
0529A                          	;
0529A                          	;	This routine allows knowledgeable programs modify the contents
0529A                          	;	of the CLUT in direct modes (usually for limited color previewing).
0529A                          	;	It takes the same parameter block as SetEntries, but SetEntries
0529A                          	;	intentionally does not operate when the card is in a direct pixMode.
0529A                          	;	This routine takes the same data and operates ONLY when in direct
0529A                          	;	modes.  It calls the same SetEntries guts as the regular routine.
0529A                          	;
0529A                          	;---------------------------------------------------------------------
0529A
0529A   082B 000A 0020         					BTST	#IsDirect,GFlags(A3)				; are we in a direct mode?
052A0   6700 FBB4       04E56  					BEQ		DAFBCtlBad							; error if not
052A4   6000 FCBA       04F60  					BRA		DAFBSEGuts							; jump to SetEntries internals if it's OK
052A8
052A8                          	DAFBSetDefaultMode
052A8                          	;---------------------------------------------------------------------
052A8                          	;
052A8                          	;	Write the card default mode into slot pRAM.
052A8                          	;
052A8                          	;		A1 = Ptr to AuxDCE
052A8                          	;		A2 = Ptr to cs parameter record
052A8                          	;		A3 = Ptr to private storage
052A8                          	;
052A8                          	;	This routine is called by Monitors when somebody selects an alternate
052A8                          	;	video mode family in the Options dialog.
052A8                          	;
052A8                          	;---------------------------------------------------------------------
052A8
052A8                          					WITH 	spBlock,DAFBVidPrivates,SP_Params
052A8
052A8                          	;
052A8                          	; Set up a slot parameter block on the stack.
052A8                          	;
052A8
052A8 G 9EFC 0038              					SUBA		#spBlockSize,SP					; make an slot parameter block on stack
052AC G 204F                   					MOVE.L		SP,A0							; get pointer to parm block now
052AE   1169 0028 0031         					MOVE.B		dCtlSlot(A1),spSlot(A0)			; put slot in pBlock
052B4   4228 0033              					CLR.B		spExtDev(A0)					; external device = 0
052B8
052B8                          	;
052B8                          	; Read the slot pRAM to determine what the currently saved mode is.  The first
052B8                          	;	word is the board ID, followed by the default screen depth.  Built-in video keeps the video
052B8                          	;	sRsrc spID in VendorUse2.
052B8                          	;
052B8
052B8 G 514F                   					SUBA		#SizesPRAMRec,SP				; allocate block for pRAM record
052BA   208F                   					MOVE.L		SP,spResult(A0)					; point to it
052BC                          					_sReadPRAMRec								; read it
052BC   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
052BE   A06E                  1	  				_SlotManager
052C0
052C0                          	;
052C0                          	; Since PrimaryInit relies on the default mode being set correctly, we check to see that
052C0                          	;	the mode to be set is actually valid.  Monitors can only see valid sRsrcIDs, so
052C0                          	;	it probably wonÕt cause a problem.  But we should check it anyway for unsavory
052C0                          	;	applications.
052C0                          	;
052C0
052C0   1152 0032              					Move.b		csMode(A2),spID(A0)				; Look for the passed in spID.
052C4   42A8 0018              					Clr.l		spParamData(A0)					; Clear the fNext flag; we want THIS sRsrc.
052C8   0028 0003 001B         					Ori.b		#(1<<fall)|\					; Search for both enabled/disabled sRsrcÕs
                               								(1<<foneslot),spParamData+3(A0)	; Only search in our slot.
052CE                          					_GetsRsrc									; Do it.
052CE   700B                  1	  				MOVEQ   	#sGetSRsrc,D0
052D0   A06E                  1	  				_SlotManager
052D2   6664            05338  					Bne.s		@BadExit						; If failed, quit.
052D4
052D4   3028 0028              					Move.w		spCategory(A0),D0				; Get the category.
052D8 G 0C40 0003              					Cmp.w		#catDisplay,D0					; If itÕs not catDisplay,
052DC   665A            05338  					Bne.s		@BadExit						;	then quit.
052DE   3028 002A              					Move.w		spCType(A0),D0					; Get the type.
052E2 G 0C40 0001              					Cmp.w		#typVideo,D0					; If itÕs not typVideo,
052E6   6650            05338  					Bne.s		@BadExit						;	then quit.
052E8   3028 002C              					Move.w		spDrvrSw(A0),D0					; Get the software kind.
052EC G 0C40 0001              					Cmp.w		#drSwApple,D0					; If itÕs not drSwApple,
052F0   6646            05338  					Bne.s		@BadExit						;	then quit.
052F2   3028 002E              					Move.w		spDrvrHw(A0),D0					; Get the hardware ID.
052F6 G 0C40 001F              					Cmp.w		#drHwRasterOps24MxQ,D0			; If itÕs not drHwRasterOps24MxQ,		jwh
052FA   663C            05338  					Bne.s		@BadExit						;	then quit.
052FC
052FC                          	;
052FC                          	; It is very important that Monitors (or someone) invalidate and setup the screen resource
052FC                          	;   if this call is exercised.  Monitors needs to verify (and potentially re-write to pRAM)
052FC                          	;	the proper screen depth in the new world.
052FC                          	;
052FC   082B 000A 0020         					Btst		#IsDirect,GFlags(A3)			; If weÕre not in a direct mode,
05302   6720            05324  					Beq.s		@WriteIt						;	just go on.
05304
05304   1012                   					Move.b		csMode(A2),D0					; Get the mode weÕre going to.
05306 G 0C00 008C              					Cmp.b		#sRsrc_Vid_DAFB_NTSCconvST,D0	; If weÕre going to a convolved mode,
0530A   6712            0531E  					Beq.s		@ConvFix						;	fix the depth.
0530C G 0C00 008E              					Cmp.b		#sRsrc_Vid_DAFB_NTSCconvFF,D0	;
05310   670C            0531E  					Beq.s		@ConvFix						;
05312 G 0C00 009E              					Cmp.b		#sRsrc_Vid_DAFB_PALconvST,D0	;
05316   6706            0531E  					Beq.s		@ConvFix						;
05318 G 0C00 00A0              					Cmp.b		#sRsrc_Vid_DAFB_PALconvFF,D0	;
0531C   6606            05324  					Bne.s		@WriteIt						;
0531E   1F7C 0083 0002         	@ConvFix		Move.b		#FourthVidMode,SP_Depth(Sp)		; Reset the depth to indexed.
05324
05324   1F52 0003              	@WriteIt		MOVE.B		csMode(A2),SP_LastConfig(SP)	; write the mode into pRAM buffer
05328   214F 0004              					MOVE.L		SP,spsPointer(A0)				; set up parameter block
0532C                          					_sPutPRAMRec								; write the new record out
0532C   7012                  1	  				MOVEQ   	#sPutPRAMRec,D0
0532E   A06E                  1	  				_SlotManager
05330
05330 G 4FEF 0040              	@GoodExit		ADDA		#SizesPRAMRec+spBlockSize,SP	; Deallocate buffer and
05334   6000 FB24       04E5A  					BRA			DAFBCtlGood						;	return good result.
05338
05338 G 4FEF 0040              	@BadExit		Adda		#SizesPRAMRec+spBlockSize,SP	; Deallocate buffer and
0533C   6000 FB18       04E56  					Bra			DAFBCtlBad						;	return bad result.
05340
05340                          					ENDWITH
05340
05340                          	DAFBSetSyncOnGreen
05340                          	;---------------------------------------------------------------------
05340                          	;
05340                          	;	Enable (csMode = 0) or disable (csMode = non-zero) the sync on green.
05340                          	;
05340                          	;		A1 = Ptr to AuxDCE
05340                          	;		A2 = Ptr to cs parameter record
05340                          	;		A3 = Ptr to private storage
05340                          	;
05340                          	;---------------------------------------------------------------------
05340
05340                          					With 	spBlock,DAFBVidPrivates,SP_Params
05340
05340                          	;
05340                          	; First, set up a slot parameter block on the stack.
05340                          	;
05340
05340 G 9EFC 0038              					Suba	#spBlockSize,Sp						; Make a SpBlock on the stack.
05344 G 204F                   					Move.l	Sp,A0								; Get a pointer to it into A0.
05346   1169 0028 0031         					Move.b	dCtlSlot(A1),spSlot(A0)				; Set it up.
0534C   4228 0033              					Clr.b	spExtDev(A0)
05350
05350                          	;
05350                          	; Next, read the current pRam record so that we can write it back if necessary.
05350                          	;
05350
05350 G 514F                   					Suba	#SizesPRAMRec,Sp					; Make an sPRAM block on the stack.
05352   208F                   					Move.l	Sp,spResult(A0)						; Point to it.
05354                          					_sReadPRamRec								; Get pRAM.
05354   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
05356   A06E                  1	  				_SlotManager
05358
05358                          	;
05358                          	; See what we need to doÉ
05358                          	;
05358
05358   4A12                   					Tst.b	csMode(A2)							; If csMode = 0, then we are
0535A   6718            05374  					Beq.s	@EnableSyncOnGreen					;	enabling sync on green.
0535C
0535C   082B 0008 0020         					Btst	#syncOnGreen,GFlags(A3)				; If weÕre already NOT putting sync on green,
05362   6750            053B4  					Beq.s	@Done								;	then thereÕs nothing left to do.
05364   08AB 0008 0020         					Bclr	#syncOnGreen,GFlags(A3)				; Otherwise, set up the GFlags field,
0536A   08AF 0000 0006         					Bclr	#spSyncOnGreen,SP_Flags(Sp)			;	the pRam record, and
05370   7200                   					Moveq	#0,D1								; 	the toggle bit.
05372   6016            0538A  					Bra.s	@SyncCommon							;
05374
05374                          	@EnableSyncOnGreen
05374   082B 0008 0020         					Btst	#syncOnGreen,GFlags(A3)				; If weÕre already putting sync on green,
0537A   6638            053B4  					Bne.s	@Done								;	then thereÕs nothing left to do.
0537C   08EB 0008 0020         					Bset	#syncOnGreen,GFlags(A3)				; Otherwise, set up the GFlags field
05382   08EF 0000 0006         					Bset	#spSyncOnGreen,SP_Flags(Sp)			;	the pRam record, and
05388   7201                   					Moveq	#1,D1								;	the toggle bit.
0538A
0538A                          	@SyncCommon
0538A   214F 0004              					Move.l	Sp,spsPointer(A0)					; Set up to whack pRam.
0538E                          					_sPutPRAMRec								; Whack it.
0538E   7012                  1	  				MOVEQ   	#sPutPRAMRec,D0
05390   A06E                  1	  				_SlotManager
05392
05392   7001                   					Moveq	#true32b,D0							; Set up to flip into 32-bit addressing mode.
05394   A05D                   					_SwapMMUMode								; Do flip.
05396   1F00                   					Move.b	D0,-(Sp)							; Save previous mode for later.
05398
05398 P 40E7                   					Move.w	Sr,-(Sp)							; Save the current interrupt level.
0539A   6100 046A       05806  					Bsr		DAFBWaitVSync						; Wait for VBL at level 2.
0539E P 46DF                   					Move.w	(Sp)+,Sr							; Restore interrupt level.
053A0
053A0 G 206B 0018              					Move.l	saveDAFBBase(A3),A0					; Get DAFBBase into A0.
053A4   2028 000C              					Move.l	DAFB_ClkCfg(A0),D0					; Get the current clock config value.
053A8   EFC0 1581              					Bfins	D1,D0{dafbSyncOnGreen:1}			; Toggle the sync-on-green bit appropriately,
053AC   2140 000C              					Move.l	D0,DAFB_ClkCfg(A0)					;	apply it.
053B0
053B0   101F                   					Move.b	(Sp)+,D0							; Set up to switch back to prev mode,
053B2   A05D                   					_SwapMMUMode								; 	and do it.
053B4
053B4 G 4FEF 0040              	@Done			Adda	#SizesPRAMRec+spBlockSize,Sp		; Restore stack, and
053B8   6000 FAA0       04E5A  					Bra		DAFBCtlGood							;	go home.
053BC
053BC                          					EndWith
053BC
053BC                          	DAFBSetPageMode
053BC                          	;---------------------------------------------------------------------
053BC                          	;
053BC                          	;	Enable (csMode = 0) or disable (csMode = non-zero) Page Mode.
053BC                          	;
053BC                          	;		A1 = Ptr to AuxDCE/ptr to DAFBBase addr (not restored)
053BC                          	;		A2 = Ptr to cs parameter record
053BC                          	;		A3 = Ptr to private storage
053BC                          	;
053BC                          	;---------------------------------------------------------------------
053BC
053BC                          					With 	spBlock,DAFBVidPrivates,SP_Params
053BC
053BC                          	;
053BC                          	; First, set up a slot parameter block on the stack.
053BC                          	;
053BC
053BC G 9EFC 0038              					Suba	#spBlockSize,Sp						; Make an SpBlock on the stack.
053C0 G 204F                   					Move.l	Sp,A0								; Get a pointer to it into A0.
053C2   1169 0028 0031         					Move.b	dCtlSlot(A1),spSlot(A0)				; Set it up.
053C8   4228 0033              					Clr.b	spExtDev(A0)
053CC
053CC                          	;
053CC                          	; Next, read the current pRam so that we can set it appropriatelyÉ
053CC                          	;
053CC
053CC G 514F                   					Suba	#SizesPRAMRec,Sp					; Make an sPRAM block on the stack.
053CE   208F                   					Move.l	Sp,spResult(A0)						; Point to it.
053D0                          					_sReadPRamRec								; Get pRAM.
053D0   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
053D2   A06E                  1	  				_SlotManager
053D4
053D4   7001                   					Moveq	#true32b,D0							; Set up to switch into 32-bit mode,
053D6   A05D                   					_SwapMMUMode								; 	do switch, and
053D8   1200                   					Move.b	D0,D1								; 	save previous mode.
053DA
053DA G 226B 0018              					Move.l	saveDAFBBase(A3),A1					; Get DAFBBase into A1 for below.
053DE
053DE                          	;
053DE                          	; See what we need to doÉ
053DE                          	;
053DE
053DE   4A12                   					Tst.b	csMode(A2)							; If csMode = 0, then we are
053E0   670C            053EE  					Beq.s	@EnablePageMode						;	enabling page mode.
053E2
053E2 G 422B 0022              					Move.b	#0,pageModeSet(A3)					; Say page mode is disaabled.
053E6   08AF 0001 0006         					Bclr	#spPageMode,SP_Flags(Sp)			; Flip pRam bit.
053EC   600C            053FA  					Bra.s	@EndPageMode						;
053EE
053EE   177C 0001 0022         	@EnablePageMode	Move.b	#1,pageModeSet(A3)					; Say page mode is enabled.
053F4   08EF 0001 0006         					Bset	#spPageMode,SP_Flags(Sp)			; Flip pRam bit.
053FA
053FA   214F 0004              	@EndPageMode	Move.l	Sp,spsPointer(A0)					; Set up to whack pRam.
053FE                          					_sPutPRAMRec								; Whack it.
053FE   7012                  1	  				MOVEQ   	#sPutPRAMRec,D0
05400   A06E                  1	  				_SlotManager
05402
05402 G 4FEF 0040              					Adda	#SizesPRAMRec+spBlockSize,Sp		; Restore stack.
05406
05406   2029 0010              					Move.l	DAFB_Config(A1),D0					; Read the DAFBConfig register.
0540A   E9C0 07C1              					Bfextu	D0{dafbWrdIntBit:1},D0				; If word-interleave is on
0540E   660A            0541A  					Bne.s	@DisablePageMode					;	then ALWAYS disable page mode.
05410   4A2B 0022              					Tst.b	pageModeSet(A3)						; If weÕre not supposed to enable page mode,
05414   6704            0541A  					Beq.s	@DisablePageMode					;	then disable it.
05416   7001                   					Moveq	#1,D0								; Otherwise, set up to enable page mode,
05418   6002            0541C  					Bra.s	@HitPageMode						;	and do it.
0541A                          	@DisablePageMode
0541A   7000                   					Moveq	#0,D0								; Set up to disable page mode, and
0541C   2340 0018              	@HitPageMode	Move.l	D0,DAFB_PgMdEn(A1)					;	and do it.
05420
05420   1001                   	@ExitPageMode	Move.b	D1,D0								; Set up to switch back into previous mode,
05422   A05D                   					_SwapMMUMode								;	do switch, and
05424   6000 FA34       04E5A  					Bra		DAFBCtlGood							;	leave.
05428
05428                          					EndWith
05428
05428                          	DAFBSetNoConnect
05428                          	;---------------------------------------------------------------------
05428                          	;
05428                          	;	SetNoConnect set up the no-connect pRam byte to contain
05428                          	;		a valid sense code if a valid sense code is passed
05428                          	;		in (csMode).
05428                          	;
05428                          	;		A1 = Ptr to AuxDCE/Ptr to DAFBMonIDs table (not restored)
05428                          	;		A2 = Ptr to cs parameter record
05428                          	;		A3 = Ptr to private storage
05428                          	;
05428                          	;---------------------------------------------------------------------
05428
05428                          					With 	spBlock,DAFBVidPrivates,SP_Params
05428
05428                          	;
05428                          	; First, set up a slot parameter block on the stack.
05428                          	;
05428
05428 G 9EFC 0038              					Suba	#spBlockSize,Sp						; Make an SpBlock on the stack.
0542C G 204F                   					Move.l	Sp,A0								; Get a pointer to it into A0.
0542E   1169 0028 0031         					Move.b	dCtlSlot(A1),spSlot(A0)				; Set it up.
05434   4228 0033              					Clr.b	spExtDev(A0)
05438
05438                          	;
05438                          	; Next, read the current pRam so that we can set it appropriatelyÉ
05438                          	;
05438
05438 G 514F                   					Suba	#SizesPRAMRec,Sp					; Make an sPRAM block on the stack.
0543A   208F                   					Move.l	Sp,spResult(A0)						; Point to it.
0543C                          					_sReadPRamRec								; Get pRAM.
0543C   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
0543E   A06E                  1	  				_SlotManager
05440
05440                          	;
05440                          	; See what we need to doÉ
05440                          	;
05440
05440   1212                   					Move.b	csMode(A2),D1						; Get the monID.
05442 G 0C01 0007              					Cmp.b	#indexedNoConnect,D1				; If itÕs one of the no-connect codes,
05446   6770            054B8  					Beq.s	@ClearIt							;	then zero-out the no-connect pRam byte.
05448 G 0C01 003F              					Cmp.b	#extendedNoConnect,D1				;
0544C   676A            054B8  					Beq.s	@ClearIt							;
0544E
0544E   43FA F7AE       04BFE  					Lea		DAFBMonIDs,A1						; Get ptr to DAFBMonIDs table.
05452   3019                   					Move.w	(A1)+,D0							; Get count of modes.
05454
05454   1219                   	@ValidLoop		Move.b	(A1)+,D1							; Get an ID from the table.
05456   B212                   					Cmp.b	csMode(A2),D1						; If we have a match,
05458   6706            05460  					Beq.s	@FoundMatch							;	say so.
0545A G 51C8 FFF8       05454  					Dbra	D0,@ValidLoop						; Otherwise, keep looping thru
0545E   606C            054CC  					Bra.s	@MonIDNotValid						; 	table until no match is found.
05460
05460   4A2A 0001              	@FoundMatch		Tst.b	csMode+1(A2)						; If this is not an extended code,
05464   6746            054AC  					Beq.s	@WriteIt							; 	then just do write.
05466
05466 G 0C01 0017              					Cmp.b	#extendedSenseVGA,D1				; Is it the VGA code?
0546A   6606            05472  					Bne.s	@TryPal								; Nope, try PAL.
0546C   123C 0008              					Move.b	#indexedSenseVGA,D1
05470   603A            054AC  					Bra.s	@WriteIt
05472
05472 G 0C01 0030              	@TryPal			Cmp.b	#extendedSensePAL,D1				; Is it the PAL code?
05476   6606            0547E  					Bne.s	@TryPALBox							; Nope, try PAL encoder box.
05478   123C 0009              					Move.b	#indexedSensePAL,D1
0547C   602E            054AC  					Bra.s	@WriteIt
0547E
0547E G 0C01 0000              	@TryPALBox		Cmp.b	#extendedSensePALBox,D1				; Is it the PAL encoder box code?
05482   6606            0548A  					Bne.s	@TryNTSC							; Nope, try NTSC encoder box.
05484   123C 0009              					Move.b	#indexedSensePAL,D1
05488   6022            054AC  					Bra.s	@WriteIt
0548A
0548A G 0C01 0014              	@TryNTSC		Cmp.b	#extendedSenseNTSC,D1				; Is it the NTSC encoder box code?
0548E   6606            05496  					Bne.s	@TryGF								; Nope, try GoldFish.
05490   123C 0004              					Move.b	#indexedSenseNTSC,D1
05494   6016            054AC  					Bra.s	@WriteIt
05496
05496 G 0C01 002D              	@TryGF			Cmp.b	#extendedSenseGF,D1					; Is it the GoldFish?
0549A   6606            054A2  					Bne.s	@Try19								; Nope, try 19Ó.
0549C   123C 000A              					Move.b	#indexedSenseGF,D1					;
054A0   600A            054AC  					Bra.s	@WriteIt
054A2
054A2 G 0C01 003A              	@Try19			Cmp.b	#extendedSense19,D1					; Is it a 19Ó?
054A6   6604            054AC  					Bne.s	@WriteIt							; Nope, must be indexed.
054A8   123C 000B              					Move.b	#indexedSense19,D1
054AC
054AC   1F41 0007              	@WriteIt		Move.b	D1,SP_NoConnect(Sp)					; Write out monID to pRam record.
054B0   002F 0040 0007         					Ori.b	#spNCValidMask,SP_NoConnect(Sp)		; Validate it.
054B6   6004            054BC  					Bra.s	@WritePRam
054B8
054B8   422F 0007              	@ClearIt		Clr.b	SP_NoConnect(Sp)					; Invalidate no-connect byte.
054BC
054BC   214F 0004              	@WritePRam		Move.l	Sp,spsPointer(A0)					; Set up to whack pRam.
054C0                          					_sPutPRAMRec								; Whack it.
054C0   7012                  1	  				MOVEQ   	#sPutPRAMRec,D0
054C2   A06E                  1	  				_SlotManager
054C4
054C4 G 4FEF 0040              					Adda	#SizesPRAMRec+spBlockSize,Sp		; Restore stack.
054C8   6000 F990       04E5A  					Bra		DAFBCtlGood							;	leave.
054CC
054CC G 4FEF 0040              	@MonIDNotValid	Adda	#SizesPRAMRec+spBlockSize,Sp		; Restore stack.
054D0   6000 F984       04E56  					Bra		DAFBCtlBad							;	leave with error.
054D4
054D4                          	**********************************************************************
054D4                          	*
054D4                          	* VideoClose releases the device's private storage and removes the
054D4                          	*		interrupt handler.
054D4                          	*
054D4                          	*
054D4                          	* Entry:	A0 = param block pointer
054D4                          	*			A1 = AuxDCE pointer
054D4                          	*
054D4                          	* Other:	A2 = temporary AuxDCE pointer copy
054D4                          	*
054D4                          	**********************************************************************
054D4
054D4                          	DAFBVidClose
054D4
054D4                          					WITH 		DAFBVidPrivates
054D4
054D4 G 2669 0014              					MOVE.L	dCtlStorage(A1),A3					; A3 <- Ptr to private storage
054D8   2013                   					MOVE.L	(A3),D0								;
054DA   A055                   					_StripAddress								;
054DC G 2640                   					MOVE.L	D0,A3								;
054DE
054DE   6100 FD46       05226  					BSR		DAFBDisableVGuts					; call utility to deactivate interrupts
054E2
054E2   7001                   					Moveq	#true32b,D0							; Set up to flip into 32-bit addressing.
054E4   A05D                   					_SwapMMUMode								; Flip.
054E6                          					DAFBIdle saveDAFBBase(A3)					; Put DAFB in an idle state.
054E6   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
054EA G 206B 0018             1						Move.l	saveDAFBBase(A3),A0						; Get DAFBBase into A0.
054EE   2028 0120             1						Move.l	DAFBFlags(A0),D0					; Get the DAFBFlags.
054F2   0880 000B             1						Bclr	#videoEnabled,D0					; Reset the video-is-enabled bit.
054F6   2140 0120             1						Move.l	D0,DAFBFlags(A0)					; Write it out.
054FA   42A8 000C             1						Clr.l	DAFB_ClkCfg(A0)						; Shut off ACDC clock.
054FE   42A8 0010             1						Clr.l	DAFB_Config(A0)						; Shut off ACDC refresh.
05502   217C 0000 0001        1						Move.l	#dafbDisableSwatch,Swatch_Mode(A0)	; Shut off Swatch.
             0100 
0550A   42A8 0200             1						Clr.l	ACDC_AddrReg(A0)					; Tell ACDC to use PCBR0.
0550E   217C 0000 0006        1						Move.l	#6,ACDC_ConfigReg(A0)				; Put ACDC in indirect mode.
             0220 
05516   217C 0000 0001        1						Move.l	#1,ACDC_AddrReg(A0)					; Tell ACDC to use PCBR1.
             0200 
0551E   42A8 0220             1						Clr.l	ACDC_ConfigReg(A0)					; Put PCBR1 in compatible mode.
05522   42A8 0200             1						Clr.l	ACDC_AddrReg(A0)					; Use PCBR0 again.
05526   42A8 0220             1						Clr.l	ACDC_ConfigReg(A0)					; Reset it.
0552A   4CDF 0101             1						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
0552E   A05D                   					_SwapMMUMode								; Restore previous addressing mode.
05530
05530 G 206B 0008              					MOVE.L	saveSQElPtr(A3),A0					; get the slot interrupt queue element ptr
05534   A01F                   					_DisposPtr
05536
05536 G 206B 0010              					MOVE.L	saveGamDispPtr(A3),A0				; get pointer to gamma table block
0553A   A01F                   					_DisposPtr									; and dispose it
0553C
0553C G 206B 001C              					Move.l	saveVidPtr(A3),A0					; Get pointer to video parameters block,
05540   A01F                   					_DisposPtr									;	and dispose of it.
05542
05542 G 2069 0014              					MOVE.L	dCtlStorage(A1),A0					; dispose of the private storage
05546   A023                   					_DisposHandle								;
05548
05548   7000                   					MOVEQ	#noErr,D0							; no error
0554A   4E75                   					RTS											; and return
0554C
0554C                          					ENDWITH
0554C
0554C                          	**********************************************************************
0554C                          	*
0554C                          	* Video Driver Status Call Handler.  There are ten standard calls:
0554C                          	*
0554C                          	*	($00) Error
0554C                          	*	($01) Error
0554C                          	*	($02) GetMode
0554C                          	*	($03) GetEntries
0554C                          	*	($04) GetPage
0554C                          	*	($05) GetPageBase
0554C                          	*	($06) GetGray
0554C                          	*	($07) GetInterrupt
0554C                          	*	($08) GetGamma
0554C                          	*	($09) GetDefaultMode
0554C                          	*
0554C                          	* The following calls are DAFB-specific:
0554C                          	*
0554C                          	*	($80) GetSyncOnGreen
0554C                          	*	($82) GetPageMode
0554C                          	*	($83) GetNoConnect
0554C                          	*
0554C                          	*   Entry: 	A0 		= paramblock pointer
0554C                          	*			A1 		= AuxDCE pointer
0554C                          	*	Uses:	A2		= cs parameters
0554C                          	*			A3 		= pointer to private storage
0554C                          	*			D0-D3 	= scratch (don't need to be preserved)
0554C                          	*
0554C                          	*	Exit:	D0	  	= error code
0554C                          	*
0554C                          	**********************************************************************
0554C
0554C                          	DAFBVidStatus
0554C
0554C   48E7 00C0              					MOVEM.L	A0/A1,-(SP)							; Save exit registers.
05550
05550 G 2468 001C              					MOVE.L	csParam(A0),A2						; A2 <- Ptr to control parameters
05554
05554 G 2669 0014              					MOVE.L	dCtlStorage(A1),A3					; A3 <- Ptr to private storage
05558   2013                   					MOVE.L	(A3),D0								;
0555A   A055                   					_StripAddress								;
0555C G 2640                   					MOVE.L	D0,A3								;
0555E
0555E   3028 001A              					MOVE.W	csCode(A0),D0						; get routine selector
05562
05562 G 0C40 0080              					Cmp.w	#cscSyncOnGreen,D0					; If we got the GetSyncOnGreen call,
05566   6700 0172       056DA  					Beq		DAFBGetSyncOnGreen					;	hop to it.
0556A G 0C40 0082              					Cmp.w	#cscPageMode,D0						; If we go the PageMode call,
0556E   6700 0180       056F0  					Beq		DAFBGetPageMode						;	hop to it.
05572 G 0C40 0083              					Cmp.w	#cscNoConnect,D0					; If we got the NoConnect call,
05576   6700 019C       05714  					Beq		DAFBGetNoConnect					;	hop to it.
0557A
0557A G 0C40 0009              					CMP.W	#9,D0								;IF csCode NOT IN [0..9] THEN
0557E   621C            0559C  					BHI.S	DAFBStatBad							;  Error, csCode out of bounds.
05580   303B 0206       05588  					MOVE.W	DAFBStatJumpTbl(PC,D0.W*2),D0		;Get the relative offset to the routine.
05584   4EFB 0002       05588  					JMP		DAFBStatJumpTbl(PC,D0.W)			;GOTO the proper routine.
05588
05588                          	DAFBStatJumpTbl
05588   0014                   					DC.W	DAFBStatBad-DAFBStatJumpTbl			;$00 => Error
0558A   0014                   					DC.W	DAFBStatBad-DAFBStatJumpTbl			;$01 => Error
0558C   0022                   					DC.W	DAFBGetMode-DAFBStatJumpTbl			;$02 => GetMode
0558E   0032                   					DC.W	DAFBGetEntries-DAFBStatJumpTbl		;$03 => GetEntries
05590   00EC                   					DC.W	DAFBGetPage-DAFBStatJumpTbl			;$04 => GetPage
05592   0102                   					DC.W	DAFBGetPageBase-DAFBStatJumpTbl		;$05 => GetPageBase
05594   0114                   					DC.W	DAFBGetGray-DAFBStatJumpTbl			;$06 => GetGray
05596   0122                   					DC.W	DAFBGetInterrupt-DAFBStatJumpTbl	;$07 => GetInterrupt
05598   0126                   					DC.W	DAFBGetGamma-DAFBStatJumpTbl		;$08 => GetGamma
0559A   012E                   					DC.W	DAFBGetDefaultMode-DAFBStatJumpTbl	;$09 => GetDefaultMode
0559C
0559C   70EE                   	DAFBStatBad		MOVEQ	#statusErr,D0						; else say we don't do this one
0559E   6002            055A2  					BRA.S	DAFBStatDone						; and return
055A0
055A0   7000                   	DAFBStatGood	MOVEQ	#noErr,D0							; return no error
055A2
055A2   4CDF 0300              	DAFBStatDone	MOVEM.L	(SP)+,A0/A1							; Restore exit registers.
055A6   6000 01DE       05786  					BRA		DAFBExitDrvr
055AA
055AA                          	DAFBGetMode
055AA                          	;---------------------------------------------------------------------
055AA                          	;
055AA                          	;	Return the current mode
055AA                          	;
055AA                          	;		Inputs : A2 = pointer to csParams
055AA                          	;				 A3 = pointer to private storage
055AA                          	;
055AA                          	;---------------------------------------------------------------------
055AA
055AA                          					WITH	DAFBVidPrivates
055AA
055AA   34AB 0024              					MOVE.W	saveMode(A3),csMode(A2)				; return the mode
055AE   426A 0006              					Clr.w	csPage(A2)							; return the page number (always 0)
055B2
055B2   256B 0004 0008         					Move.l	saveScreenBase(A3),csBaseAddr(A2)	; Return the ST-corrected screen baseAddr.
055B8   60E6            055A0  					BRA.S	DAFBStatGood						; => return no error
055BA
055BA                          					ENDWITH
055BA
055BA                          	DAFBGetEntries
055BA                          	;---------------------------------------------------------------------
055BA                          	;
055BA                          	;	Read the current contents of the CLUT.  These values were gamma corrected
055BA                          	;	when they were set (by DAFBSetEntries), so they may not match the source
055BA                          	;	cSpec array.
055BA                          	;
055BA                          	;		Inputs : A1 = pointer to AuxDCE
055BA                          	;				 A2 = pointer to csParams/CLUT read register (not restored to csParams)
055BA                          	;				 A3 = pointer to private storage
055BA                          	;
055BA                          	;---------------------------------------------------------------------
055BA
055BA   48E7 0E00              					Movem.l	D4-D6,-(Sp)							; Save work registers.
055BE   4AA7                   					Tst.l	-(Sp)								; Make some room.
055C0
055C0   2012                   					Move.l	csTable(A2),D0						; If we were handed a nil pointer,
055C2   6700 00A6       0566A  					Beq		@GEErr								; 	then hike.
055C6   A055                   					_StripAddress								; Make table pointer 32-bit clean.
055C8   2E80                   					Move.l	D0,(Sp)								; And save it.
055CA
055CA   322B 0024              					Move.w	saveMode(A3),D1						; Get the current video mode.
055CE G 0441 0080              					Sub.w	#firstVidMode,D1					; Convert it to an index.
055D2   2C01                   					Move.l	D1,D6								; Save it for later.
055D4
055D4   3A2B 0020              					Move.w	GFlags(A3),D5						; Get the flags for quick access.
055D8
055D8 G 0C46 0004              					Cmp.w	#FifthVidMode-FirstVidMode,D6		; If this is not 16bpp mode,
055DC   6604            055E2  					Bne.s	@ChkRange							;	then just go do the range check.
055DE   08C5 000C              					Bset	#UseTrans,D5						; Otherwise, remember to do translation.
055E2
055E2   41FA F5FC       04BE0  	@ChkRange		Lea		DAFBClutTbl,A0						; Point to little table of counts.
055E6   7600                   					Moveq	#0,D3								; Set up to get count.
055E8   1630 1000              					Move.b	(A0,D1.w),D3						; Get clut count.
055EC
055EC   382A 0006              					Move.w	csCount(A2),D4						; Get the number of entries to fill,
055F0   6B78            0566A  					Bmi.s		@GEErr								; 	and hike if itÕs out of range.
055F2   B843                   					Cmp.w	D3,D4								; If D4-D3 > 0 (count > entries),
055F4   6274            0566A  					Bhi.s		@GEErr								;	then hike.
055F6   3404                   					Move.w	D4,D2								; Otherwise, copy the count.
055F8
055F8 G 0C6A FFFF 0004         					Cmp.w	#indexEntries,csStart(A2)			; If table accesses are to be indexed,
055FE   6712            05612  					Beq.s	@GECom								; 	then go on.
05600
05600   3204                   					Move.w	D4,D1								; Otherwise, sequence thru table from
05602   D46A 0004              					Add.w	csStart(A2),D2						; 	csStart thru csCount entries.
05606
05606                          	; The following code is BAD, BAD, BAD!  We should build our own table here so
05606                          	;	as to NOT mess up the userÕs data.  But all the previous Apple video drivers
05606                          	;	have done the same thing here, so weÕll continue the trend for now.
05606
05606 G 2057                   					Move.l	(Sp),A0								; Get ptr to csTable.
05608
05608   3182 1600              	@TableLoop		Move.w	D2,value(A0,D1*colorSpecSize)		; Write the index into the table.
0560C   5342                   					Subq	#1,D2								; Decrement index.
0560E G 51C9 FFF8       05608  					Dbra	D1,@TableLoop						;
05612
05612   7001                   	@GECom			Moveq	#true32b,D0							; Save previous MMU mode and set MMU to
05614   A05D                   					_SwapMMUMode								;	32-bit addressing when dealing with DAFB.
05616
05616 G 205F                   					Move.l	(Sp)+,A0							; Get/restore ptr to csTable.
05618
05618 G 246B 0014              					Move.l	saveVDACBase(A3),A2					; Get ACDC base address.
0561C G D4FC 0210              					Add.l	#ACDC_DataReg,A2					; Add offset to Clut read register.
05620
05620 P 40E7                   					Move.w	Sr,-(Sp)							; Save current interrupt level
05622   6100 01E2       05806  					Bsr		DAFBWaitVSync						; Wait for VBL.
05626
05626   3210                   	@Repeat			Move.w	value(A0),D1						; Get the NEXT Clut position into D1.
05628   B243                   					Cmp.w	D3,D1								; If this position is out of range,
0562A   622C            05658  					Bhi.s	@Until								; 	then go on.
0562C
0562C   0805 000C              					Btst	#UseTrans,D5						; If weÕre not supposed to translate this index,
05630   6704            05636  					Beq.s	@Index								;	then just go on.
05632   6100 018A       057BE  					Bsr		DAFBTrans5to8						; Otherwise, do translation.
05636
05636   2541 FFF0              	@Index			Move.l	D1,ACDC_AddrReg-ACDC_DataReg(A2)	; Tell the Clut where to read from.
0563A
0563A   2212                   					Move.l	(A2),D1								; Get Red:
0563C   1141 0002              					Move.b	D1,rgb+red(A0)						; 	--> $rrXX
05640   1141 0003              					Move.b	D1,rgb+red+1(A0)					;	--> $rrrr
05644
05644   2212                   					Move.l	(A2),D1								; Get Green:
05646   1141 0004              					Move.b	D1,rgb+green(A0)					;	--> $ggXX
0564A   1141 0005              					Move.b	D1,rgb+green+1(A0)					;	--> $gggg
0564E
0564E   2212                   					Move.l	(A2),D1								; Get Blue:
05650   1141 0006              					Move.b	D1,rgb+blue(A0)						;	--> $bbXX
05654   1141 0007              					Move.b	D1,rgb+blue+1(A0)					;	--> $bbbb
05658
05658   5048                   	@Until			Addq	#colorSpecSize,A0					; Point to next entry ColorTable.
0565A G 51CC FFCA       05626  					Dbra	D4,@Repeat
0565E
0565E P 46DF                   					Move.w	(Sp)+,Sr							; Restore previous interrupt level.
05660   A05D                   					_SwapMMUMode								; Restore previous addressing mode.
05662
05662   4CDF 0070              					Movem.l	(Sp)+,D4-D6							; Restore work registers.
05666   6000 FF38       055A0  					Bra		DAFBStatGood						; Return noError.
0566A
0566A   4A9F                   	@GEErr			Tst.l	(Sp)+								; Clean up stack.
0566C   4CDF 0070              					Movem.l	(Sp)+,D4-D6							; Restore work registers.
05670   6000 FF2A       0559C  					Bra		DAFBStatBad							; Return statError.
05674
05674                          	DAFBGetPage
05674                          	;---------------------------------------------------------------------
05674                          	;
05674                          	;	Return the number of pages in the specified mode.  It's pretty simple;
05674                          	;		every mode has only one page.  We do check if it's valid, however.
05674                          	;
05674                          	;---------------------------------------------------------------------
05674
05674                          					WITH	DAFBVidPrivates
05674
05674   3212                   					MOVE	csMode(A2),D1						; get the mode
05676   3401                   					MOVE	D1,D2								; keep a copy
05678   6100 0154       057CE  					BSR		DAFBChkMode							; is this mode OK?
0567C   6600 FF1E       0559C  					BNE		DAFBStatBad							; => not a valid mode
05680
05680   357C 0001 0006         					MOVE.W	#1,csPage(A2)						; return page count
05686   6000 FF18       055A0  					BRA		DAFBStatGood						; => return no error
0568A
0568A                          					ENDWITH
0568A
0568A                          	DAFBGetPageBase
0568A                          	;---------------------------------------------------------------------
0568A                          	;
0568A                          	;	Return the base address for the specified page in the current mode
0568A                          	;
0568A                          	;---------------------------------------------------------------------
0568A
0568A                          					WITH	DAFBVidPrivates
0568A
0568A   4A6A 0006              					TST.W	csPage(A2)							; are we returning page zero info?
0568E   6600 FF0C       0559C  					BNE		DAFBStatBad							; only page 0 is valid
05692
05692   256B 0004 0008         					Move.l	saveScreenBase(A3),csBaseAddr(A2)	; Return the ST-corrected screen baseAddr.
05698   6000 FF06       055A0  					BRA 	DAFBStatGood						; => return no error
0569C
0569C                          					ENDWITH
0569C
0569C                          	DAFBGetGray
0569C                          	;---------------------------------------------------------------------
0569C                          	;
0569C                          	;	Return a boolean, set true if luminance mapping is on
0569C                          	;
0569C                          	;---------------------------------------------------------------------
0569C
0569C                          					WITH	DAFBVidPrivates
0569C
0569C   7200                   					MOVEQ	#0,D1								; set up for BFEXTU
0569E
0569E                          	DAFBGetFlagCom
0569E
0569E   E9EB 0841 0020         					BFEXTU	GFlags(A3){D1:1},D0					; get the state of flag
056A4   1480                   					MOVE.B	D0,csMode(A2)						; return value
056A6   6000 FEF8       055A0  					BRA		DAFBStatGood						; => and return
056AA
056AA                          					ENDWITH
056AA
056AA                          	DAFBGetInterrupt
056AA                          	;---------------------------------------------------------------------
056AA                          	;
056AA                          	;	Return a boolean in csMode, set true if VBL interrupts are disabled
056AA                          	;
056AA                          	;---------------------------------------------------------------------
056AA
056AA                          					WITH	DAFBVidPrivates
056AA
056AA   7201                   					MOVEQ	#1,D1								; set up BFEXTU to point at IntDisFlag
056AC   60F0            0569E  					BRA.S	DAFBGetFlagCom						; and use common code
056AE
056AE                          					ENDWITH
056AE
056AE                          	DAFBGetGamma
056AE                          	;---------------------------------------------------------------------
056AE                          	;
056AE                          	;	Return the pointer to the current gamma table
056AE                          	;
056AE                          	;---------------------------------------------------------------------
056AE
056AE                          					WITH	DAFBVidPrivates
056AE
056AE   24AB 000C              					MOVE.L	saveGammaPtr(A3),csGTable(A2)		; return the pointer to the structure
056B2   6000 FEEC       055A0  					BRA		DAFBStatGood						; and return a good result
056B6
056B6                          					ENDWITH
056B6
056B6                          	DAFBGetDefaultMode
056B6                          	;---------------------------------------------------------------------
056B6                          	;
056B6                          	;	Read the card default mode from slot pRAM.
056B6                          	;
056B6                          	;		A1 = Ptr to AuxDCE
056B6                          	;		A2 = Ptr to cs parameter record
056B6                          	;		A3 = Ptr to private storage
056B6                          	;
056B6                          	;---------------------------------------------------------------------
056B6
056B6                          					WITH 	spBlock,DAFBVidPrivates,SP_Params
056B6
056B6                          	;
056B6                          	; Set up a slot parameter block on the stack.
056B6                          	;
056B6
056B6 G 9EFC 0038              					SUBA	#spBlockSize,SP						; make an slot parameter block on stack
056BA G 204F                   					MOVE.L	SP,A0								; get pointer to parm block now
056BC   1169 0028 0031         					MOVE.B	dCtlSlot(A1),spSlot(A0)				; put slot in pBlock
056C2   4228 0033              					CLR.B	spExtDev(A0)						; external device = 0
056C6
056C6                          	;
056C6                          	; Read the slot pRAM to determine what the currently saved mode is.  The first
056C6                          	;	byte is the board ID, followed by the default mode.  Built-in video keeps the last
056C6                          	;	selected video sRsrc spID in VendorUse2.
056C6                          	;
056C6
056C6 G 514F                   					SUBA	#SizesPRAMRec,SP					; allocate block for pRAM record
056C8   208F                   					MOVE.L	SP,spResult(A0)						; point to it
056CA                          					_sReadPRAMRec								; read it
056CA   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
056CC   A06E                  1	  				_SlotManager
056CE
056CE   14AF 0003              					MOVE.B	SP_LastConfig(SP),csMode(A2)		; return the result
056D2 G 4FEF 0040              					ADDA	#SizesPRAMRec+spBlockSize,SP		; release buffer
056D6   6000 FEC8       055A0  					BRA		DAFBStatGood						;
056DA
056DA                          					ENDWITH
056DA
056DA                          	DAFBGetSyncOnGreen
056DA                          	;---------------------------------------------------------------------
056DA                          	;
056DA                          	;	Return a boolean in csMode, set true if sync-on-green is disabled.
056DA                          	;
056DA                          	;---------------------------------------------------------------------
056DA
056DA                          					With	DAFBVidPrivates
056DA
056DA   082B 0008 0020         					Btst	#syncOnGreen,GFlags(A3)				; If weÕre putting sync on green,
056E0   6608            056EA  					Bne.s	@IsOn								;	then return enabled state.
056E2   14BC 0001              					Move.b	#1,csMode(A2)						; Otherwise, return disabled.
056E6   6000 FEB8       055A0  					Bra		DAFBStatGood
056EA
056EA                          	@IsOn
056EA   4212                   					Clr.b	csMode(A2)							; Return enabled state.
056EC   6000 FEB2       055A0  					Bra		DAFBStatGood
056F0
056F0                          					EndWith
056F0
056F0                          	DAFBGetPageMode
056F0                          	;---------------------------------------------------------------------
056F0                          	;
056F0                          	;	Return a boolean in csMode, set true if page mode is disabled.
056F0                          	;
056F0                          	;---------------------------------------------------------------------
056F0
056F0                          					With 	DAFBVidPrivates
056F0
056F0   7001                   					Moveq	#true32b,D0							; Set up to switch into 32-bit mode,
056F2   A05D                   					_SwapMMUMode								; 	do switch, and
056F4   1F00                   					Move.b	D0,-(Sp)							; 	save previous mode.
056F6
056F6 G 206B 0018              					Move.l	saveDAFBBase(A3),A0					; Get DAFBBase into A0.
056FA   2028 0018              					Move.l	DAFB_PgMdEn(A0),D0					; Get page mode.
056FE   0800 0000              					Btst	#0,D0								; If page mode is on,
05702   6606            0570A  					Bne.s	@IsOn								;	then return enabled state.
05704   14BC 0001              					Move.b	#1,csMode(A2)						; Otherwise, return disabled,
05708   6002            0570C  					Bra.s	@EndPageMode						;	and leave.
0570A
0570A   4212                   	@IsOn			Clr.b	csMode(A2)							; Return enabled state.
0570C
0570C   101F                   	@EndPageMode	Move.b	(Sp)+,D0							; Set up to switch back into previous mode,
0570E   A05D                   					_SwapMMUMode								;	do switch, and
05710   6000 F748       04E5A  					Bra		DAFBCtlGood							;	leave.
05714
05714                          					EndWith
05714
05714                          	DAFBGetNoConnect
05714                          	;---------------------------------------------------------------------
05714                          	;
05714                          	;	Returns a monID code or the extended sense no-connect value.  It
05714                          	;		should be noted that we cannot disguish between PAL &
05714                          	;		NTSC monitors & encoder boxes once DAFBSetNoConnect has
05714                          	;		been called (because both the monitor & box codes are
05714                          	;		mapped into the same indexedSense code).
05714                          	;
05714                          	;---------------------------------------------------------------------
05714
05714                          					With	spBlock,DAFBVidPrivates,SP_Params
05714
05714                          	;
05714                          	; First, set up a slot parameter block on the stack.
05714                          	;
05714
05714 G 9EFC 0038              					Suba	#spBlockSize,Sp						; Make a SpBlock on the stack.
05718 G 204F                   					Move.l	Sp,A0								; Get a pointer to it into A0.
0571A   1169 0028 0031         					Move.b	dCtlSlot(A1),spSlot(A0)				; Set it up.
05720   4228 0033              					Clr.b	spExtDev(A0)
05724
05724                          	;
05724                          	; Next, read the current pRam so that we can determine whether the
05724                          	;	no-connect code is valid or not.
05724                          	;
05724
05724 G 514F                   					Suba	#SizesPRAMRec,Sp					; Make an sPRAM block on the stack.
05726   208F                   					Move.l	Sp,spResult(A0)						; Point to it.
05728                          					_sReadPRamRec								; Get pRAM.
05728   7011                  1	  				MOVEQ   	#sReadPRAMRec,D0
0572A   A06E                  1	  				_SlotManager
0572C
0572C G 422A 0001              					Move.b	#0,csMode+1(A2)						; Assume non-extended (indexed) for now.
05730
05730   102F 0007              					Move.b	SP_NoConnect(Sp),D0					; Get the no-connect byte.
05734   0200 0040              					Andi.b	#spNCValidMask,D0					; If it is valid,
05738   6606            05740  					Bne.s	@Valid								;	return it.
0573A   14BC 0007              					Move.b	#indexedNoConnect,csMode(A2)		; Otherwise, return the indexed no-connect code,
0573E   603E            0577E  					Bra.s	@Exit								;	 and leave.
05740
05740   102F 0007              	@Valid			Move.b	SP_NoConnect(Sp),D0					; Get the no-connect byte again.
05744   0200 003F              					Andi.b	#spNoConnectMask,D0					; Strip the validation code.
05748
05748 G 0C00 0008              					Cmp.b	#indexedSenseVGA,D0					; Is it the VGA code?
0574C   6606            05754  					Bne.s	@TryPal								; Nope, try PAL.
0574E   103C 0017              					Move.b	#extendedSenseVGA,D0
05752   6022            05776  					Bra.s	@WriteExtended
05754
05754 G 0C00 0009              	@TryPal			Cmp.b	#indexedSensePAL,D0					; Is it the PAL code?
05758   6606            05760  					Bne.s	@TryGF								; Nope, try GoldFish.
0575A   103C 0030              					Move.b	#extendedSensePAL,D0
0575E   6016            05776  					Bra.s	@WriteExtended
05760
05760 G 0C00 000A              	@TryGF			Cmp.b	#indexedSenseGF,D0					; Is it the GoldFish code?
05764   6606            0576C  					Bne.s	@Try19								; Nope, try 19Ó.
05766   103C 002D              					Move.b	#extendedSenseGF,D0
0576A   600A            05776  					Bra.s	@WriteExtended
0576C
0576C G 0C00 000B              	@Try19			Cmp.b	#indexedSense19,D0					; Is it the 19Ó code?
05770   660A            0577C  					Bne.s	@WriteIt							; No, so just use indexed.
05772   103C 003A              					Move.b	#extendedSense19,D0
05776
05776   157C 0001 0001         	@WriteExtended	Move.b	#1,csMode+1(A2)						; Say code is extended.
0577C   1480                   	@WriteIt		Move.b	D0,csMode(A2)						; Return valid monID.
0577E
0577E G 4FEF 0040              	@Exit			Adda	#SizesPRAMRec+spBlockSize,Sp		; Restore stack, and
05782   6000 FE1C       055A0  					Bra		DAFBStatGood						;	go home.
05786
05786                          	;---------------------------------------------------------------------
05786                          	;
05786                          	;	Exit from Control or Status.
05786                          	;
05786                          	;	 	A0 = Ptr to param block.
05786                          	;		A1 = Ptr to AuxDCE.
05786                          	;		D0 = error code.
05786                          	;
05786                          	;---------------------------------------------------------------------
05786
05786   0828 0009 0006         	DAFBExitDrvr	BTST	#NoQueueBit,ioTrap(A0)				; no queue bit set?
0578C   6702            05790  					BEQ.S	DAFBGoIODone						; => no, not immediate
0578E   4E75                   					RTS 										; otherwise, it was an immediate call
05790
05790   2F38 08FC              	DAFBGoIODone	MOVE.L	JIODone,-(Sp)						; Get the IODone address,
05794   4E75                   					Rts											; 	and go there.
05796
05796                          	;=====================================================================
05796                          	;
05796                          	;	Utilities
05796                          	;
05796                          	;=====================================================================
05796
05796                          	;---------------------------------------------------------------------
05796                          	;
05796                          	;	CalcScreenBaseAddr
05796                          	;
05796                          	;	Returns the proper screen base address for the current page
05796                          	;	and mode.
05796                          	;
05796                          	; 	 -> A3: Pointer to driver privates, saveMode(A3) & saveVidPtr(A3) must be set up!
05796                          	;
05796
05796                          	DAFBCalcScreenBaseAddr
05796
05796                          				With	SC_Params
05796
05796   48E7 40C0              				Movem.l	A0-A1/D1,-(Sp)							; Save work registers.
0579A
0579A   322B 0024              				Move.w	saveMode(A3),D1							; Get current video mode.
0579E G 0441 0080              				Sub.w	#firstVidMode,D1						; Make it an index.
057A2
057A2 G 226B 001C              				Move.l	saveVidPtr(A3),A1						; Get video parameters.
057A6   C2FC 0042              				Mulu	#DepthSize+ScreenSize,D1				; Index to the correct parameter group.
057AA   43F1 1048              				Lea		ClockSize+MiscSize+DepthSize(A1,D1),A1	; Point to screen graying parameters.
057AE
057AE G 2053                   				Move.l	saveBaseAddr(A3),A0						; Get the vRam base address.
057B0   D1E9 000C              				Adda.l	SC_BaseOffset(A1),A0					; Point to the screen,
057B4   2748 0004              				Move.l	A0,saveScreenBase(A3)					;	and save it.
057B8
057B8   4CDF 0302              				Movem.l	(Sp)+,A0-A1/D1							; Restore work registers.
057BC   4E75                   				Rts
057BE
057BE                          				EndWith											; SC_Params
057BE
057BE                          	;---------------------------------------------------------------------
057BE                          	;
057BE                          	;	Trans5to8
057BE                          	;
057BE                          	;	The ACDC that supports 16bpp (AC842A) does so in a somewhat unique
057BE                          	;	fashion.  That is, it uses a sparse 8-bit CLUT.  The
057BE                          	;	translation forumla is as follows:
057BE                          	;
057BE                          	;			5-bits [4..0] -> 8-bits [4..04..2].
057BE                          	;
057BE                          	; 	<-> D1:  5-bit value to be converted into an 8-bit index.
057BE                          	;
057BE
057BE                          	DAFBTrans5to8
057BE
057BE   2F00                   				Move.l	D0,-(Sp)								; Save D0 as scratch.
057C0   7000                   				Moveq	#0,D0									; Clear it.
057C2
057C2   3001                   				Move.w	D1,D0									; D1 = ---43210, D0 = ---43210.
057C4   E749                   				Lsl.w	#3,D1									; D1 = 43210---, D0 = ---43210.
057C6   E448                   				Lsr.w	#2,D0									; D1 = 43210---, D0 = -----432.
057C8   8240                   				Or.w	D0,D1									; D1 = 43210432.
057CA
057CA   201F                   				Move.l	(Sp)+,D0								; Restore D0.
057CC   4E75                   				Rts
057CE
057CE                          	;---------------------------------------------------------------------
057CE                          	;
057CE                          	;	ChkMode
057CE                          	;
057CE                          	;	Verifies the requested mode is legal.  Converts spID in D1 into
057CE                          	;	zero-based mode number since lots of people want it that way.
057CE                          	;
057CE                          	;	<->	D1: Mode
057CE                          	;	->	A3:	Pointer to driver privates
057CE                          	;
057CE                          	;	All registers preserved
057CE                          	;
057CE                          	;	Returns EQ if mode is valid.
057CE                          	;
057CE
057CE                          	DAFBChkMode
057CE
057CE   48E7 8080              				Movem.l	A0/D0,-(Sp)								; Save work registers.
057D2
057D2 G 0441 0080              				Sub.w	#FirstVidMode,D1						; Make mode zero-based.
057D6   6D28            05800  				Blt.s	@ModeBad								; If the passed-in mode is < 0,
057D8                          																;	then punt.
057D8
057D8                          	; For DAFB, all the ÔaÕ modes are even and all the ÔbÕ modes are odd.  So, we just check
057D8                          	; the oddness or evenness of the spID to determine whether the passed in mode is OK.
057D8                          	;
057D8 G 206B 001C              				Move.l	saveVidPtr(A3),A0						; Get pointer to video params.
057DC G 41E8 0010              				Adda.w	#ClockSize,A0							; Point to MiscParams.
057E0
057E0   102B 0028              				Move.b	saveSlotID(A3),D0						; Get functional sRsrcID of display.
057E4
057E4   0800 0000              				Btst	#0,D0									; If the display is in ÔaÕ mode,
057E8   6702            057EC  				Beq.s	@MakeA									;	then say so.
057EA   6004            057F0  				Bra.s	@MakeB									; Otherwise, make it a ÔbÕ mode.
057EC
057EC   7000                   	@MakeA		Moveq	#0,D0									; Say itÕs an ÔaÕ mode.
057EE   6002            057F2  				Bra.s	@MaxMode
057F0   7001                   	@MakeB		Moveq	#1,D0									; Say itÕs a  ÔbÕ mode.
057F2
057F2   1030 0000              	@MaxMode	Move.b	(A0,D0),D0								; Get maximum mode for the current display.
057F6 G 0440 0080              				Sub.w	#FirstVidMode,D0						; Make max mode zero-based.
057FA   B240                   				Cmp.w	D0,D1									; If the passed in mode is > max mode,
057FC   6E02            05800  				Bgt.s	@ModeBad								;	then punt.
057FE
057FE   B241                   	@ModeOK		Cmp.w	D1,D1									; Set Eq when OK.
05800
05800                          	@ModeBad
05800   4CDF 0101              	@EndChkMode	Movem.l	(Sp)+,A0/D0								; Restore work registers.
05804   4E75                   				Rts
05806
05806                          	;---------------------------------------------------------------------
05806                          	;
05806                          	;	Wait for vertical blanking.  Interrupts are raised to level-2 around
05806                          	;	this routine.
05806                          	;
05806                          	;	IMPORTANT! - This routine expects to be called in 32-bit addressing mode!!!!
05806                          	;
05806                          	;   A1 = AuxDCE POINTER
05806                          	;	A3 = pointer to private storage
05806                          	;---------------------------------------------------------------------
05806
05806                          	DAFBWaitVSync
05806
05806   2F08                   				MOVE.L	A0,-(SP)								; Save work registers.
05808   2F00                   				MOVE.L	D0,-(SP)								;   (Two MOVEs are faster than a MOVEM.)
0580A
0580A P 40E7                   				MOVE.W	SR,-(SP)								; Get the status register on stack.
0580C   7007                   				MOVEQ	#7,D0									; Get mask into D0.
0580E   C017                   				AND.B	(SP),D0									; Get the interrupt level.
05810   5500                   				SUBQ.B	#2,D0									;
05812   6C08            0581C  				BGE.S	@OK										; If ³, then don't change.
05814 P 007C 0200              				ORI.W	#$0200,SR								; Raise above level-2.
05818 P 027C FAFF              				ANDI.W	#$FAFF,SR								; Make it level-2
0581C                          	@OK
0581C   4A5F                   				Tst.w	(Sp)+									; Restore stack.
0581E
0581E G 206B 0018              				MOVE.L	saveDAFBBase(A3),A0						; Point to DAFB.
05822   42A8 010C              				CLR.L	Swatch_ClrCrsrInt(A0) 					; Otherwise, clear the interrupt, just in case,
05826                          																;   since the interrupt handler
05826                          																;	canÕt get called here.
05826                          				DAFBResetDelay A0								; (Wait for CLR to propagate.)
05826   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
0582A G 2048                  1						Move.l	A0,A0						; Get DAFBBase into A0.
0582C G D0FC 002C             1						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
05830   7003                  1						Moveq	#3,D0								; Set up loop counter.
05832   4A90                  1	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
05834 G 51C8 FFFC       05832 1						Dbra	D0,@DelayLoop						;	and loop until done.
05838   4CDF 0101             1						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
0583C
0583C   2028 0100              				Move.l	Swatch_Mode(A0),D0						; Look at the Swatch configuration register.
05840   0800 0000              				Btst	#0,D0									; If it is not enabled, then
05844   660A            05850  				Bne.s	@Done									;	donÕt wait, or weÕll hang!
05846
05846   2028 0108              	@WaitForVBL	MOVE.L	Swatch_IntStat(A0),D0					; Get the VBL status.
0584A   0800 0002              				BTST	#dafbIntStatusBit,D0					; If VBL has NOT occurred,
0584E   67F6            05846  				BEQ.S	@WaitForVBL								; 	then just spin.
05850
05850   201F                   	@Done		MOVE.L	(SP)+,D0								; Restore work registers.
05852 G 205F                   				MOVE.L	(SP)+,A0								;   (Two MOVEs are faster than a MOVEM.)
05854   4E75                   				RTS
05856
05856                          	;---------------------------------------------------------------------
05856                          	;
05856                          	; SetDepth sets the DAFB frame buffer depth, and returns the
05856                          	;	frame buffer base in driver privates
05856                          	;
05856                          	; D1 contains the spID of the depth - $80 (the zero based mode ID)
05856                          	; A1 = AuxDCE POINTER
05856                          	; A2 = parameter block pointer
05856                          	; A3 = dCtlStorage pointer
05856                          	;
05856                          	; Preserves all registers
05856                          	;
05856                          	;---------------------------------------------------------------------
05856
05856                          	DAFBSetDepth
05856
05856                          				WITH 		DAFBVidPrivates
05856
05856   48E7 E0E8              				MOVEM.L		D0-D2/A0-A2/A4,-(SP)				; save regs we are using
0585A
0585A G 286B 0018              				MOVE.L		saveDAFBBase(A3),A4					; get the DAFB base address
0585E G 226B 001C              				MOVE.L		saveVidPtr(A3),A1					; get a pointer to the screen depth parameters
05862   3401                   				MOVE.W		D1,D2								; copy the index
05864   C4FC 0042              				MULU		#DepthSize+ScreenSize,D2			; index to the correct parameter group
05868   43F1 2016              				LEA			ClockSize+MiscSize(A1,D2),A1		; point to the setup parameters
0586C
0586C   7001                   				MOVEQ		#true32b,D0							; flip to 32-bit mode
0586E   A05D                   				_SwapMMUMode									;
05870   1F00                   				MOVE.B		D0,-(SP)							; save previous addressing mode
05872
05872                          	; DAFB setup
05872                          	;¥¥¥
05872 G 244C                   				MOVE.L		A4,A2								; copy the DAFB base again
05874                          	;¥¥¥
05874   343C 0004              				MOVE.W		#DAFB_ParmSize-1,D2					; get the counter for the DAFB parameters
05878   3019                   	@0			MOVE.W		(A1)+,D0							; get the parameter
0587A   24C0                   				MOVE.L		D0,(A2)+							; write the parameter and increment
0587C G 51CA FFFA       05878  				DBRA		D2,@0
05880
05880                          				DAFBSpeedDR	A4									; Reconfigure DAFB for the right CPU speed.
05880   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
05884 G 204C                  1						Move.l	A4,A0						; Get DAFBBase into A0.
05886   2028 0010             1						Move.l	DAFB_Config(A0),D0					; Read the DAFBConfig register.
0588A   E9C0 07C1             1						Bfextu	D0{dafbWrdIntBit:1},D0				; If word-interleave is on
0588E   660A            0589A 1						Bne.s	@DisablePageMode					;	then ALWAYS disable page mode.
05890   4A2B 0022             1						Tst.b	pageModeSet(A3)						; If weÕre not supposed to enable page mode,
05894   670A            058A0 1						Beq.s	@CPUSpeed							;	just go on.
05896   7001                  1						Moveq	#1,D0								; Otherwise, set up to enable page mode,
05898   6002            0589C 1						Bra.s	@HitPageMode						;	and do it.
0589A   7000                  1	@DisablePageMode	Moveq	#0,D0								; Set up to disable page mode, and
0589C   2140 0018             1	@HitPageMode		Move.l	D0,DAFB_PgMdEn(A0)					;	and do it.
058A0   082B 000B 0020        1	@CPUSpeed			Btst	#IsSlow,GFlags(A3)					; If CPU is running at 25MHz,
058A6   6608            058B0 1						Bne.s	@EndDAFBSpeedDR						;	then leave alone.
058A8   00A8 0000 0800        1						Ori.l	#dafb33MhzConfig,DAFB_Config(A0)	; Otherwise, setup for 33Mhz operation.
             0010 
058B0   4CDF 0101             1	@EndDAFBSpeedDR		Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
058B4
058B4                          	; Swatch setup
058B4                          	;¥¥¥
058B4 G 244C                   				MOVE.L		A4,A2								; copy the DAFB base again
058B6                          	;¥¥¥
058B6 G 45EA 0100              				ADDA		#Swatch_BaseOffset,A2				; advance to Swatch first register
058BA   3019                   				MOVE.W		(A1)+,D0							; get the first register
058BC   2480                   				MOVE.L		D0,(A2)								; write first register
058BE
058BE G 45EA 0024              				ADDA		#Swatch_BaseOffset1-Swatch_BaseOffset,A2	; advance to register set
058C2   343C 0011              				MOVE.W		#Swatch_ParmSize1-1,D2						; get the counter for Swatch setup
058C6   3019                   	@1			MOVE.W		(A1)+,D0									; get the Swatch parameter
058C8   24C0                   				MOVE.L		D0,(A2)+									; set up Swatch
058CA G 51CA FFFA       058C6  				DBRA		D2,@1										; set them up
058CE
058CE                          	; ACDC configuration setup
058CE
058CE                          	;¥¥¥
058CE G 244C                   				MOVE.L		A4,A2								; copy the DAFB base again
058D0                          	;¥¥¥
058D0   42AC 0200              				Clr.l		ACDC_AddrReg(A4)					; Tell ACDC to use PCBR0.
058D4 G 45EA 0220              				Adda		#ACDC_ConfigReg,A2					; Advance to ACDC config register.
058D8   3019                   				Move.w		(A1)+,D0							; Get the parameter.
058DA   2480                   				Move.l		D0,(A2)								; Write it.
058DC   4AAC 0200              				Tst.l		ACDC_AddrReg(A4)					; Read the addr reg to make it stick (AC842A).
058E0
058E0                          				DAFB16Bpp	D1									; Do 16bpp Òmagic,Ó if necessary.
058E0   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
058E4   3001                  1						Move.w	D1,D0								; Get the current mode (indexed).
058E6 G 0C40 0004             1						Cmp.w	#FifthVidMode-FirstVidMode,D0		; If we arenÕt doing 16bpp, then
058EA   6618            05904 1						Bne.s	@EndDAFB16bpp						;	skip the kludge.
058EC G 206B 0018             1						Move.l	saveDAFBBase(A3),A0					; Get DAFBBase into A0.
058F0   217C 0000 0001        1						Move.l	#1,ACDC_AddrReg(A0)					; Tell ACDC to use PCBR1.
             0200 
058F8   217C 0000 00C0        1						Move.l	#$C0,ACDC_ConfigReg(A0)				; Switch to 16bpp.
             0220 
05900   4AA8 0200             1						Tst.l	ACDC_AddrReg(A0)					; Read the addr reg to make it stick (AC842A).
05904   4CDF 0101             1	@EndDAFB16bpp		Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
05908
05908   202C 000C              				Move.l		DAFB_ClkCfg(A4),D0					; Get the current clock configuration.
0590C   0800 000A              				Btst		#dafbPixSel1,D0						; If PIXSEL1 is not zero, then
05910   662C            0593E  				Bne.s		@SyncOnGreen						;	just go on.
05912
05912   42AC 0200              				Clr.l		ACDC_AddrReg(A4)					; Tell ACDC to use PCBR0.
05916   2F2C 0220              				Move.l		ACDC_ConfigReg(A4),-(Sp)			; Save PCBR0 for later.
0591A   297C 0000 0006         				Move.l		#6,ACDC_ConfigReg(A4)				; Put ACDC into indirect mode.
             0220 
05922   297C 0000 0001         				Move.l		#1,ACDC_AddrReg(A4)					; Tell ACDC to use PCBR1.
             0200 
0592A   202C 0220              				Move.l		ACDC_ConfigReg(A4),D0				; Save the current configuration.
0592E   08C0 0004              				Bset		#acdcPCS,D0							; Set up to use the LD clock signal.
05932   2940 0220              				Move.l		D0,ACDC_ConfigReg(A4)				; Write PCBR1 back out with LD clock on.
05936   42AC 0200              				Clr.l		ACDC_AddrReg(A4)					; Tell ACDC to use PCBR0 again.
0593A   295F 0220              				Move.l		(Sp)+,ACDC_ConfigReg(A4)			; Restore PCBR0.
0593E
0593E                          	; Sync On GreenÉ
0593E                          	;
0593E                          	@SyncOnGreen
0593E   202C 000C              				Move.l		DAFB_ClkCfg(A4),D0					; Get the current Clock config value.
05942   082B 0008 0020         				Btst		#syncOnGreen,GFlags(A3)				; If weÕre supposed to put sync on green,
05948   6604            0594E  				Bne.s		@EnableSyncOnGreen					;	then hop to it.
0594A   7200                   				Moveq		#0,D1								; Otherwise, set up for disabling.
0594C   6002            05950  				Bra.s		@SyncOnGreenCommon
0594E
0594E                          	@EnableSyncOnGreen
0594E   7201                   				Moveq		#1,D1								; Set up for enabling.
05950
05950                          	@SyncOnGreenCommon
05950   EFC0 1581              				Bfins		D1,D0{dafbSyncOnGreen:1}			; Toggle the sync-on-green bit appropriately,
05954   2940 000C              				Move.l		D0,DAFB_ClkCfg(A4)					;	apply it.
05958
05958                          	; Everything's configured, so do the DAFB reset sequence after waiting for vSync to happen.
05958                          	;
05958                          	@DoReset
05958 P 40E7                   				Move.w		Sr,-(Sp)							; Save the current interrupt level.
0595A   6100 FEAA       05806  				BSR			DAFBWaitVSync						; Wait for the next VBL.
0595E P 46DF                   				Move.w		(Sp)+,Sr							; Restore the interrupt level.
05960                          				DAFBReset	A4									; Reset DAFB.
05960   48E7 8080             1						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
05964 G 204C                  1						Move.l	A4,A0						; Get DAFBBase into A0.
05966   2028 0120             1						Move.l	DAFBFlags(A0),D0					; Get the DAFBFlags.
0596A   08C0 000B             1						Bset	#videoEnabled,D0					; Set the video-is-enabled bit.
0596E   2140 0120             1						Move.l	D0,DAFBFlags(A0)					; Write it out.
05972 G D0FC 0020             1						Adda.l	#DAFB_Reset,A0						; Add in offset to reset reg.
05976   20BC 0000 0003        1						Move.l	#dafbReleaseSwatch,(A0)				; Release swatch from reset.
0597C                         1						DAFBResetDelay &dafbBase					; Wait.
0597C   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
05980 G 204C                  2						Move.l	A4,A0						; Get DAFBBase into A0.
05982 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
05986   7003                  2						Moveq	#3,D0								; Set up loop counter.
05988   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
0598A G 51C8 FFFC       05988 2						Dbra	D0,@DelayLoop						;	and loop until done.
0598E   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
05992   20BC 0000 0007        1						Move.l	#dafbReassertSwatch,(A0)			; Reset Swatch again.
05998                         1						DAFBResetDelay &dafbBase					; Wait.
05998   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
0599C G 204C                  2						Move.l	A4,A0						; Get DAFBBase into A0.
0599E G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
059A2   7003                  2						Moveq	#3,D0								; Set up loop counter.
059A4   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
059A6 G 51C8 FFFC       059A4 2						Dbra	D0,@DelayLoop						;	and loop until done.
059AA   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
059AE   20BC 0000 0003        1						Move.l	#dafbReleaseSwatch,(A0)				; Release swatch from reset.
059B4                         1						DAFBResetDelay &dafbBase					; Wait.
059B4   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
059B8 G 204C                  2						Move.l	A4,A0						; Get DAFBBase into A0.
059BA G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
059BE   7003                  2						Moveq	#3,D0								; Set up loop counter.
059C0   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
059C2 G 51C8 FFFC       059C0 2						Dbra	D0,@DelayLoop						;	and loop until done.
059C6   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
059CA   20BC 0000 0002        1						Move.l	#dafbReleaseVRamSM,(A0)				; Reset VRam state machine.
059D0                         1						DAFBResetDelay &dafbBase					; Wait.
059D0   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
059D4 G 204C                  2						Move.l	A4,A0						; Get DAFBBase into A0.
059D6 G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
059DA   7003                  2						Moveq	#3,D0								; Set up loop counter.
059DC   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
059DE G 51C8 FFFC       059DC 2						Dbra	D0,@DelayLoop						;	and loop until done.
059E2   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
059E6 G 4290                  1						Move.l	#dafbReleaseVideoSM,(A0)			; Reset Video refresh state machine.
059E8                         1						DAFBResetDelay &dafbBase					; Wait.
059E8   48E7 8080             2						Movem.l	A0/D0,-(Sp)							; Save A0/D0.
059EC G 204C                  2						Move.l	A4,A0						; Get DAFBBase into A0.
059EE G D0FC 002C             2						Adda.l	#DAFB_Test,A0						; Add in offset to test register.
059F2   7003                  2						Moveq	#3,D0								; Set up loop counter.
059F4   4A90                  2	@DelayLoop			Tst.l	(A0)								; Delay for 100 to 120 ns, and
059F6 G 51C8 FFFC       059F4 2						Dbra	D0,@DelayLoop						;	and loop until done.
059FA   4CDF 0101             2						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
059FE   4CDF 0101             1						Movem.l	(Sp)+,A0/D0							; Restore A0/D0.
05A02
05A02   101F                   				MOVE.B		(SP)+,D0							; get the previous addressing mode back
05A04   A05D                   				_SwapMMUMode									;
05A06
05A06   4CDF 1707              				MOVEM.L		(SP)+,D0-D2/A0-A2/A4				; restore all regs
05A0A   4E75                   				RTS												; return
05A0C
05A0C                          				ENDWITH
05A0C
05A0C                          	;---------------------------------------------------------------------
05A0C                          	;
05A0C                          	;	Fill the screen with a 50% dithered gray pattern.  To have gotten here
05A0C                          	;		we must have had a valid display connected, so there are not tests
05A0C                          	;		for inactive displays here.
05A0C                          	;
05A0C                          	;			D1 = spID of screen depth - FirstVidMode
05A0C                          	;			A3 = driver private storage
05A0C                          	;
05A0C                          	;	All registers are preserved
05A0C                          	;
05A0C
05A0C                          	DAFBGrayScreen
05A0C
05A0C   48E7 FFE0              				MOVEM.L		A0-A2/D0-D7,-(SP)
05A10
05A10   3E01                   				Move.w		D1,D7								; Save vidMode for later.
05A12
05A12   41FA F1D2       04BE6  				LEA			DAFBPats,A0							; point to the pattern table
05A16   2830 1400              				MOVE.L		(A0,D1*4),D4						; get the graying pattern
05A1A
05A1A   2A04                   				MOVE.L		D4,D5								; copy it
05A1C   7CFF                   				MOVEQ		#IndexedBlack,D6					; assume an indexed mode for now
05A1E G 2453                   				MOVE.L		saveBaseAddr(A3),A2					; get the screen base address
05A20
05A20 G 0C41 0004              				CMP.W		#FifthVidMode-FirstVidMode,D1		; is this a direct mode?
05A24   6D0A            05A30  				BLT.S		@StartGray							; if not, go on
05A26
05A26 G 0C41 0004              				Cmp.w		#FifthVidMode-FirstVidMode,D1		; If this is 16bpp mode, then
05A2A   6702            05A2E  				Beq.s		@Skip32bpp							;	the data fits in one long.
05A2C   4685                   				Not.l		D5									; Otherwise, invert this half for white.
05A2E
05A2E   7C00                   	@Skip32bpp	MOVEQ		#DirectBlack,D6						; get direct black for ST borders
05A30
05A30 G 226B 001C              	@StartGray	MOVE.L		saveVidPtr(A3),A1					; point to video parameters
05A34   C2FC 0042              				MULU		#DepthSize+ScreenSize,D1			; index to the correct parameter group
05A38   43F1 1048              				LEA			ClockSize+MiscSize+DepthSize(A1,D1),A1 ; point to the screen graying parameters
05A3C
05A3C   7001                   				MOVEQ		#true32b,D0							; flip to 32-bit mode
05A3E   A05D                   				_SwapMMUMode									;
05A40   1400                   				MOVE.B		D0,D2								; save previous addressing mode
05A42
05A42                          	; Do top of screenÉ
05A42                          	;
05A42                          	;	Note that SC_BorderHeight is adjusted to work correctly for both bordered and non-bordered s
05A42                          	;	Specifically, this constant is not Ò-1Ó-adjusted for Dbra, so we jump into the tail end of t
05A42                          	;	loop and therefore have the ÒrightÓ thing happen.  My head hurts now, and I hope yours does.
05A42                          	;
05A42                          				With		SC_Params
05A42
05A42                          	DAFBDoGray
05A42
05A42   162B 0028              				Move.b		saveSlotID(A3),D3					; Get the SlotID into a convenient register.
05A46
05A46 G 0C03 0084              				Cmp.b		#sRsrc_Vid_DAFB_GS,D3				; If weÕre on a Rubik display, then
05A4A   6718            05A64  				Beq.s		@FixRubik1bpp						;	see if we need to do fix.
05A4C
05A4C G 0C03 008C              				Cmp.b		#sRsrc_Vid_DAFB_NTSCconvST,D3		; If weÕre on an NTSC convolved display,
05A50   6718            05A6A  				Beq.s		@FixNTSCPALTop						;	then apply fix.
05A52 G 0C03 008E              				Cmp.b		#sRsrc_Vid_DAFB_NTSCconvFF,D3
05A56   6712            05A6A  				Beq.s		@FixNTSCPALTop
05A58
05A58 G 0C03 009E              				Cmp.b		#sRsrc_Vid_DAFB_PALconvST,D3		; If weÕre on a PAL convolved display,
05A5C   670C            05A6A  				Beq.s		@FixNTSCPALTop						;	then apply fix.
05A5E G 0C03 00A0              				Cmp.b		#sRsrc_Vid_DAFB_PALconvFF,D3
05A62   6016            05A7A  				Bra.s		@ScreenStart
05A64
05A64                          	@FixRubik1bpp
05A64   303C 0200              				Move.w		#DAFB_512_RB,D0						; Fix first-line problem on Rubik displays.
05A68   6004            05A6E  				Bra.s		@FixRow
05A6A
05A6A                          	@FixNTSCPALTop
05A6A   303C 0400              				Move.w		#DAFB_1024_RB,D0					; Create ÒfalseÓ first line on NTSC/PAL convolved displays.
05A6E
05A6E   94C0                   	@FixRow		Suba		D0,A2								; Point back one full line.
05A70   E448                   				Lsr.w		#2,D0								; Make loop counter long-word based.
05A72   5340                   				Subq		#1,D0								; Subtract 1 for Dbra.
05A74   24C6                   	@BlastRow	Move.l		D6,(A2)+							; Write black out.
05A76 G 51C8 FFFC       05A74  				Dbra		D0,@BlastRow
05A7A
05A7A                          	@ScreenStart
05A7A   3229 0004              				Move.w		SC_BorderHeight(A1),D1				; get number of rows (not -1) to blast back on top
05A7E   600E            05A8E  				Bra.s		@TopSecPrime						;
05A80
05A80                          	@TopSecFill_V
05A80   3029 0006              				Move.w		SC_BorderWidth(A1),D0				; get number of longs (-1) to blast black in row
05A84                          	@TopSecFill_H
05A84   24C6                   				Move.l		D6,(A2)+							; blast black to screen
05A86 G 51C8 FFFC       05A84  				Dbra		D0,@TopSecFill_H
05A8A
05A8A   D4E9 000A              				Adda.w		SC_SkipFactor(A1),A2				; skip to start of next row
05A8E                          	@TopSecPrime
05A8E G 51C9 FFF0       05A80  				Dbra		D1,@TopSecFill_V
05A92
05A92                          	; Do middle of screenÉ
05A92                          	;
05A92                          	;	Unlike the top part, there is always a Òmiddle.Ó  However, there might be a left and right s
05A92                          	;	border is appropriate), so the not Ò-1Ó-adjusted for Dbra comments that are listed above app
05A92                          	;	here.
05A92                          	;
05A92   3211                   				Move.w		SC_ActiveHeight(A1),D1				; get number of rows (-1) in middle of screen
05A94
05A94                          	@MidSecFill_V
05A94   3029 0008              				Move.w		SC_BorderSide(A1),D0				; get number of longs (not -1) to blast black in row
05A98   6002            05A9C  				Bra.s		@MidSecPrime_L
05A9A                          	@MidSecFill_L
05A9A   24C6                   				Move.l		D6,(A2)+							; blast black to screen
05A9C                          	@MidSecPrime_L
05A9C G 51C8 FFFC       05A9A  				Dbra		D0,@MidSecFill_L
05AA0
05AA0   3029 0002              				Move.w		SC_ActiveWidth(A1),D0				; get the number of doublelongs (-1) for active middle
05AA4                          	@MidActFill_H
05AA4   24C4                   				Move.l		D4,(A2)+							; Fill the active section with gray
05AA6 G 0C03 0096              				Cmp.b		#sRsrc_Vid_DAFB_SVGAa,D3			; Skip if SuperVGA (800x600 is not an
05AAA   6708            05AB4  				Beq.s		@ChkMode							;	even multiple of 64, but it is an)
05AAC G 0C03 0097              				Cmp.b		#sRsrc_Vid_DAFB_SVGAb,D3			;	even multiple of 32).
05AB0   6702            05AB4  				Beq.s		@ChkMode							;
05AB2   6006            05ABA  				Bra.s		@DoDouble							;
05AB4 G 0C47 0005              	@ChkMode	Cmp.w		#SixthVidMode-FirstVidMode,D7		; If weÕre not doing 32bpp,
05AB8   6602            05ABC  				Bne.s		@SkipDouble							;	then really skip.
05ABA   24C5                   	@DoDouble	Move.l		D5,(A2)+							; Otherwise, do second half where applicable.
05ABC G 51C8 FFE6       05AA4  	@SkipDouble	Dbra		D0,@MidActFill_H
05AC0
05AC0   4684                   				Not.l		D4									; Invert for next line, and
05AC2   4685                   				Not.l		D5									;	second half if applicable.
05AC4
05AC4   3029 0008              				Move.w		SC_BorderSide(A1),D0				; get number of longs (not -1) to blast black in row
05AC8   6002            05ACC  				Bra.s		@MidSecPrime_R
05ACA                          	@MidSecFill_R
05ACA   24C6                   				Move.l		D6,(A2)+							; blast black to screen
05ACC                          	@MidSecPrime_R
05ACC G 51C8 FFFC       05ACA  				Dbra		D0,@MidSecFill_R
05AD0
05AD0 G D4E9 000A              				Add.w		SC_SkipFactor(A1),A2				; move to NEXT line
05AD4 G 51C9 FFBE       05A94  				Dbra		D1,@MidSecFill_V
05AD8
05AD8                          	; Do bottom of screenÉ
05AD8                          	;
05AD8   3229 0004              				Move.w		SC_BorderHeight(A1),D1				; Get number of rows (not -1) to blast back on bottom.
05ADC
05ADC G 0C03 008C              				Cmp.b		#sRsrc_Vid_DAFB_NTSCconvST,D3		; If weÕre on an NTSC convolved display,
05AE0   6712            05AF4  				Beq.s		@FixNTSCPALBot						;	then apply fix.
05AE2 G 0C03 008E              				Cmp.b		#sRsrc_Vid_DAFB_NTSCconvFF,D3
05AE6   670C            05AF4  				Beq.s		@FixNTSCPALBot
05AE8
05AE8 G 0C03 009E              				Cmp.b		#sRsrc_Vid_DAFB_PALconvST,D3		; If weÕre on a PAL convolved display,
05AEC   6706            05AF4  				Beq.s		@FixNTSCPALBot						;	then apply fix.
05AEE G 0C03 00A0              				Cmp.b		#sRsrc_Vid_DAFB_PALconvFF,D3
05AF2   6002            05AF6  				Bra.s		@BotStart
05AF4
05AF4                          	@FixNTSCPALBot
05AF4   5241                   				Addq		#1,D1								; For convolved interlace displays, we need to
05AF6                          																;	blacken the ÒfalseÓ bottom.
05AF6                          	@BotStart
05AF6   600E            05B06  				Bra.s		@BotSecPrime						;
05AF8                          	@BotSecFill_V
05AF8   3029 0006              				Move.w		SC_BorderWidth(A1),D0				; get number of longs (-1) to blast black in row
05AFC                          	@BotSecFill_H
05AFC   24C6                   				Move.l		D6,(A2)+							; blast black to screen
05AFE G 51C8 FFFC       05AFC  				Dbra		D0,@BotSecFill_H
05B02
05B02   D4E9 000A              				Adda.w		SC_SkipFactor(A1),A2				; skip to start of next row
05B06                          	@BotSecPrime
05B06 G 51C9 FFF0       05AF8  				Dbra		D1,@BotSecFill_V
05B0A
05B0A                          				Endwith											; SC_Parms
05B0A
05B0A   1002                   				MOVE.B		D2,D0								; get the previous addressing mode back
05B0C   A05D                   				_SwapMMUMode									;
05B0E
05B0E                          	@GrayExit
05B0E   4CDF 07FF              				MOVEM.L		(SP)+,A0-A2/D0-D7					; restore all regs
05B12   4E75                   				RTS												; and return
05B14
05B14                          	;---------------------------------------------------------------------
05B14                          	;
05B14                          	; DAFBDirectCLUTSet writes gamma-corrected ascending grayscale ramps into
05B14                          	;	the CLUT
05B14                          	;
05B14                          	; A3 = dCtlStorage pointer
05B14                          	;
05B14                          	; Preserves all registers used.
05B14                          	;
05B14                          	;---------------------------------------------------------------------
05B14
05B14                          	DAFBDirectCLUTSet
05B14
05B14   48E7 F48E              				MOVEM.L		D0-D3/D5/A0/A4-A6,-(SP)				; save registers
05B18
05B18 G 206B 000C              				MOVE.L		saveGammaPtr(A3),A0					; get pointer to gamma data structure
05B1C   3028 0004              				MOVE.W		gFormulaSize(A0),D0					; get the size of formula data
05B20   49E8 000C              				LEA			gFormulaData(A0),A4					; point to formula data
05B24 G D8C0                   				ADD			D0,A4								; red correction table starts here
05B26 G 2A4C                   				MOVE.L		A4,A5								; get default pointer to green data
05B28 G 2C4C                   				MOVE.L		A4,A6								; get default pointer to blue data
05B2A
05B2A G 0C68 0001 0006         				CMP.W		#1,gChanCnt(A0)						; if only only one table, we're set
05B30   6712            05B44  				BEQ.S		@OneTbl								; => just one table
05B32
05B32   3228 000A              				MOVE		gDataWidth(A0),D1					; get width of each entry in bits
05B36   5E41                   				ADDQ		#7,D1								; round to nearest byte
05B38   E649                   				LSR			#3,D1								; get bytes per entry
05B3A   C2E8 0008              				MULU		gDataCnt(A0),D1						; get size of table in bytes
05B3E
05B3E   DAC1                   				ADDA		D1,A5								; calc base of green
05B40   DCC1                   				ADDA		D1,A6								; calc baseÉ
05B42   DCC1                   				ADDA		D1,A6								; 	Éof blue
05B44
05B44   3428 0008              	@OneTbl		MOVE.W		gDataCnt(A0),D2						; Get number of entries.
05B48   5342                   				Subq		#1,D2								; Make it zero based.
05B4A
05B4A   7001                   				MOVEQ		#true32b,D0							; flip to 32-bit mode
05B4C   A05D                   				_SwapMMUMode									;
05B4E   1F00                   				MOVE.B		D0,-(SP)							; save previous addressing mode
05B50
05B50 G 206B 0014              				MOVE.L		saveVDACBase(A3),A0					; point to the hardware
05B54 G 41E8 0210              				ADDA		#ACDC_DataReg,A0					; point to data register
05B58   42A8 FFF0              				CLR.L		ACDC_AddrReg-ACDC_DataReg(A0)		; start at the beginning of CLUT
05B5C
05B5C   3A2B 0020              				Move.w		GFlags(A3),D5						; Get the flags for quick access.
05B60
05B60   322B 0024              				Move.w		saveMode(A3),D1						; Get the current mode.
05B64 G 0C01 0084              				Cmp.b		#FifthVidMode,D1					; If weÕre not doing 16bpp,
05B68   6608            05B72  				Bne.s		@Normbpp							;	then go on.
05B6A   08C5 000C              				Bset		#UseTrans,D5						; Otherwise, remember to do 5-to-8 translations,
05B6E   343C 001F              				Move.w		#$1F,D2								; 	and whack only 32 entries in 16bpp mode.
05B72
05B72 P 40E7                   	@Normbpp	MOVE.W		SR,-(SP)							; preserve the status register
05B74   6100 FC90       05806  				BSR			DAFBWaitVSync						; wait for next blanking period (preserves A0)
05B78
05B78                          	; Write an incrementing grayscale ramp.
05B78
05B78   7000                   				Moveq		#0,D0								; Init write value.
05B7A   7600                   				Moveq		#0,D3								; Init ramp start.
05B7C   7200                   				Moveq		#0,D1								; Init trans index (will be used as a long).
05B7E
05B7E   3203                   	@Repeat		Move.w		D3,D1								; Get the current ramp/index value.
05B80   0805 000C              				Btst		#UseTrans,D5						; If we donÕt need to translate this value,
05B84   6708            05B8E  				Beq.s		@Index								; 	then just go on.
05B86   6100 FC36       057BE  				Bsr			DAFBTrans5to8						; Otherwise, convert it, and use it
05B8A   2141 FFF0              				Move.l		D1,ACDC_AddrReg-ACDC_DataReg(A0)	; 	to set the right Clut address.
05B8E
05B8E   1034 1000              	@Index		MOVE.B		(A4,D1),D0							; get gamma corrected red
05B92   2080                   				MOVE.L		D0,(A0)								; write to data reg
05B94   1035 1000              				MOVE.B		(A5,D1),D0							; get gamma corrected green
05B98   2080                   				MOVE.L		D0,(A0)								; write to data reg
05B9A   1036 1000              				MOVE.B		(A6,D1),D0							; get gamma corrected blue
05B9E   2080                   				MOVE.L		D0,(A0)								; write to data reg
05BA0   5243                   				ADDQ		#1,D3								; increment ramp/index value
05BA2 G 51CA FFDA       05B7E  				DBRA		D2,@Repeat							;
05BA6
05BA6 P 46DF                   				MOVE.W		(SP)+,SR							; restore the status reg
05BA8   101F                   				MOVE.B		(SP)+,D0							; get back previous addressing mode
05BAA   A05D                   				_SwapMMUMode									;
05BAC
05BAC   4CDF 712F              				MOVEM.L		(SP)+,D0-D3/D5/A0/A4-A6				; restore saved registers
05BB0   4E75                   				RTS
05BB2
05BB2                          	;-------------------------------------------------------------
05BB2                          	;	The Interrupt handler for the DAFB Built-In Video
05BB2                          	;-------------------------------------------------------------
05BB2                          	; On entry A1 contains the pointer to the driver's private storage
05BB2                          	; D0-D3/A0-A3 have been preserved.
05BB2
05BB2                          	DAFBBeginIH
05BB2
05BB2   48E7 4080              				MOVEM.L	A0/D1,-(SP)								; save registers
05BB6   7001                   				MOVEQ	#true32b,D0								; flip to 32-bit addressing mode
05BB8   4EB0 81E1 0DBC         				JSR		([jSwapMMU])							;
05BBE   4CDF 0102              				MOVEM.L	(SP)+,A0/D1								; restore registers
05BC2   1F00                   				MOVE.B	D0,-(SP)								; save current addressing mode
05BC4
05BC4 G 2069 0018              				MOVE.L	saveDAFBBase(A1),A0						; point to the DAFB chip
05BC8   42A8 010C              				CLR.L	Swatch_ClrCrsrInt(A0) 					; clear the interrupt
05BCC
05BCC   101F                   				MOVE.B	(SP)+,D0								; get the MMU mode back
05BCE   48E7 4080              				MOVEM.L	A0/D1,-(SP)								; save registers
05BD2   4EB0 81E1 0DBC         				JSR		([jSwapMMU])							;
05BD8   4CDF 0102              				MOVEM.L	(SP)+,A0/D1								; restore registers
05BDC
05BDC   2008                   				Move.l	A0,D0									; D0 <- $Fs8000000
05BDE   E9C0 0104              				Bfextu	D0{4:4},D0								; D0 <- $00000000s
05BE2
05BE2 G 2078 0D28              				MOVE.L	JVBLTask,A0								; call the VBL task manager
05BE6   4E90                   				JSR		(A0)									; with slot # in D0
05BE8
05BE8   7001                   				MOVEQ	#1,D0									; signal that int was serviced
05BEA   4E75                   				RTS												; and return to caller
05BEC
05BEC                          	_EndDAFBDrvr
05BEC
05BEC   0000 5BEC              					Align	2
05BEC
05BEC                          	;-------------------------------------------------------------
05BEC                          	;				Format/Header Block
05BEC                          	;-------------------------------------------------------------
05BEC                          	;
05BEC
05BEC                          					With	FHeaderRec
05BEC   0000 7FEC              					Org 	ROMSize-fhBlockSize
07FEC
07FEC   00FF 8014              					Dc.l	(_sRsrcDir-*)**$00FFFFFF			; Offset to sResource directory.
07FF0   0000 8000              					Dc.l	ROMSize								; Length of declaration data.
07FF4   0000 0000              					Dc.l	0									; CRC {Patched by crcPatch}.
07FF8   01                     					Dc.b	Revision							; Revision (1-9).
07FF9   01                     					Dc.b	AppleFormat							; Format type.
07FFA   5A93 2BC7              					Dc.l	TestPattern							; Test pattern.
07FFE   00                     					Dc.b	0									; Reserved byte.
07FFF   E1                     					Dc.b	ByteLanes							; ByteLanes.
08000
08000                          					EndWith
08000                          					End
Elapsed time: 22.20 seconds.
Assembly complete - no errors found.  16506 lines.
